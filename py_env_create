#!/bin/bash
#
# py_env_create -- setup the python environment in order to use CTSM python tools
#
# Simple bash script to setup the python environment for the user so they can run the CTSM
# python tools using "conda" or "mamba".
#
set -e
trap 'echo "Exiting on Ctrl+C"; exit 130' INT

SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
cd "${SCRIPT_DIR}"

dir=${0%/*}
if [ "$dir" = "$0" ];then
  dir="."
fi

# Try falling back to mamba if conda doesn't work for some reason
condamamba="conda"
tmp_env_name="tmp_env_$(date "+%Y%m%d%H%M%S")"
set +e
${condamamba} create --name ${tmp_env_name} --yes --quiet 1>/dev/null 2>&1
result=$?
set -e
if [[ ${result} != 0 ]]; then
   condamamba="mamba"
   set +e
   ${condamamba} create --name ${tmp_env_name} --yes --quiet 1>/dev/null 2>&1
   result=$?
   set -e
   if [[ ${result} != 0 ]]; then
      echo "Neither conda nor mamba are on your path. Add one with modules or whatever is required on your system to get it in your path."
      echo "on Derecho/Casper/etc use: module load conda"
      echo "on izumi/CGD systems use: module unload lang/python; module load lang/anaconda/23.11.0/base"
      echo "For notes on installing on a user system see: https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html"
      exit ${result}
   fi
fi
${condamamba} remove --all --name ${tmp_env_name} --yes --quiet 1>/dev/null 2>&1

default_new_env_name=ctsm_pylib


condadir="$dir/python"

condafile="${condadir}/conda_env_ctsm_py.txt"
#----------------------------------------------------------------------
# Usage subroutine
usage() {
  echo ""
  echo "***********************************************************************"
  echo "usage:"
  echo "./py_env_create"
  echo ""
  echo "valid arguments: "
  echo "[-h|--help]  "
  echo "     Displays this help message"
  echo "[-f|--file <file>]  "
  echo "     Conda environment requirements text file to use (text format) in addition to the others"
  echo "     Assumed to be under the directory: $condadir"
  echo "     Default is: $condafile"
  echo "[-n|--name <environment name>]  "
  echo "     Name of the environment you wish to create. Default: ${default_new_env_name}"
  echo "[-o|--overwrite]  "
  echo "     Overwrite existing env with same name, if any"
  echo "[-q|--quiet]  "
  echo "     Run with quiet mode to minimize Conda messages. Incompatible with -v/--verbose. May fail to quiet things if you don't also specify -y/--yes."
  echo "[-r|--rename-existing] <name>  "
  echo "     Rename existing env with same name, if any"
  echo "[-v|--verbose]  "
  echo "     Run with verbose mode so you see the progress bar. Incompatible with -q/--quiet."
  echo "[-y|--yes]  "
  echo "     Do not ask for confirmation"
  echo "[--option <option>]  "
  echo "     Option(s) to pass to '${condamamba} install' step"
  echo "***********************************************************************"
}

quiet=""
verbose=""
option=""
yes=""
new_env_name=${default_new_env_name}
new_name_for_existing=""
overwrite=0
while [ $# -gt 0 ]; do
   case $1 in
       -h|--help )
           usage
           exit 0
           ;;
       -f|--file )
           condafile=$2
           shift
           ;;
       -n|--name )
           new_env_name=$2
           shift
           ;;
       -o|--overwrite )
           overwrite=1
           ;;
       -q|--quiet )
           quiet="--quiet"
           ;;
       --option )
           option=$2
           shift
           ;;
       -r|--rename-existing )
           new_name_for_existing=$2
           shift
           ;;
       -v|--verbose )
           verbose="--verbose"
           ;;
       -y|--yes )
           yes="--yes"
           ;;
       * )
           echo "ERROR:: invalid argument: '$2'"
           usage
           exit 1
           ;;
   esac
   shift
done

#
# Error checking options and setup
#
if [[ "${verbose}" == "--verbose" && "${quiet}" == "--quiet" ]]; then
   echo "-v/--verbose and -q/--quiet are not compatible" >&2
   exit 1
fi
if [ ! -f $condafile ]; then
   echo "$condafile does NOT exist"
   echo "Use the --file option with a valid filename"
   exit -1
fi

echo "Using ${condamamba} to install the python environment needed to run the CTSM python tools in the ${condamamba} environment: $new_env_name"
echo "Using the file: $condafile"

#
# Ask the user how to handle an environment that already exists
#
function conda_env_exists {
   ${condamamba} env list | grep -oE "/$1$" | wc -l
}
function rename_existing_env {
   if [[ "$CONDA_DEFAULT_ENV" == *"$1" ]]; then
      echo "Not going to let you rename the currently active env" >&2
      exit 1
   elif [[ $(conda_env_exists $2) -eq 0 ]]; then
      echo "Renaming $1 to $2 (this will take a few minutes)..."
      yes_tmp=${yes/yes/force}
      if [[ "${quiet}" == "--quiet" ]]; then
         # -q/--quiet option not available on Derecho
         (set -x; ${condamamba} rename ${yes_tmp} -n $1 $2 1>/dev/null)
      else
         (set -x; ${condamamba} rename ${yes_tmp} ${verbose} -n $1 $2)
      fi
   else
      echo "$2 also already exists" >&2
      exit 1
   fi
}
function overwrite_existing_env {
   if [[ "$CONDA_DEFAULT_ENV" == *"$1" ]]; then
      echo "Not going to let you overwrite the currently active env" >&2
      exit 1
   elif [[ "${quiet}" == "--quiet" ]]; then
      # -q/--quiet option not available on Derecho
      (set -x; ${condamamba} remove ${yes} -n $1 --all ${quiet} 1>/dev/null)
   else
      (set -x; ${condamamba} remove ${yes} -n $1 --all ${verbose})
   fi
}

if [[ "${new_name_for_existing}" != "" && ${overwrite} -eq 1 ]]; then
   echo "Only specify one of -o/--overwrite or -r/--rename-existing." >&2
   exit 1
fi

if [[ $(conda_env_exists ${new_env_name}) -gt 0 ]]; then

   if [[ "${new_name_for_existing}" != "" ]]; then
      rename_existing_env ${new_env_name} ${new_name_for_existing}
   elif [[ ${overwrite} -eq 1 ]]; then
      overwrite_existing_env ${new_env_name}
   else
      echo "Environment ${new_env_name} already exists." >&2
      echo "Try again using one of:" >&2
      echo "   -n/--name <name>             to choose a different name for the new env" >&2
      echo "   -r/--rename-existing <name>  to choose a different name for the existing env" >&2
      echo "   -o/--overwrite <name>        to overwrite the existing env" >&2
      exit 1
   fi

fi

#
# Create the environment
#
echo "Create $new_env_name"
if [[ "${quiet}" == "--quiet" ]]; then
   (set -x; ${condamamba} create ${yes} --name $new_env_name ${quiet} 1>/dev/null)
else
   (set -x; ${condamamba} create ${yes} --name $new_env_name ${verbose})
fi

#
# Install the environment
#
echo "Installing $new_env_name; this can take a few minutes."
cmd=""
if [[ "${quiet}" == "--quiet" ]]; then
   # -q/--quiet option not available on Derecho
   (set -x; ${condamamba} install ${yes} --channel conda-forge --name $new_env_name --file $condafile $option ${quiet} 1>/dev/null)
else
   (set -x; ${condamamba} install ${yes} --channel conda-forge --name $new_env_name --file $condafile $option ${verbose})
fi
#
# Report on success
#
echo "Successfully installed the $new_env_name python environment"
echo
echo "activate the environment by doing the following..."
echo "${condamamba} activate $new_env_name"
