#!/bin/bash
#
# py_env_create -- setup the python environment in order to use CTSM python tools
#
# Simple bash script to setup the python environment for the user so they can run the CTSM
# python tools using "conda".
#
set -e
trap 'echo "Exiting on Ctrl+C"; exit 130' INT

SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
cd "${SCRIPT_DIR}"

dir=${0%/*}
if [ "$dir" = "$0" ];then
  dir="."
fi

# Check if conda is in your path
conda --help >& condahelp.txt
error=$?
if [ $error != 0 ]; then
   echo "conda is NOT in your path for the bash shell add it with modules or whatever is required on your system to get it in your path"
   echo "on Derecho/capser/etc use -- module load conda"
   echo "on izumi/CGD systems use -- module unload lang/python; module load lang/anaconda/23.11.0/base"
   echo "For notes on installing on a user system see: https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html"
   echo "Error code was $error"
   cat condahelp.txt
   rm condahelp.txt
   exit -1
fi
rm condahelp.txt
default_new_env_name=ctsm_pylib


condadir="$dir/python"

domain=`domainname`
condafile="${condadir}/conda_env_ctsm_py.txt"
#----------------------------------------------------------------------
# Usage subroutine
usage() {
  echo ""
  echo "***********************************************************************"
  echo "usage:"
  echo "./py_env_create"
  echo ""
  echo "valid arguments: "
  echo "[-h|--help]  "
  echo "     Displays this help message"
  echo "[-v|--verbose]  "
  echo "     Run with verbose mode for the install so you see the progress bar"
  echo "[-f|--file <file>]  "
  echo "     Conda environment requirements text file to use (text format) in addition to the others"
  echo "     Assumed to be under the directory: $condadir"
  echo "     Default is: $condafile"
  echo "[-n|--name <environment name>]  "
  echo "     Name of the environment you wish to create. Default: ${default_new_env_name}"
  echo "[-o|--overwrite]  "
  echo "     Overwrite existing conda env with same name, if any"
  echo "[-r|--rename-existing] <name>  "
  echo "     Rename existing conda env with same name, if any"
  echo "[-y|--yes]  "
  echo "     Do not ask for confirmation"
  echo "[--option <option>]  "
  echo "     Option(s) to pass to 'conda install' step"
  echo "***********************************************************************"
}

verbose="No"
option=""
yes=""
new_env_name=${default_new_env_name}
new_name_for_existing=""
overwrite=0
while [ $# -gt 0 ]; do
   case $1 in
       -h|--help )
           usage
           exit 0
           ;;
       -v|--verbose )
           verbose="Yes"
           ;;
       -f|--file )
           condafile=$2
           shift
           ;;
       -n|--name )
           new_env_name=$2
           shift
           ;;
       -o|--overwrite )
           overwrite=1
           ;;
       --option )
           option=$2
           shift
           ;;
       -r|--rename-existing )
           new_name_for_existing=$2
           shift
           ;;
       -y|--yes )
           yes="--yes"
           ;;
       * )
           echo "ERROR:: invalid argument: '$2'"
           usage
           exit 1
           ;;
   esac
   shift
done

#
# Error checking options and setup
#
if [ ! -f $condafile ]; then
   echo "$condafile does NOT exist"
   echo "Use the --file option with a valid filename"
   exit -1
fi

echo "Use conda to install the python environment needed to run the CTSM python tools in the conda environment: $new_env_name"
echo "Using the file: $condafile"

#
# Ask the user how to handle an environment that already exists
#
function conda_env_exists {
   conda env list | grep -oE "/$1$" | wc -l
}
function rename_existing_env {
   if [[ "$CONDA_DEFAULT_ENV" == *"$1" ]]; then
      echo "Not going to let you rename the currently active conda env" >&2
      exit 1
   elif [[ $(conda_env_exists $2) -eq 0 ]]; then
      echo "Renaming $1 to $2 (this will take a few minutes)..."
      yes_tmp=${yes/yes/force}
      conda rename ${yes_tmp} -n $1 $2 1>/dev/null  # -q/--quiet option not available on Derecho
   else
      echo "$2 also already exists" >&2
      exit 1
   fi
}
function overwrite_existing_env {
   if [[ "$CONDA_DEFAULT_ENV" == *"$1" ]]; then
      echo "Not going to let you overwrite the currently active conda env" >&2
      exit 1
   else
      conda remove ${yes} -n $1 --all --quiet
   fi
}

if [[ "${new_name_for_existing}" != "" && ${overwrite} -eq 1 ]]; then
   echo "Only specify one of -o/--overwrite or -r/--rename-existing." >&2
   exit 1
fi

if [[ $(conda_env_exists ${new_env_name}) -gt 0 ]]; then

   if [[ "${new_name_for_existing}" != "" ]]; then
      rename_existing_env ${new_env_name} ${new_name_for_existing}
   elif [[ ${overwrite} -eq 1 ]]; then
      overwrite_existing_env ${new_env_name}
   else
      echo "Conda environment ${new_env_name} already exists." >&2
      echo "Try again using one of:" >&2
      echo "   -n/--name <name>             to choose a different name for the new env" >&2
      echo "   -r/--rename-existing <name>  to choose a different name for the existing env" >&2
      echo "   -o/--overwrite <name>        to overwrite the existing env" >&2
      exit 1
   fi

fi

#
# Create the environment
#
echo "Create $new_env_name"
cmd="conda create ${yes} --name $new_env_name --quiet"
echo "$cmd"
$cmd

#
# Install the environment
#
echo "Installing $new_env_name; this can take a few minutes."
echo "    ...."
echo "    ...."
echo "    ...."
verbosity="--quiet"
loglevel="ERROR"
if [ "$verbose" == "Yes" ]; then
  verbosity="--verbose"
  loglevel="INFO"
fi
cmd="conda install ${yes} $verbosity --channel conda-forge --name $new_env_name --file $condafile $option"
echo "$cmd"
set +e
$cmd
result=$?
set -e
if [ $result != 0 ]; then
   echo "Trouble installing the $new_env_name python environment"
   echo "There must be a problem in the $condafile conda specification environment file"
   echo "Change the file and try again"
   exit -2
fi
#
# Report on success
#
echo "Successfully installed the $new_env_name python environment"
echo
echo "activate the environment by doing the following..."
echo "conda activate $new_env_name"
