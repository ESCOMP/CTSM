module test_downscale_forcings

  ! Tests of atm2lndMod: downscale_forcings

  use pfunit_mod
  use atm2lndMod
  use shr_kind_mod , only : r8 => shr_kind_r8
  use unittestSubgridMod
  use unittestSimpleSubgridSetupsMod
  use unittestArrayMod
  use atm2lndType, only : atm2lnd_type, atm2lnd_params_type
  use Wateratm2lndBulkType, only : wateratm2lndbulk_type
  use WaterInfoBulkType, only : water_info_bulk_type
  use TopoMod, only : topo_type
  use decompMod, only : bounds_type
  use filterColMod

  implicit none

  type, extends(topo_type) :: topo_type_always_downscale
   contains
     procedure, public :: DownscaleFilterc
  end type topo_type_always_downscale

  @TestCase
  type, extends(TestCase) :: TestDownscaleForcings
     type(atm2lnd_type) :: atm2lnd_inst
     type(wateratm2lndbulk_type) :: wateratm2lndbulk_inst
     type(topo_type_always_downscale) :: topo_inst
     real(r8), allocatable :: eflx_sh_precip_conversion(:)
   contains
     procedure :: setUp
     procedure :: tearDown
     procedure :: create_atm2lnd
     procedure :: create_topo
     procedure :: call_downscale_forcings
  end type TestDownscaleForcings

  real(r8), parameter :: lapse_rate = 0.006_r8
  real(r8), parameter :: lapse_rate_longwave = 0.03_r8

  real(r8), parameter :: tol = 1.e-13_r8

contains

  ! ========================================================================
  ! Methods on topo_type_always_downscale
  ! ========================================================================

  function DownscaleFilterc(this, bounds) result(filter)
    ! Override topo_type's DownscaleFilterc
    type(filter_col_type) :: filter  ! function result
    class(topo_type_always_downscale), intent(in) :: this
    type(bounds_type), intent(in) :: bounds

    filter = col_filter_from_logical_array(bounds, &
         col_array(.true.))
  end function DownscaleFilterc

  ! ========================================================================
  ! Test helper methods
  ! ========================================================================

  subroutine setUp(this)
    class(TestDownscaleForcings), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestDownscaleForcings), intent(inout) :: this

    call this%atm2lnd_inst%Clean()
    call this%wateratm2lndbulk_inst%Clean()
    call this%topo_inst%Clean()
    call unittest_subgrid_teardown()
  end subroutine tearDown

  subroutine create_atm2lnd(this, forc_topo, forc_t, forc_th, forc_q, forc_pbot, forc_rho, &
       forc_lwrad, forc_rain, forc_snow, glcmec_downscale_longwave, longwave_downscaling_limit)
    ! Initializes this%atm2lnd_inst and this%wateratm2lndbulk_inst, and sets
    ! gridcell-level, non-downscaled forcing fields based on inputs. Excluded inputs are
    ! given a default value
    class(TestDownscaleForcings), intent(inout) :: this
    real(r8), intent(in) :: forc_topo(:)
    real(r8), intent(in), optional :: forc_t(:)
    real(r8), intent(in), optional :: forc_th(:)
    real(r8), intent(in), optional :: forc_q(:)
    real(r8), intent(in), optional :: forc_pbot(:)
    real(r8), intent(in), optional :: forc_rho(:)
    real(r8), intent(in), optional :: forc_lwrad(:)
    real(r8), intent(in), optional :: forc_rain(:)
    real(r8), intent(in), optional :: forc_snow(:)

    ! If not provided, assumed to be true
    logical, intent(in), optional :: glcmec_downscale_longwave

    ! If not provided, assumed to be longwave_downscaling_limit_default
    real(r8), intent(in), optional :: longwave_downscaling_limit

    real(r8), parameter :: forc_t_default = 301._r8
    real(r8), parameter :: forc_th_default = 302._r8
    real(r8), parameter :: forc_q_default = 0.01_r8
    real(r8), parameter :: forc_pbot_default = 100000._r8
    real(r8), parameter :: forc_rho_default = 1.1_r8
    real(r8), parameter :: forc_lwrad_default = 101._r8
    real(r8), parameter :: forc_rain_default = 21._r8
    real(r8), parameter :: forc_snow_default = 22._r8

    real(r8), parameter :: longwave_downscaling_limit_default = 1._r8

    real(r8), parameter :: forc_hgt = 2._r8

    logical :: l_glcmec_downscale_longwave
    real(r8) :: l_longwave_downscaling_limit
    type(atm2lnd_params_type) :: atm2lnd_params

    ! ------------------------------------------------------------------------

    if (present(glcmec_downscale_longwave)) then
       l_glcmec_downscale_longwave = glcmec_downscale_longwave
    else
       l_glcmec_downscale_longwave = .true.
    end if

    if (present(longwave_downscaling_limit)) then
       l_longwave_downscaling_limit = longwave_downscaling_limit
    else
       l_longwave_downscaling_limit = longwave_downscaling_limit_default
    end if

    atm2lnd_params = atm2lnd_params_type( &
         repartition_rain_snow = .false., &
         glcmec_downscale_longwave = l_glcmec_downscale_longwave, &
         lapse_rate = lapse_rate, &
         lapse_rate_longwave = lapse_rate_longwave, &
         longwave_downscaling_limit = l_longwave_downscaling_limit)
    call this%atm2lnd_inst%InitForTesting(bounds, atm2lnd_params)
    call this%wateratm2lndbulk_inst%InitForTesting(bounds, water_info_bulk_type())
    this%atm2lnd_inst%forc_topo_grc(bounds%begg:bounds%endg) = forc_topo(:)

    if (present(forc_t)) then
       this%atm2lnd_inst%forc_t_not_downscaled_grc(bounds%begg:bounds%endg) = forc_t(:)
    else
       this%atm2lnd_inst%forc_t_not_downscaled_grc(bounds%begg:bounds%endg) = forc_t_default
    end if

    if (present(forc_th)) then
       this%atm2lnd_inst%forc_th_not_downscaled_grc(bounds%begg:bounds%endg) = forc_th(:)
    else
       this%atm2lnd_inst%forc_th_not_downscaled_grc(bounds%begg:bounds%endg) = forc_th_default
    end if

    if (present(forc_q)) then
       this%wateratm2lndbulk_inst%forc_q_not_downscaled_grc(bounds%begg:bounds%endg) = forc_q(:)
    else
       this%wateratm2lndbulk_inst%forc_q_not_downscaled_grc(bounds%begg:bounds%endg) = forc_q_default
    end if

    if (present(forc_pbot)) then
       this%atm2lnd_inst%forc_pbot_not_downscaled_grc(bounds%begg:bounds%endg) = forc_pbot(:)
    else
       this%atm2lnd_inst%forc_pbot_not_downscaled_grc(bounds%begg:bounds%endg) = forc_pbot_default
    end if

    if (present(forc_rho)) then
       this%atm2lnd_inst%forc_rho_not_downscaled_grc(bounds%begg:bounds%endg) = forc_rho(:)
    else
       this%atm2lnd_inst%forc_rho_not_downscaled_grc(bounds%begg:bounds%endg) = forc_rho_default
    end if

    if (present(forc_lwrad)) then
       this%atm2lnd_inst%forc_lwrad_not_downscaled_grc(bounds%begg:bounds%endg) = forc_lwrad(:)
    else
       this%atm2lnd_inst%forc_lwrad_not_downscaled_grc(bounds%begg:bounds%endg) = forc_lwrad_default
    end if

    if (present(forc_rain)) then
       this%wateratm2lndbulk_inst%forc_rain_not_downscaled_grc(bounds%begg:bounds%endg) = forc_rain(:)
    else
       this%wateratm2lndbulk_inst%forc_rain_not_downscaled_grc(bounds%begg:bounds%endg) = forc_rain_default
    end if

    if (present(forc_snow)) then
       this%wateratm2lndbulk_inst%forc_snow_not_downscaled_grc(bounds%begg:bounds%endg) = forc_snow(:)
    else
       this%wateratm2lndbulk_inst%forc_snow_not_downscaled_grc(bounds%begg:bounds%endg) = forc_snow_default
    end if

    this%atm2lnd_inst%forc_hgt_grc(bounds%begg:bounds%endg) = forc_hgt
  end subroutine create_atm2lnd

  subroutine create_topo(this, topo_col)
    ! Initializes this%topo_inst, and sets topo_col
    class(TestDownscaleForcings), intent(inout) :: this
    real(r8), intent(in) :: topo_col(:)

    call this%topo_inst%Init(bounds)
    this%topo_inst%topo_col(bounds%begc:bounds%endc) = topo_col(:)
  end subroutine create_topo

  subroutine call_downscale_forcings(this)
    ! Wraps the call to downscale_forcings
    !
    ! Modifies this%atm2lnd_inst and this%eflx_sh_precip_conversion
    class(TestDownscaleForcings), intent(inout) :: this

    this%eflx_sh_precip_conversion = col_array()
    call downscale_forcings(bounds, this%topo_inst, &
         this%atm2lnd_inst, this%wateratm2lndbulk_inst, &
         this%eflx_sh_precip_conversion)
  end subroutine call_downscale_forcings

  ! ========================================================================
  ! Begin actual tests
  ! ========================================================================

  ! ------------------------------------------------------------------------
  ! Basic sanity tests
  ! ------------------------------------------------------------------------

  @Test
  subroutine topo_greaterThan_atmTopo_gives_colder_forc_t(this)
    class(TestDownscaleForcings), intent(inout) :: this
    real(r8), parameter :: atm_topo = 17._r8
    real(r8), parameter :: forc_t = 301._r8

    ! Setup
    call setup_single_veg_patch(pft_type=1)
    call this%create_atm2lnd( &
         forc_topo = [atm_topo], &
         forc_t = [forc_t])
    call this%create_topo(topo_col = [atm_topo + 10._r8])

    ! Exercise
    call this%call_downscale_forcings()

    ! Verify
    @assertGreaterThan(forc_t, this%atm2lnd_inst%forc_t_downscaled_col(begc))
  end subroutine topo_greaterThan_atmTopo_gives_colder_forc_t

  ! ------------------------------------------------------------------------
  ! Tests involving longwave normalization
  ! ------------------------------------------------------------------------

  @Test
  subroutine twoTopos_at_atmTopo_give_nearlyIdentical_forc_lwrad(this)
    class(TestDownscaleForcings), intent(inout) :: this
    real(r8), parameter :: topo = 17._r8
    real(r8), parameter :: forc_lwrad = 101._r8

    ! Setup
    call setup_landunit_ncols(ltype = 1, &
         ctypes = [0, 1], cweights = [0.7_r8, 0.3_r8])
    call this%create_atm2lnd( &
         forc_topo = [topo], &
         forc_lwrad = [forc_lwrad])
    call this%create_topo(topo_col = [topo, topo])

    ! Exercise
    call this%call_downscale_forcings()

    ! Verify
    associate(lwrad_col => this%atm2lnd_inst%forc_lwrad_downscaled_col)
    ! We expect a small difference due to normalization, so supply a tolerance
    @assertEqual([forc_lwrad, forc_lwrad], lwrad_col(bounds%begc:bounds%endc), tolerance=tol)
    end associate
  end subroutine twoTopos_at_atmTopo_give_nearlyIdentical_forc_lwrad

  @Test
  subroutine lwrad_adjusted_correctly(this)
    class(TestDownscaleForcings), intent(inout) :: this
    real(r8), parameter :: atm_topo = 17._r8
    real(r8), parameter :: topo_diff = 10._r8
    real(r8), parameter :: forc_lwrad = 101._r8
    real(r8) :: expected(3)

    ! Setup
    ! The columns of interest are the first and third. However, note that they have 0
    ! weight, in order to avoid needing to take normalization into account. We construct
    ! the grid so that the normalization factor will be 1 by putting the 100% area column
    ! at the atmosphere's topographic height.
    call setup_landunit_ncols(ltype = 1, &
         ctypes = [0, 1, 2], cweights = [0.0_r8, 1.0_r8, 0.0_r8])
    call this%create_atm2lnd( &
         forc_topo = [atm_topo], &
         forc_lwrad = [forc_lwrad])
    call this%create_topo(topo_col = [atm_topo - topo_diff, atm_topo, atm_topo + topo_diff])

    ! Exercise
    call this%call_downscale_forcings()

    ! Verify
    associate(lwrad_col => this%atm2lnd_inst%forc_lwrad_downscaled_col)
    expected(1) = forc_lwrad + lapse_rate_longwave * topo_diff
    expected(2) = forc_lwrad
    expected(3) = forc_lwrad - lapse_rate_longwave * topo_diff
    @assertEqual(expected, lwrad_col(bounds%begc:bounds%endc), tolerance=tol)
    end associate
  end subroutine lwrad_adjusted_correctly

  @Test
  subroutine lwrad_downscaling_limited(this)
    ! Make sure that the downscaling of lwrad obeys the specified bounds
    class(TestDownscaleForcings), intent(inout) :: this
    real(r8), parameter :: atm_topo = 5000._r8
    real(r8), parameter :: forc_lwrad = 100._r8
    ! Use a very big topo_diff in order to trigger the limit:
    real(r8), parameter :: topo_diff = 4000._r8
    real(r8), parameter :: longwave_downscaling_limit = 0.4_r8
    real(r8) :: expected(3)

    ! Setup
    ! The columns of interest are the first and third. However, note that they have 0
    ! weight, in order to avoid needing to take normalization into account. We construct
    ! the grid so that the normalization factor will be 1 by putting the 100% area column
    ! at the atmosphere's topographic height.
    call setup_landunit_ncols(ltype = 1, &
         ctypes = [0, 1, 2], cweights = [0.0_r8, 1.0_r8, 0.0_r8])
    call this%create_atm2lnd( &
         forc_topo = [atm_topo], &
         forc_lwrad = [forc_lwrad], &
         longwave_downscaling_limit = longwave_downscaling_limit)
    call this%create_topo(topo_col = [atm_topo - topo_diff, atm_topo, atm_topo + topo_diff])

    ! Exercise
    call this%call_downscale_forcings()

    ! Verify
    associate(lwrad_col => this%atm2lnd_inst%forc_lwrad_downscaled_col)
    expected(1) = forc_lwrad * (1._r8 + longwave_downscaling_limit)
    expected(2) = forc_lwrad
    expected(3) = forc_lwrad * (1._r8 - longwave_downscaling_limit)
    @assertEqual(expected, lwrad_col(bounds%begc:bounds%endc), tolerance=tol)
    end associate
  end subroutine lwrad_downscaling_limited

  ! ------------------------------------------------------------------------
  ! Tests with topo at atmosphere topo: downscaled forcing should be identical to
  ! atmospheric forcing
  ! ------------------------------------------------------------------------

  @Test
  subroutine topo_at_atmTopo_gives_identical_forc_t(this)
    class(TestDownscaleForcings), intent(inout) :: this
    real(r8), parameter :: topo = 17._r8
    real(r8), parameter :: forc_t = 301._r8

    ! Setup
    call setup_single_veg_patch(pft_type=1)
    call this%create_atm2lnd( &
         forc_topo = [topo], &
         forc_t = [forc_t])
    call this%create_topo(topo_col = [topo])

    ! Exercise
    call this%call_downscale_forcings()

    ! Verify
    @assertEqual(forc_t, this%atm2lnd_inst%forc_t_downscaled_col(begc))

  end subroutine topo_at_atmTopo_gives_identical_forc_t

  @Test
  subroutine topo_at_atmTopo_gives_identical_forc_th(this)
    class(TestDownscaleForcings), intent(inout) :: this
    real(r8), parameter :: topo = 17._r8
    real(r8), parameter :: forc_th = 302._r8

    ! Setup
    call setup_single_veg_patch(pft_type=1)
    call this%create_atm2lnd( &
         forc_topo = [topo], &
         forc_th = [forc_th])
    call this%create_topo(topo_col = [topo])

    ! Exercise
    call this%call_downscale_forcings()

    ! Verify
    @assertEqual(forc_th, this%atm2lnd_inst%forc_th_downscaled_col(begc))

  end subroutine topo_at_atmTopo_gives_identical_forc_th

  @Test
  subroutine topo_at_atmTopo_gives_identical_forc_q(this)
    class(TestDownscaleForcings), intent(inout) :: this
    real(r8), parameter :: topo = 17._r8
    real(r8), parameter :: forc_q = 0.01_r8

    ! Setup
    call setup_single_veg_patch(pft_type=1)
    call this%create_atm2lnd( &
         forc_topo = [topo], &
         forc_q = [forc_q])
    call this%create_topo(topo_col = [topo])

    ! Exercise
    call this%call_downscale_forcings()

    ! Verify
    @assertEqual(forc_q, this%wateratm2lndbulk_inst%forc_q_downscaled_col(begc))

  end subroutine topo_at_atmTopo_gives_identical_forc_q

  @Test
  subroutine topo_at_atmTopo_gives_identical_forc_pbot(this)
    class(TestDownscaleForcings), intent(inout) :: this
    real(r8), parameter :: topo = 17._r8
    real(r8), parameter :: forc_pbot = 100000._r8

    ! Setup
    call setup_single_veg_patch(pft_type=1)
    call this%create_atm2lnd( &
         forc_topo = [topo], &
         forc_pbot = [forc_pbot])
    call this%create_topo(topo_col = [topo])

    ! Exercise
    call this%call_downscale_forcings()

    ! Verify
    @assertEqual(forc_pbot, this%atm2lnd_inst%forc_pbot_downscaled_col(begc))

  end subroutine topo_at_atmTopo_gives_identical_forc_pbot

  @Test
  subroutine topo_at_atmTopo_gives_identical_forc_rho(this)
    class(TestDownscaleForcings), intent(inout) :: this
    real(r8), parameter :: topo = 17._r8
    real(r8), parameter :: forc_rho = 1.1_r8

    ! Setup
    call setup_single_veg_patch(pft_type=1)
    call this%create_atm2lnd( &
         forc_topo = [topo], &
         forc_rho = [forc_rho])
    call this%create_topo(topo_col = [topo])

    ! Exercise
    call this%call_downscale_forcings()

    ! Verify
    @assertEqual(forc_rho, this%atm2lnd_inst%forc_rho_downscaled_col(begc))

  end subroutine topo_at_atmTopo_gives_identical_forc_rho

  @Test
  subroutine topo_at_atmTopo_gives_identical_forc_lwrad(this)
    class(TestDownscaleForcings), intent(inout) :: this
    real(r8), parameter :: topo = 17._r8
    real(r8), parameter :: forc_lwrad = 101._r8

    ! Setup
    call setup_single_veg_patch(pft_type=1)
    call this%create_atm2lnd( &
         forc_topo = [topo], &
         forc_lwrad = [forc_lwrad])
    call this%create_topo(topo_col = [topo])

    ! Exercise
    call this%call_downscale_forcings()

    ! Verify
    @assertEqual(forc_lwrad, this%atm2lnd_inst%forc_lwrad_downscaled_col(begc))

  end subroutine topo_at_atmTopo_gives_identical_forc_lwrad

end module test_downscale_forcings
