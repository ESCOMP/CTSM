module test_partition_precip

  ! Tests of atm2lndMod: partition_precip

  use pfunit_mod
  use atm2lndMod
  use atm2lndType
  use shr_kind_mod, only : r8 => shr_kind_r8
  use unittestSubgridMod
  use unittestSimpleSubgridSetupsMod
  use unittestArrayMod
  use landunit_varcon, only : istice_mec
  use clm_varcon, only : hfus   ! latent heat of fusion for ice [J/kg]
  use clm_varcon, only : denh2o ! density of liquid water [kg/m3]
  use shr_const_mod, only : SHR_CONST_TKFRZ
  use Wateratm2lndBulkType, only : wateratm2lndbulk_type
  use WaterInfoBulkType, only : water_info_bulk_type

  implicit none

  @TestCase
  type, extends(TestCase) :: TestPartitionPrecip
     type(atm2lnd_type) :: atm2lnd_inst
     type(wateratm2lndbulk_type) :: wateratm2lndbulk_inst
     real(r8), allocatable :: sh_from_conversion(:)
   contains
     procedure :: setUp
     procedure :: tearDown
     procedure :: set_inputs
  end type TestPartitionPrecip

  real(r8), parameter :: tol = 1.e-13
  real(r8), parameter :: mm_to_m = 1.e-3_r8  ! multiply by this to convert from mm to m

  ! Temperatures in degrees C
  real(r8), parameter :: precip_repartition_glc_all_snow_t = -6._r8
  real(r8), parameter :: precip_repartition_glc_all_rain_t = -2._r8
  real(r8), parameter :: precip_repartition_nonglc_all_snow_t = 0._r8
  real(r8), parameter :: precip_repartition_nonglc_all_rain_t = 2._r8

contains

  subroutine setUp(this)
    class(TestPartitionPrecip), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestPartitionPrecip), intent(inout) :: this

    call this%atm2lnd_inst%Clean()
    call this%wateratm2lndbulk_inst%Clean()
    call unittest_subgrid_teardown()
  end subroutine tearDown

  subroutine set_inputs(this, rain, snow, temperature, repartition_rain_snow)
    ! set necessary input variables
    class(TestPartitionPrecip), intent(inout) :: this
    real(r8), intent(in) :: rain(:)
    real(r8), intent(in) :: snow(:)
    real(r8), intent(in) :: temperature(:)

    ! If not provided, set to true
    logical, intent(in), optional :: repartition_rain_snow

    logical :: l_repartition_rain_snow
    type(atm2lnd_params_type) :: atm2lnd_params

    if (present(repartition_rain_snow)) then
       l_repartition_rain_snow = repartition_rain_snow
    else
       l_repartition_rain_snow = .true.
    end if

    atm2lnd_params = atm2lnd_params_type( &
         repartition_rain_snow = l_repartition_rain_snow, &
         glcmec_downscale_longwave = .false., &
         lapse_rate = 0.01_r8, &  ! arbitrary (this is unused for these tests)
         precip_repartition_glc_all_snow_t = precip_repartition_glc_all_snow_t, &
         precip_repartition_glc_all_rain_t = precip_repartition_glc_all_rain_t, &
         precip_repartition_nonglc_all_snow_t = precip_repartition_nonglc_all_snow_t, &
         precip_repartition_nonglc_all_rain_t = precip_repartition_nonglc_all_rain_t)

    ! Allocate necessary variables
    call this%atm2lnd_inst%InitForTesting(bounds, atm2lnd_params)
    call this%wateratm2lndbulk_inst%InitForTesting(bounds,water_info_bulk_type())
    this%sh_from_conversion = col_array()

    ! set input variables
    this%wateratm2lndbulk_inst%forc_rain_not_downscaled_grc(bounds%begg:bounds%endg) = rain(:)
    this%wateratm2lndbulk_inst%forc_snow_not_downscaled_grc(bounds%begg:bounds%endg) = snow(:)
    this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc:bounds%endc) = temperature(:)
  end subroutine set_inputs

  @Test
  subroutine lowTemp_resultsInCorrectPartitioning(this)
    class(TestPartitionPrecip), intent(inout) :: this

    call setup_single_veg_patch(pft_type=1)
    call this%set_inputs(rain=[1._r8], snow=[2._r8], temperature=[270._r8])

    call partition_precip(bounds, this%atm2lnd_inst, this%wateratm2lndbulk_inst, this%sh_from_conversion)

    associate(&
         rain_col => this%wateratm2lndbulk_inst%forc_rain_downscaled_col, &
         snow_col => this%wateratm2lndbulk_inst%forc_snow_downscaled_col, &
         rain_to_snow_conversion_col => this%wateratm2lndbulk_inst%rain_to_snow_conversion_col, &
         snow_to_rain_conversion_col => this%wateratm2lndbulk_inst%snow_to_rain_conversion_col)
    @assertEqual(0._r8, rain_col(begc), tolerance=tol)
    @assertEqual(3._r8, snow_col(begc), tolerance=tol)
    @assertEqual(1._r8, rain_to_snow_conversion_col(begc), tolerance=tol)
    @assertEqual(0._r8, snow_to_rain_conversion_col(begc))
    end associate
  end subroutine lowTemp_resultsInCorrectPartitioning

  @Test
  subroutine highTemp_resultsInCorrectPartitioning(this)
    class(TestPartitionPrecip), intent(inout) :: this

    call setup_single_veg_patch(pft_type=1)
    call this%set_inputs(rain=[1._r8], snow=[2._r8], temperature=[276._r8])

    call partition_precip(bounds, this%atm2lnd_inst, this%wateratm2lndbulk_inst, this%sh_from_conversion)

    associate(&
         rain_col => this%wateratm2lndbulk_inst%forc_rain_downscaled_col, &
         snow_col => this%wateratm2lndbulk_inst%forc_snow_downscaled_col, &
         rain_to_snow_conversion_col => this%wateratm2lndbulk_inst%rain_to_snow_conversion_col, &
         snow_to_rain_conversion_col => this%wateratm2lndbulk_inst%snow_to_rain_conversion_col)
    @assertEqual(3._r8, rain_col(begc), tolerance=tol)
    @assertEqual(0._r8, snow_col(begc), tolerance=tol)
    @assertEqual(2._r8, snow_to_rain_conversion_col(begc), tolerance=tol)
    @assertEqual(0._r8, rain_to_snow_conversion_col(begc))
    end associate
  end subroutine highTemp_resultsInCorrectPartitioning

  @Test
  subroutine intermediateTemp_resultsInCorrectPartitioningAndHeatFlux(this)
    ! Unlike other tests, where we check for either correct partitioning or correct heat
    ! flux in a given test: This test checks both for convenience (to avoid duplication
    ! between two tests which would require us to update both of them if the ramp for
    ! rain-snow conversion changed).
    class(TestPartitionPrecip), intent(inout) :: this
    real(r8), parameter :: rain_orig = 1._r8
    real(r8), parameter :: snow_orig = 2._r8
    real(r8) :: tot_precip
    real(r8) :: expected_rain
    real(r8) :: expected_snow
    real(r8) :: expected_heat_flux

    call setup_single_veg_patch(pft_type=1)
    call this%set_inputs(rain=[rain_orig], snow=[snow_orig], temperature=[SHR_CONST_TKFRZ + 1.5_r8])

    call partition_precip(bounds, this%atm2lnd_inst, this%wateratm2lndbulk_inst, this%sh_from_conversion)

    associate(&
         rain_col => this%wateratm2lndbulk_inst%forc_rain_downscaled_col, &
         snow_col => this%wateratm2lndbulk_inst%forc_snow_downscaled_col, &
         rain_to_snow_conversion_col => this%wateratm2lndbulk_inst%rain_to_snow_conversion_col, &
         snow_to_rain_conversion_col => this%wateratm2lndbulk_inst%snow_to_rain_conversion_col)

    tot_precip = rain_orig + snow_orig
    expected_rain = tot_precip * 0.75_r8
    expected_snow = tot_precip * 0.25_r8
    @assertEqual(expected_rain, rain_col(begc), tolerance=tol)
    @assertEqual(expected_snow, snow_col(begc), tolerance=tol)
    @assertEqual((expected_rain - rain_orig), snow_to_rain_conversion_col(begc), tolerance=tol)
    @assertEqual(0._r8, rain_to_snow_conversion_col(begc))

    ! Snow to rain extracts energy, so results in a negative heat flux to atm
    expected_heat_flux = (rain_orig - expected_rain) * mm_to_m * denh2o * hfus
    @assertEqual([expected_heat_flux], this%sh_from_conversion, tolerance=tol)
    end associate
  end subroutine intermediateTemp_resultsInCorrectPartitioningAndHeatFlux

  @Test
  subroutine intermediateTemp_glacier_resultsInCorrectPartitioning(this)
    class(TestPartitionPrecip), intent(inout) :: this

    call unittest_subgrid_setup_start()
    call unittest_add_gridcell()
    call create_landunit_ncols(ltype = istice_mec, lweight = 1._r8, &
         ctypes = [1], cweights = [1._r8])
    call unittest_subgrid_setup_end()

    ! Choose a temperature 3/4 of the way from all-snow to all-rain
    call this%set_inputs(rain=[1._r8], snow=[2._r8], temperature=[SHR_CONST_TKFRZ - 3._r8])

    call partition_precip(bounds, this%atm2lnd_inst, this%wateratm2lndbulk_inst, this%sh_from_conversion)

    associate(&
         rain_col => this%wateratm2lndbulk_inst%forc_rain_downscaled_col, &
         snow_col => this%wateratm2lndbulk_inst%forc_snow_downscaled_col)
    @assertEqual(3._r8 * 0.75_r8, rain_col(begc), tolerance=tol)
    @assertEqual(3._r8 * 0.25_r8, snow_col(begc), tolerance=tol)
    ! Don't bother checking rain_to_snow_conversion_col and snow_to_rain_conversion_col
    ! here: we don't gain anything from this beyond what's already checked in
    ! intermediateTemp_resultsInCorrectPartitioningAndHeatFlux
    end associate
  end subroutine intermediateTemp_glacier_resultsInCorrectPartitioning

  @Test
  subroutine noConversion_resultsInNoHeatFlux(this)
    class(TestPartitionPrecip), intent(inout) :: this

    call setup_single_veg_patch(pft_type=1)
    call this%set_inputs(rain=[5._r8], snow=[0._r8], temperature=[290._r8])

    call partition_precip(bounds, this%atm2lnd_inst, this%wateratm2lndbulk_inst, this%sh_from_conversion)

    @assertEqual([0._r8], this%sh_from_conversion)
  end subroutine noConversion_resultsInNoHeatFlux

  @Test
  subroutine snowToRain_resultsInCorrectHeatFlux(this)
    class(TestPartitionPrecip), intent(inout) :: this
    real(r8), parameter :: snow_old = 3._r8  ! [mm]
    real(r8) :: expected

    call setup_single_veg_patch(pft_type=1)
    call this%set_inputs(rain=[2._r8], snow=[snow_old], temperature=[290._r8])

    call partition_precip(bounds, this%atm2lnd_inst, this%wateratm2lndbulk_inst, this%sh_from_conversion)

    ! Snow to rain extracts energy, so results in a negative heat flux to atm
    expected = -1._r8 * snow_old * mm_to_m * denh2o * hfus
    @assertEqual([expected], this%sh_from_conversion, tolerance=tol)
  end subroutine snowToRain_resultsInCorrectHeatFlux

  @Test
  subroutine rainToSnow_resultsInCorrectHeatFlux(this)
    class(TestPartitionPrecip), intent(inout) :: this
    real(r8), parameter :: rain_old = 2._r8  ! [mm]
    real(r8) :: expected

    call setup_single_veg_patch(pft_type=1)
    call this%set_inputs(rain=[rain_old], snow=[3._r8], temperature=[250._r8])

    call partition_precip(bounds, this%atm2lnd_inst, this%wateratm2lndbulk_inst, this%sh_from_conversion)

    ! Rain to snow releases energy, so results in a positive heat flux to atm
    expected = rain_old * mm_to_m * denh2o * hfus
    @assertEqual([expected], this%sh_from_conversion, tolerance=tol)
  end subroutine rainToSnow_resultsInCorrectHeatFlux

  @Test
  subroutine repartitionFlagFalse_resultsInNoChange(this)
    class(TestPartitionPrecip), intent(inout) :: this

    call setup_single_veg_patch(pft_type=1)
    call this%set_inputs(rain=[1._r8], snow=[2._r8], temperature=[250._r8], &
         repartition_rain_snow = .false.)

    call partition_precip(bounds, this%atm2lnd_inst, this%wateratm2lndbulk_inst, this%sh_from_conversion)

    associate(&
         rain_col => this%wateratm2lndbulk_inst%forc_rain_downscaled_col, &
         snow_col => this%wateratm2lndbulk_inst%forc_snow_downscaled_col, &
         rain_to_snow_conversion_col => this%wateratm2lndbulk_inst%rain_to_snow_conversion_col, &
         snow_to_rain_conversion_col => this%wateratm2lndbulk_inst%snow_to_rain_conversion_col)
    @assertEqual([1._r8], rain_col)
    @assertEqual([2._r8], snow_col)
    @assertEqual([0._r8], rain_to_snow_conversion_col)
    @assertEqual([0._r8], snow_to_rain_conversion_col)
    @assertEqual([0._r8], this%sh_from_conversion)
    end associate
  end subroutine repartitionFlagFalse_resultsInNoChange

  @Test
  subroutine multiPoint_resultsInCorrectPartitioning(this)
    class(TestPartitionPrecip), intent(inout) :: this
    real(r8), parameter :: rain(2)          = [1._r8,   3._r8]
    real(r8), parameter :: snow(2)          = [2._r8,   4._r8]
    real(r8), parameter :: temp(2)          = [290._r8, 250._r8]
    real(r8), parameter :: rain_expected(2) = [3._r8,   0._r8]
    real(r8), parameter :: snow_expected(2) = [0._r8,   7._r8]
    real(r8), parameter :: rain_to_snow_expected(2) = [0._r8, 3._r8]
    real(r8), parameter :: snow_to_rain_expected(2) = [2._r8, 0._r8]

    call setup_ncells_single_veg_patch(ncells=2, pft_type=1)
    call this%set_inputs(rain=rain, snow=snow, temperature=temp)

    call partition_precip(bounds, this%atm2lnd_inst, this%wateratm2lndbulk_inst, this%sh_from_conversion)

    associate(&
         rain_col => this%wateratm2lndbulk_inst%forc_rain_downscaled_col, &
         snow_col => this%wateratm2lndbulk_inst%forc_snow_downscaled_col, &
         rain_to_snow_conversion_col => this%wateratm2lndbulk_inst%rain_to_snow_conversion_col, &
         snow_to_rain_conversion_col => this%wateratm2lndbulk_inst%snow_to_rain_conversion_col)
    @assertEqual(rain_expected, rain_col, tolerance=tol)
    @assertEqual(snow_expected, snow_col, tolerance=tol)
    @assertEqual(rain_to_snow_expected, rain_to_snow_conversion_col, tolerance=tol)
    @assertEqual(snow_to_rain_expected, snow_to_rain_conversion_col, tolerance=tol)
    end associate

  end subroutine multiPoint_resultsInCorrectPartitioning

  @Test
  subroutine multiPoint_resultsInCorrectHeatFlux(this)
    class(TestPartitionPrecip), intent(inout) :: this
    real(r8), parameter :: rain(2)          = [1._r8,   3._r8]
    real(r8), parameter :: snow(2)          = [2._r8,   4._r8]
    real(r8), parameter :: temp(2)          = [290._r8, 250._r8]
    real(r8) :: sens_heat_expected(2)

    call setup_ncells_single_veg_patch(ncells=2, pft_type=1)
    call this%set_inputs(rain=rain, snow=snow, temperature=temp)

    call partition_precip(bounds, this%atm2lnd_inst, this%wateratm2lndbulk_inst, this%sh_from_conversion)

    ! grid cell 1: converts snow to rain
    sens_heat_expected(1) = -1._r8 * snow(1) * mm_to_m * denh2o * hfus
    ! grid cell 2: converts rain to snow
    sens_heat_expected(2) = rain(2) * mm_to_m * denh2o * hfus

    @assertEqual(sens_heat_expected, this%sh_from_conversion, tolerance=tol)

  end subroutine multiPoint_resultsInCorrectHeatFlux

end module test_partition_precip
