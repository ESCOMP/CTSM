module test_filter_col

  ! Tests of filterColMod

  use pfunit_mod
  use filterColMod
  use shr_kind_mod , only : r8 => shr_kind_r8
  use unittestSubgridMod
  use unittestSimpleSubgridSetupsMod
  use unittestArrayMod
  use ColumnType, only : col
  use landunit_varcon, only : istsoil

  implicit none

  @TestCase
  type, extends(TestCase) :: TestFilterCol
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestFilterCol

  real(r8), parameter :: tol = 1.e-13_r8

contains

  subroutine setUp(this)
    class(TestFilterCol), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestFilterCol), intent(inout) :: this

    call unittest_subgrid_teardown()
  end subroutine tearDown

  ! ------------------------------------------------------------------------
  ! Tests of equals method
  ! ------------------------------------------------------------------------

  @Test
  subroutine equals_true(this)
    class(TestFilterCol), intent(inout) :: this
    type(filter_col_type) :: filter1, filter2
    
    call setup_ncells_single_veg_patch(ncells = 4, pft_type = 1)
    filter1 = col_filter_from_index_array(bounds, [bounds%begc, bounds%begc+2])
    filter2 = col_filter_from_index_array(bounds, [bounds%begc, bounds%begc+2])

    @assertTrue(filter1 == filter2)

  end subroutine equals_true

  @Test
  subroutine equals_different_size(this)
    class(TestFilterCol), intent(inout) :: this
    type(filter_col_type) :: filter1, filter2
    
    call setup_ncells_single_veg_patch(ncells = 4, pft_type = 1)
    filter1 = col_filter_from_index_array(bounds, [bounds%begc, bounds%begc+2])
    filter2 = col_filter_from_index_array(bounds, [bounds%begc])

    @assertFalse(filter1 == filter2)

  end subroutine equals_different_size

  @Test
  subroutine equals_different_points(this)
    class(TestFilterCol), intent(inout) :: this
    type(filter_col_type) :: filter1, filter2
    
    call setup_ncells_single_veg_patch(ncells = 4, pft_type = 1)
    filter1 = col_filter_from_index_array(bounds, [bounds%begc, bounds%begc+2])
    filter2 = col_filter_from_index_array(bounds, [bounds%begc, bounds%begc+1])

    @assertFalse(filter1 == filter2)
  end subroutine equals_different_points

  ! ------------------------------------------------------------------------
  ! Tests of col_filter_from_logical_array
  ! ------------------------------------------------------------------------

  @Test
  subroutine logicalArray_true(this)
    ! Test col_filter_from_logical_array with logical true
    class(TestFilterCol), intent(inout) :: this
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected
    logical, parameter :: logical_col(1) = [.true.]

    call setup_single_veg_patch(pft_type = 1)
    expected = col_filter_from_index_array(bounds, [ci])

    filter = col_filter_from_logical_array(bounds, logical_col)

    @assertTrue(filter == expected)
  end subroutine logicalArray_true

  @Test
  subroutine logicalArray_false(this)
    ! Test col_filter_from_logical_array with logical false
    class(TestFilterCol), intent(inout) :: this
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected
    logical, parameter :: logical_col(1) = [.false.]

    call setup_single_veg_patch(pft_type = 1)
    expected = col_filter_empty(bounds)

    filter = col_filter_from_logical_array(bounds, logical_col)

    @assertTrue(filter == expected)
  end subroutine logicalArray_false

  @Test
  subroutine logicalArray_includes_inactive(this)
    ! Test col_filter_from_logical_array with an inactive point: this function should
    ! ignore the 'active' status of each column
    class(TestFilterCol), intent(inout) :: this
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected
    logical, parameter :: logical_col(1) = [.true.]

    call setup_single_veg_patch(pft_type = 1)
    expected = col_filter_from_index_array(bounds, [ci])
    col%active(ci) = .false.

    filter = col_filter_from_logical_array(bounds, logical_col)

    @assertTrue(filter == expected)
  end subroutine logicalArray_includes_inactive

  @Test
  subroutine logicalArray_multiple_points(this)
    ! Test col_filter_from_logical_array with multiple points, some in and some out of
    ! the filter
    class(TestFilterCol), intent(inout) :: this
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected
    logical, parameter :: logical_col(4) = [.true., .false., .true., .false.]

    call setup_ncells_single_veg_patch(ncells = 4, pft_type = 1)
    expected = col_filter_from_index_array(bounds, [bounds%begc, bounds%begc+2])

    filter = col_filter_from_logical_array(bounds, logical_col)

    @assertTrue(filter == expected)
  end subroutine logicalArray_multiple_points

  ! ------------------------------------------------------------------------
  ! Tests of col_filter_from_logical_array_active_only
  ! ------------------------------------------------------------------------

  @Test
  subroutine logicalArrayActiveOnly_multiple_points(this)
    ! Test col_filter_from_logical_array_active_only with multiple points, some in and
    ! some out of the filter (either because the logical array is false or because
    ! 'active' is false
    class(TestFilterCol), intent(inout) :: this
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected
    logical, parameter :: logical_col(3) = [.true.,  .true., .false.]
    logical, parameter :: active_col(3)  = [.false., .true., .true.]

    call setup_ncells_single_veg_patch(ncells = 3, pft_type = 1)
    col%active(bounds%begc:bounds%endc) = active_col(:)
    expected = col_filter_from_index_array(bounds, [bounds%begc+1])

    filter = col_filter_from_logical_array_active_only(bounds, logical_col)

    @assertTrue(filter == expected)
  end subroutine logicalArrayActiveOnly_multiple_points

  ! ------------------------------------------------------------------------
  ! Tests of col_filter_from_ltypes
  ! ------------------------------------------------------------------------

  @Test
  subroutine ltypes_multipleTargetLandunits(this)
    ! Tests col_filter_from_ltypes with multiple target landunits and multiple landunits
    ! present on a gridcell - some of which are in the list of target landunits and some
    ! of which are not.
    class(TestFilterCol), intent(inout) :: this
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected
    integer, allocatable :: expected_indices(:)
    integer, parameter :: target_ltype1 = 2
    integer, parameter :: target_ltype2 = 3

    call unittest_subgrid_setup_start()
    call unittest_add_gridcell()
    call my_add_landunit(target_ltype1 - 1)
    call my_add_landunit(target_ltype1)
    expected_indices = [ci - 1, ci]
    call my_add_landunit(target_ltype2)
    expected_indices = [expected_indices, ci - 1, ci]
    call my_add_landunit(target_ltype2 + 1)
    call unittest_subgrid_setup_end()
    expected = col_filter_from_index_array(bounds, expected_indices)

    filter = col_filter_from_ltypes(bounds = bounds, &
         ltypes = [target_ltype1, target_ltype2], &
         include_inactive = .false.)

    @assertTrue(filter == expected)

  contains
    subroutine my_add_landunit(ltype)
      integer, intent(in) :: ltype

      call create_landunit_ncols(ltype = ltype, lweight = 0.25_r8, &
           ctypes = [1, 2], cweights = [0.5_r8, 0.5_r8])
    end subroutine my_add_landunit

  end subroutine ltypes_multipleTargetLandunits

  @Test
  subroutine ltypes_excludes_inactive(this)
    class(TestFilterCol), intent(inout) :: this
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected

    call setup_single_veg_patch(pft_type = 1)
    col%active(bounds%begc) = .false.
    expected = col_filter_empty(bounds)

    filter = col_filter_from_ltypes(bounds = bounds, &
         ltypes = [istsoil], &
         include_inactive = .false.)

    @assertTrue(filter == expected)
  end subroutine ltypes_excludes_inactive

  ! ------------------------------------------------------------------------
  ! Tests of col_filter_from_lunflags
  ! ------------------------------------------------------------------------

  @Test
  subroutine lunflags_multipleLandunits(this)
    ! Multiple landunits, with two columns on each: some landunits have flag true, some
    ! have flag false
    class(TestFilterCol), intent(inout) :: this
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected
    integer, allocatable :: expected_indices(:)
    logical :: lunflags(3)

    call unittest_subgrid_setup_start()
    call unittest_add_gridcell()
    call create_landunit_ncols(ltype = 1, lweight = 0.25_r8, &
         ctypes = [1, 2], cweights = [0.5_8, 0.5_r8])
    call create_landunit_ncols(ltype = 2, lweight = 0.25_r8, &
         ctypes = [1, 2], cweights = [0.5_8, 0.5_r8])
    call create_landunit_ncols(ltype = 3, lweight = 0.5_r8, &
         ctypes = [1, 2], cweights = [0.5_8, 0.5_r8])
    call unittest_subgrid_setup_end()

    lunflags = [.false., .true., .false.]
    expected_indices = [begc + 2, begc + 3]
    expected = col_filter_from_index_array(bounds, expected_indices)

    filter = col_filter_from_lunflags(bounds = bounds, &
         lunflags = lunflags, &
         include_inactive = .false.)

    @assertTrue(filter == expected)
  end subroutine lunflags_multipleLandunits

  @Test
  subroutine lunflags_excludes_inactive(this)
    class(TestFilterCol), intent(inout) :: this
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected

    call setup_single_veg_patch(pft_type = 1)
    col%active(bounds%begc) = .false.
    expected = col_filter_empty(bounds)

    filter = col_filter_from_lunflags(bounds = bounds, &
         lunflags = [.true.], &
         include_inactive = .false.)

    @assertTrue(filter == expected)
  end subroutine lunflags_excludes_inactive

  ! ------------------------------------------------------------------------
  ! Tests of col_filter_from_grcflags_ltypes
  ! ------------------------------------------------------------------------

  @Test
  subroutine grcflagsLtypes_includes_point(this)
    ! Basic test of col_filter_from_grcflags_ltypes, with an included point
    class(TestFilterCol), intent(inout) :: this
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected

    call setup_single_veg_patch(pft_type = 1)
    expected = col_filter_from_index_array(bounds, [bounds%begc])

    filter = col_filter_from_grcflags_ltypes(bounds = bounds, &
         grcflags = grc_array(.true.), ltypes = [istsoil], &
         include_inactive = .false.)

    @assertTrue(filter == expected)
  end subroutine grcflagsLtypes_includes_point

  @Test
  subroutine grcflagsLtypes_excludes_inactive(this)
    class(TestFilterCol), intent(inout) :: this
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected

    call setup_single_veg_patch(pft_type = 1)
    col%active(bounds%begc) = .false.
    expected = col_filter_empty(bounds)

    filter = col_filter_from_grcflags_ltypes(bounds = bounds, &
         grcflags = grc_array(.true.), ltypes = [istsoil], &
         include_inactive = .false.)

    @assertTrue(filter == expected)
  end subroutine grcflagsLtypes_excludes_inactive

  @Test
  subroutine grcflagsLtypes_includeInactive_includes_inactive(this)
    class(TestFilterCol), intent(inout) :: this
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected

    call setup_single_veg_patch(pft_type = 1)
    col%active(bounds%begc) = .false.
    expected = col_filter_from_index_array(bounds, [bounds%begc])

    filter = col_filter_from_grcflags_ltypes(bounds = bounds, &
         grcflags = grc_array(.true.), ltypes = [istsoil], &
         include_inactive = .true.)

    @assertTrue(filter == expected)
  end subroutine grcflagsLtypes_includeInactive_includes_inactive


  @Test
  subroutine grcflagsLtypes_multipleGridcells(this)
    ! Test col_filter_from_grcflags_ltypes with multiple grid cells, some with flag true
    ! and some with flag false
    class(TestFilterCol), intent(inout) :: this
    integer, parameter :: target_ltype = 3
    logical, parameter :: grcflags(3) = [.false., .true., .false.]
    integer, allocatable :: expected_indices(:)
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected

    call unittest_subgrid_setup_start()
    call my_add_gridcell()
    call my_add_gridcell()
    expected_indices = [ci - 1, ci]
    call my_add_gridcell()
    call unittest_subgrid_setup_end()
    expected = col_filter_from_index_array(bounds, expected_indices)

    filter = col_filter_from_grcflags_ltypes(bounds = bounds, &
         grcflags = grcflags, ltypes = [target_ltype], &
         include_inactive = .false.)

    @assertTrue(filter == expected)
  contains
    subroutine my_add_gridcell
      call unittest_add_gridcell()
      call create_landunit_ncols(ltype = target_ltype, lweight = 1._r8, &
           ctypes = [1, 2], cweights = [0.5_r8, 0.5_r8])
    end subroutine my_add_gridcell

  end subroutine grcflagsLtypes_multipleGridcells

  @Test
  subroutine grcflagsLtypes_multipleLandunits(this)
    ! Test col_filter_from_grcflags_ltypes with multiple landunits, some in the landunit
    ! type array and some not
    class(TestFilterCol), intent(inout) :: this
    integer, parameter :: target_ltype1 = 2
    integer, parameter :: target_ltype2 = 3
    logical, parameter :: grcflags(1) = [.true.]
    integer, allocatable :: expected_indices(:)
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected

    call unittest_subgrid_setup_start()
    call unittest_add_gridcell()
    call my_add_landunit(target_ltype1 - 1)
    call my_add_landunit(target_ltype1)
    expected_indices = [ci - 1, ci]
    call my_add_landunit(target_ltype2)
    expected_indices = [expected_indices, ci - 1, ci]
    call my_add_landunit(target_ltype2 + 1)
    call unittest_subgrid_setup_end()
    expected = col_filter_from_index_array(bounds, expected_indices)

    filter = col_filter_from_grcflags_ltypes(bounds = bounds, &
         grcflags = grcflags, ltypes = [target_ltype1, target_ltype2], &
         include_inactive = .false.)

    @assertTrue(filter == expected)
    
  contains
    subroutine my_add_landunit(ltype)
      integer, intent(in) :: ltype

      call create_landunit_ncols(ltype = ltype, lweight = 0.25_r8, &
           ctypes = [1, 2], cweights = [0.5_r8, 0.5_r8])
    end subroutine my_add_landunit

  end subroutine grcflagsLtypes_multipleLandunits

  @Test
  subroutine grcflagsLtypes_ltypeNotPresent(this)
    ! Test col_filter_from_grcflags_ltypes with a landunit type not present. It should
    ! skip over that absent landunit type, but still include the present landunit type
    ! that comes later.
    class(TestFilterCol), intent(inout) :: this
    integer, parameter :: target_ltype_not_present = 1
    integer, parameter :: target_ltype_present = 2
    logical, parameter :: grcflags(1) = [.true.]
    integer, allocatable :: expected_indices(:)
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected

    call unittest_subgrid_setup_start()
    call unittest_add_gridcell()
    call create_landunit_ncols(ltype = target_ltype_present, lweight = 1._r8, &
         ctypes = [1, 2], cweights = [0.5_r8, 0.5_r8])
    expected_indices = [ci - 1, ci]
    call unittest_subgrid_setup_end()
    expected = col_filter_from_index_array(bounds, expected_indices)

    filter = col_filter_from_grcflags_ltypes(bounds = bounds, &
         grcflags = grcflags, ltypes = [target_ltype_not_present, target_ltype_present], &
         include_inactive = .false.)

    @assertTrue(filter == expected)
  end subroutine grcflagsLtypes_ltypeNotPresent

  ! ------------------------------------------------------------------------
  ! Tests of col_filter_from_filter_and_logical_array
  ! ------------------------------------------------------------------------

  @Test
  subroutine filterAndLogicalArray_multiple_points(this)
    ! Test col_filter_from_filter_and_logical_array with multiple points, with various
    ! combinations of inside and outside the filter, and inside and outside the logical
    ! array
    class(TestFilterCol), intent(inout) :: this

    ! Final filter should be set where both of the following are true:
    logical, parameter :: logical_orig(6) = [.false., .true.,  .false., .true., .false., .true.]
    logical, parameter :: logical_new (6) = [.false., .false., .false., .true., .true.,  .true.]

    type(filter_col_type) :: filter_orig
    type(filter_col_type) :: filter_new
    type(filter_col_type) :: expected

    call setup_ncells_single_veg_patch(ncells = 6, pft_type = 1)
    filter_orig = col_filter_from_logical_array(bounds, logical_orig)
    expected = col_filter_from_index_array(bounds, [bounds%begc+3, bounds%begc+5])

    filter_new = col_filter_from_filter_and_logical_array(&
         bounds = bounds, &
         num_orig = filter_orig%num, &
         filter_orig = filter_orig%indices, &
         logical_col = logical_new)

    @assertTrue(filter_new == expected)
  end subroutine filterAndLogicalArray_multiple_points

end module test_filter_col
