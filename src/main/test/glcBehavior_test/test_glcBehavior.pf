module test_glcBehavior

  ! Tests of glcBehaviorMod

  use pfunit_mod
  use glcBehaviorMod
  use shr_kind_mod , only : r8 => shr_kind_r8
  use unittestSubgridMod
  use unittestSimpleSubgridSetupsMod
  use unittestArrayMod
  use column_varcon, only : col_itype_to_icemec_class, icemec_class_to_col_itype
  use landunit_varcon, only : istice_mec
  use glcBehaviorMod, only : glc_behavior_type
  use ColumnType, only : col
  use unittestGlcMec

  implicit none

  @TestCase
  type, extends(TestCase) :: TestGlcBehavior
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestGlcBehavior

  real(r8), parameter :: tol = 1.e-13_r8

contains

  subroutine setUp(this)
    class(TestGlcBehavior), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestGlcBehavior), intent(inout) :: this

    call unittest_subgrid_teardown()
    call teardown_elevation_classes()
  end subroutine tearDown

  function create_glc_behavior_all_collapse() result(glc_behavior)
    ! Create a glc_behavior object where all grid cells get collapsed to a single column
    type(glc_behavior_type) :: glc_behavior

    call glc_behavior%InitSetDirectly(bounds%begg, bounds%endg, &
         has_virtual_columns = grc_array(.false.), &
         collapse_to_atm_topo = grc_array(.true.))
  end function create_glc_behavior_all_collapse

  ! ------------------------------------------------------------------------
  ! Tests of setup / initialization
  ! ------------------------------------------------------------------------

  @Test
  subroutine init_multiple_behaviorIsCorrect(this)
    ! Make sure behavior is correct for 'multiple'
    class(TestGlcBehavior), intent(inout) :: this
    type(glc_behavior_type) :: glc_behavior

    call setup_single_veg_patch(0)

    call glc_behavior%InitFromInputs(bounds%begg, bounds%endg, &
         glacier_region_map = [0], &
         glacier_region_behavior_str = ['multiple'], &
         glacier_region_melt_behavior_str = ['replaced_by_ice'], &
         glacier_region_ice_runoff_behavior_str = ['remains_ice'])

    @assertFalse(glc_behavior%has_virtual_columns_grc(bounds%begg))
    @assertFalse(glc_behavior%get_collapse_to_atm_topo(bounds%begg))
    @assertTrue(glc_behavior%allow_multiple_columns_grc(bounds%begg))
  end subroutine init_multiple_behaviorIsCorrect

  @Test
  subroutine init_virtual_behaviorIsCorrect(this)
    ! Make sure behavior is correct for 'virtual'
    class(TestGlcBehavior), intent(inout) :: this
    type(glc_behavior_type) :: glc_behavior

    call setup_single_veg_patch(0)

    call glc_behavior%InitFromInputs(bounds%begg, bounds%endg, &
         glacier_region_map = [0], &
         glacier_region_behavior_str = ['virtual'], &
         glacier_region_melt_behavior_str = ['replaced_by_ice'], &
         glacier_region_ice_runoff_behavior_str = ['remains_ice'])

    @assertTrue(glc_behavior%has_virtual_columns_grc(bounds%begg))
    @assertFalse(glc_behavior%get_collapse_to_atm_topo(bounds%begg))
    @assertTrue(glc_behavior%allow_multiple_columns_grc(bounds%begg))
  end subroutine init_virtual_behaviorIsCorrect

  @Test
  subroutine init_single_behaviorIsCorrect(this)
    ! Make sure behavior is correct for 'single_at_atm_topo'
    class(TestGlcBehavior), intent(inout) :: this
    type(glc_behavior_type) :: glc_behavior

    call setup_single_veg_patch(0)

    call glc_behavior%InitFromInputs(bounds%begg, bounds%endg, &
         glacier_region_map = [0], &
         glacier_region_behavior_str = ['single_at_atm_topo'], &
         glacier_region_melt_behavior_str = ['replaced_by_ice'], &
         glacier_region_ice_runoff_behavior_str = ['remains_ice'])

    @assertFalse(glc_behavior%has_virtual_columns_grc(bounds%begg))
    @assertTrue(glc_behavior%get_collapse_to_atm_topo(bounds%begg))
    @assertFalse(glc_behavior%allow_multiple_columns_grc(bounds%begg))
  end subroutine init_single_behaviorIsCorrect

  @Test
  subroutine init_replaced_behaviorIsCorrect(this)
    ! Make sure melt behavior is correct for 'replaced_by_ice'
    class(TestGlcBehavior), intent(inout) :: this
    type(glc_behavior_type) :: glc_behavior

    call setup_single_veg_patch(0)

    call glc_behavior%InitFromInputs(bounds%begg, bounds%endg, &
         glacier_region_map = [0], &
         glacier_region_behavior_str = ['single_at_atm_topo'], &
         glacier_region_melt_behavior_str = ['replaced_by_ice'], &
         glacier_region_ice_runoff_behavior_str = ['remains_ice'])

    @assertTrue(glc_behavior%melt_replaced_by_ice_grc(bounds%begg))
  end subroutine init_replaced_behaviorIsCorrect

  @Test
  subroutine init_remains_behaviorIsCorrect(this)
    ! Make sure melt behavior is correct for 'remains_in_place'
    class(TestGlcBehavior), intent(inout) :: this
    type(glc_behavior_type) :: glc_behavior

    call setup_single_veg_patch(0)

    call glc_behavior%InitFromInputs(bounds%begg, bounds%endg, &
         glacier_region_map = [0], &
         glacier_region_behavior_str = ['single_at_atm_topo'], &
         glacier_region_melt_behavior_str = ['remains_in_place'], &
         glacier_region_ice_runoff_behavior_str = ['remains_ice'])

    @assertFalse(glc_behavior%melt_replaced_by_ice_grc(bounds%begg))
  end subroutine init_remains_behaviorIsCorrect

  @Test
  subroutine init_remainsIce_behaviorIsCorrect(this)
    ! Make sure ice runoff behavior is correct for 'remains_ice'
    class(TestGlcBehavior), intent(inout) :: this
    type(glc_behavior_type) :: glc_behavior

    call setup_single_veg_patch(0)

    call glc_behavior%InitFromInputs(bounds%begg, bounds%endg, &
         glacier_region_map = [0], &
         glacier_region_behavior_str = ['single_at_atm_topo'], &
         glacier_region_melt_behavior_str = ['replaced_by_ice'], &
         glacier_region_ice_runoff_behavior_str = ['remains_ice'])

    @assertFalse(glc_behavior%ice_runoff_melted_grc(bounds%begg))
  end subroutine init_remainsIce_behaviorIsCorrect

  @Test
  subroutine init_melted_behaviorIsCorrect(this)
    ! Make sure ice runoff behavior is correct for 'melted'
    class(TestGlcBehavior), intent(inout) :: this
    type(glc_behavior_type) :: glc_behavior

    call setup_single_veg_patch(0)

    call glc_behavior%InitFromInputs(bounds%begg, bounds%endg, &
         glacier_region_map = [0], &
         glacier_region_behavior_str = ['single_at_atm_topo'], &
         glacier_region_melt_behavior_str = ['replaced_by_ice'], &
         glacier_region_ice_runoff_behavior_str = ['melted'])

    @assertTrue(glc_behavior%ice_runoff_melted_grc(bounds%begg))
  end subroutine init_melted_behaviorIsCorrect

  @Test
  subroutine init_multipleGridCells(this)
    class(TestGlcBehavior), intent(inout) :: this
    type(glc_behavior_type) :: glc_behavior

    call setup_ncells_single_veg_patch(ncells = 3, pft_type = 0)

    call glc_behavior%InitFromInputs(bounds%begg, bounds%endg, &
         glacier_region_map = [0, 1, 0], &
         glacier_region_behavior_str = ['multiple', 'virtual '], &
         glacier_region_melt_behavior_str = ['replaced_by_ice ', 'remains_in_place'], &
         glacier_region_ice_runoff_behavior_str = ['remains_ice', 'melted     '])

    @assertFalse(glc_behavior%has_virtual_columns_grc(bounds%begg))
    @assertTrue(glc_behavior%has_virtual_columns_grc(bounds%begg + 1))
    @assertFalse(glc_behavior%has_virtual_columns_grc(bounds%begg + 2))

    @assertTrue(glc_behavior%melt_replaced_by_ice_grc(bounds%begg))
    @assertFalse(glc_behavior%melt_replaced_by_ice_grc(bounds%begg + 1))
    @assertTrue(glc_behavior%melt_replaced_by_ice_grc(bounds%begg + 2))

    @assertFalse(glc_behavior%ice_runoff_melted_grc(bounds%begg))
    @assertTrue(glc_behavior%ice_runoff_melted_grc(bounds%begg + 1))
    @assertFalse(glc_behavior%ice_runoff_melted_grc(bounds%begg + 2))
  end subroutine init_multipleGridCells

  ! ------------------------------------------------------------------------
  ! Tests of update_glc_classes
  ! ------------------------------------------------------------------------

  @Test
  subroutine update_glc_classes_basic(this)
    class(TestGlcBehavior), intent(inout) :: this
    type(glc_behavior_type) :: glc_behavior
    integer, parameter :: glc_nec = 3
    real(r8), parameter :: topomax(0:glc_nec) = [0._r8, 10._r8, 20._r8, 30._r8]
    real(r8), parameter :: new_topo = 15._r8
    integer, parameter :: new_elev_class = 2
    real(r8), allocatable :: topo_col(:)

    call setup_elevation_classes(glc_nec, topomax)
    call setup_single_icemec_column(elev_class = 1)
    glc_behavior = create_glc_behavior_all_collapse()
    col%type_is_dynamic(:) = .true.

    topo_col = col_array(new_topo)
    call glc_behavior%update_glc_classes(bounds, topo_col)

    @assertEqual(new_elev_class, col_itype_to_icemec_class(col%itype(bounds%begc)))
  end subroutine update_glc_classes_basic

  @Test
  subroutine update_glc_classes_non_icemec(this)
    ! A column that is not ice_mec should remain unchanged
    class(TestGlcBehavior), intent(inout) :: this
    type(glc_behavior_type) :: glc_behavior
    real(r8), parameter :: new_topo = 15._r8
    integer :: coltype_orig
    real(r8), allocatable :: topo_col(:)

    call setup_elevation_classes(3, [0._r8, 1._r8, 2._r8, 3._r8])
    call setup_single_veg_patch(pft_type=1)
    glc_behavior = create_glc_behavior_all_collapse()
    coltype_orig = col%itype(bounds%begc)

    topo_col = col_array(new_topo)
    call glc_behavior%update_glc_classes(bounds, topo_col)

    @assertEqual(coltype_orig, col%itype(bounds%begc))
  end subroutine update_glc_classes_non_icemec

  @Test
  subroutine have_dynamic_type(this)
    ! Tests cols_have_dynamic_type_array and patches_have_dynamic_type_array
    class(TestGlcBehavior), intent(inout) :: this
    type(glc_behavior_type) :: glc_behavior
    logical, allocatable :: has_dynamic_type_col(:)
    logical, allocatable :: has_dynamic_type_patch(:)
    logical, allocatable :: has_dynamic_type_col_expected(:)
    logical, allocatable :: has_dynamic_type_patch_expected(:)

    ! Setup

    call setup_elevation_classes(3, [0._r8, 1._r8, 2._r8, 3._r8])

    ! Create 3 grid cells, all with one landunit of type istice_mec. The first and third
    ! will have multiple elevation classes; the second will have a single elevation class
    ! at the atmosphere's topographic height. All columns have 2 patches (which is not
    ! typical for istice_mec, but tests the code better).
    call unittest_subgrid_setup_start()
    call unittest_add_gridcell()
    call create_landunit_ncols(ltype = istice_mec, lweight = 1._r8, &
         ctypes = [icemec_class_to_col_itype(1), icemec_class_to_col_itype(2)], &
         cweights = [0.5_r8, 0.5_r8], &
         npatches = 2)
    call unittest_add_gridcell()
    call create_landunit_ncols(ltype = istice_mec, lweight = 1._r8, &
         ctypes = [icemec_class_to_col_itype(2)], &
         cweights = [1._r8], &
         npatches = 2)
    call unittest_add_gridcell()
    call create_landunit_ncols(ltype = istice_mec, lweight = 1._r8, &
         ctypes = [icemec_class_to_col_itype(1), icemec_class_to_col_itype(2)], &
         cweights = [0.5_r8, 0.5_r8], &
         npatches = 2)
    call unittest_subgrid_setup_end()

    call glc_behavior%InitFromInputs(bounds%begg, bounds%endg, &
         glacier_region_map = [0, 1, 0], &
         glacier_region_behavior_str = ['multiple          ', 'single_at_atm_topo'], &
         glacier_region_melt_behavior_str = ['remains_in_place', 'remains_in_place'], &
         glacier_region_ice_runoff_behavior_str = ['remains_ice', 'remains_ice'])

    ! Exercise

    has_dynamic_type_col = col_array(.false.)
    has_dynamic_type_patch = patch_array(.false.)
    call glc_behavior%cols_have_dynamic_type_array(bounds%begc, bounds%endc, &
         has_dynamic_type_col)
    call glc_behavior%patches_have_dynamic_type_array(bounds%begp, bounds%endp, &
         has_dynamic_type_patch)

    ! Verify

    has_dynamic_type_col_expected = col_array(.false.)
    has_dynamic_type_patch_expected = patch_array(.false.)
    has_dynamic_type_col_expected = [ &
         .false., .false., &
         .true., &
         .false., .false.]
    has_dynamic_type_patch_expected = [ &
         .false., .false., .false., .false., &
         .true., .true., &
         .false., .false., .false., .false.]

    @assertEqual(logical_array_to_int(has_dynamic_type_col_expected), logical_array_to_int(has_dynamic_type_col))
    @assertEqual(logical_array_to_int(has_dynamic_type_patch_expected), logical_array_to_int(has_dynamic_type_patch))
  end subroutine have_dynamic_type

end module test_glcBehavior
