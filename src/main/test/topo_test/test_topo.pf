module test_topo

  ! Tests of TopoMod

  use pfunit_mod
  use TopoMod
  use shr_kind_mod , only : r8 => shr_kind_r8
  use unittestGlcMec
  use unittestSubgridMod
  use unittestSimpleSubgridSetupsMod
  use unittestArrayMod
  use filterColMod
  use clm_instur, only : topo_glc_mec
  use clm_varpar, only : maxpatch_glcmec
  use clm_varctl, only : glc_do_dynglacier
  use landunit_varcon, only : istice_mec
  use glc2lndMod, only : glc2lnd_type
  use glcBehaviorMod, only : glc_behavior_type
  use unittestFilterBuilderMod
  use ColumnType, only : col
  use column_varcon, only : col_itype_to_icemec_class
  use domainMod, only : ldomain

  implicit none

  @TestCase
  type, extends(TestCase) :: TestTopo
     logical :: topo_glc_mec_allocated = .false.
     logical :: glc2lnd_allocated = .false.
     logical :: ldomain_frac_allocated = .false.
     
     ! These are in TestTopo so they can be cleaned
     type(glc2lnd_type) :: glc2lnd_inst
     type(topo_type) :: topo
   contains
     procedure :: setUp
     procedure :: tearDown
     procedure :: setup_glc_mec
     procedure :: init_glc2lnd
     procedure :: do_UpdateTopo  ! wrap the call to this%topo%UpdateTopo
  end type TestTopo

  real(r8), parameter :: tol = 1.e-13_r8

contains

  ! ========================================================================
  ! Helper routines
  ! ========================================================================

  subroutine setUp(this)
    class(TestTopo), intent(inout) :: this

    glc_do_dynglacier = .true.
    call this%setup_glc_mec()
  end subroutine setUp

  subroutine tearDown(this)
    class(TestTopo), intent(inout) :: this

    call unittest_subgrid_teardown()
    if (this%ldomain_frac_allocated) then
       deallocate(ldomain%frac)
    end if
    call teardown_elevation_classes()
    call this%topo%Clean()
    if (this%topo_glc_mec_allocated) then
       deallocate(topo_glc_mec)
       this%topo_glc_mec_allocated = .false.
    end if
    if (this%glc2lnd_allocated) then
       call this%glc2lnd_inst%Clean()
       this%glc2lnd_allocated = .false.
    end if
  end subroutine tearDown

  subroutine setup_glc_mec(this)
    ! Does some initial setup needed to run the tests here with glc_mec.
    !
    ! Creates 3 elevation classes, with boundaries every 10 m.
    ! 
    ! Sets topo_glc_mec (which is typically on the surface dataset) such that it is at
    ! the midpoint of each elevation class for every gridcell.
    class(TestTopo), intent(inout) :: this

    integer, parameter :: glc_nec = 3
    real(r8), parameter :: topomax(0:glc_nec) = [0._r8, 10._r8, 20._r8, 30._r8]

    integer :: ec
    real(r8) :: topo_mid

    call setup_elevation_classes(glc_nec, topomax)

    ! Note that we allocate this to be the max possible size - which might exceed actual
    ! bounds - because bounds may not be set up at this point
    allocate(topo_glc_mec(begg:endg, glc_nec))
    do ec = 1, glc_nec
       topo_mid = (topomax(ec - 1) + topomax(ec)) / 2._r8
       topo_glc_mec(:, ec) = topo_mid
    end do

    this%topo_glc_mec_allocated = .true.
  end subroutine setup_glc_mec

  subroutine init_glc2lnd(this, glc_behavior, topo_grc, icemask_grc)
    class(TestTopo), intent(inout) :: this
    type(glc_behavior_type), intent(in) :: glc_behavior
    real(r8), intent(in) :: topo_grc(:, 0: )   ! [gridcell, elevclass] array of topo values
    real(r8), intent(in) :: icemask_grc(:)  ! gridcell-level array of icemask values

    call this%glc2lnd_inst%Init(bounds, glc_behavior)
    this%glc2lnd_allocated = .true.
    call this%glc2lnd_inst%for_test_set_glc2lnd_fields_directly(bounds, &
         topo = topo_grc, icemask = icemask_grc)
  end subroutine init_glc2lnd

  subroutine do_UpdateTopo(this, glc_behavior, icemask_grc, atm_topo_grc, glc_topo)
    ! Wrap the call to this%topo%UpdateTopo
    class(TestTopo), intent(inout) :: this
    type(glc_behavior_type), intent(in) :: glc_behavior
    real(r8), intent(in) :: icemask_grc(:)  ! gridcell-level array of icemask values

    ! gridcell-level array of atm_topo values; if not provided, will use default given
    ! below
    real(r8), intent(in), optional :: atm_topo_grc(:)

    ! topo value applied to ALL indices of glc2lnd_inst%topo_grc; if not provided, will
    ! use default given below
    real(r8), intent(in), optional :: glc_topo

    ! if atm_topo_grc isn't given, then atm_topo will have this value everywhere
    real(r8), parameter :: atm_topo_default = 25._r8

    ! if glc_topo isn't given, then glc2lnd_inst%topo_grc will have this value everywhere
    real(r8), parameter :: glc_topo_default = 17._r8

    real(r8), allocatable :: glc_topo_grc(:,:)  ! [gridcell, elevclass]

    real(r8), allocatable :: atm_topo(:)
    type(filter_col_type) :: filter_icemecc

    allocate(ldomain%frac(bounds%begg:bounds%endg))
    this%ldomain_frac_allocated = .true.
    ldomain%frac(bounds%begg:bounds%endg) = 1._r8

    allocate(glc_topo_grc(bounds%begg:bounds%endg, 0:maxpatch_glcmec))
    if (present(glc_topo)) then
       glc_topo_grc(:,:) = glc_topo
    else
       glc_topo_grc(:,:) = glc_topo_default
    end if
    call this%init_glc2lnd( &
         glc_behavior=glc_behavior, &
         topo_grc = glc_topo_grc, &
         icemask_grc=icemask_grc)

    filter_icemecc = col_filter_from_ltypes(bounds, [istice_mec], include_inactive = .false.)

    if (present(atm_topo_grc)) then
       atm_topo = atm_topo_grc
    else
       atm_topo = grc_array(atm_topo_default)
    end if

    call this%topo%UpdateTopo(bounds, filter_icemecc%num, filter_icemecc%indices, &
         this%glc2lnd_inst, glc_behavior, atm_topo = atm_topo)
  end subroutine do_UpdateTopo

  function create_glc_behavior_all_collapse() result(glc_behavior)
    ! Create a glc_behavior object where all grid cells get collapsed to a single column
    type(glc_behavior_type) :: glc_behavior

    call glc_behavior%InitSetDirectly(bounds%begg, bounds%endg, &
         has_virtual_columns = grc_array(.false.), &
         collapse_to_atm_topo = grc_array(.true.))

    ! It may not be correct to set this to true for ALL columns (e.g., if there are some
    ! non-glc_mec columns), but doing so is convenient, and shouldn't cause any problems
    ! (though it might prevent some error checking).
    col%type_is_dynamic(:) = .true.
  end function create_glc_behavior_all_collapse

  function create_glc_behavior_all_multiple() result(glc_behavior)
    ! Create a glc_behavior object where all grid cells have behavior 'multiple'
    type(glc_behavior_type) :: glc_behavior

    call glc_behavior%InitSetDirectly(bounds%begg, bounds%endg, &
         has_virtual_columns = grc_array(.false.), &
         collapse_to_atm_topo = grc_array(.false.))
  end function create_glc_behavior_all_multiple

  function create_glc_behavior_all_virtual() result(glc_behavior)
    ! Create a glc_behavior object where all grid cells have behavior 'virtual'
    type(glc_behavior_type) :: glc_behavior

    call glc_behavior%InitSetDirectly(bounds%begg, bounds%endg, &
         has_virtual_columns = grc_array(.true.), &
         collapse_to_atm_topo = grc_array(.false.))
  end function create_glc_behavior_all_virtual

  ! ========================================================================
  ! Begin actual tests
  !
  ! Note that many of these tests test the combined effect of multiple modules: TopoMod's
  ! UpdateTopo plus the various things it calls. (So in that respect, they aren't strict
  ! unit tests.)
  ! ========================================================================

  @Test
  subroutine downscaleFilter_beforeUpdate_contains_glcmec(this)
    class(TestTopo), intent(inout) :: this
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected_filter

    call setup_single_icemec_column(elev_class = 1)
    expected_filter = col_filter_from_index_array(bounds, [bounds%begc])

    call this%topo%Init(bounds)
    filter = this%topo%DownscaleFilterc(bounds)

    @assertTrue(filter == expected_filter)
  end subroutine downscaleFilter_beforeUpdate_contains_glcmec

  @Test
  subroutine downscaleFilter_afterUpdate_contains_glcmecOutsideIcemask(this)
    class(TestTopo), intent(inout) :: this
    type(glc_behavior_type) :: glc_behavior
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected_filter

    call setup_single_icemec_column(elev_class = 1)
    glc_behavior = create_glc_behavior_all_multiple()
    expected_filter = col_filter_from_index_array(bounds, [bounds%begc])

    call this%topo%Init(bounds)
    call this%do_UpdateTopo(glc_behavior, icemask_grc = grc_array(0._r8))
    filter = this%topo%DownscaleFilterc(bounds)

    @assertTrue(filter == expected_filter)
  end subroutine downscaleFilter_afterUpdate_contains_glcmecOutsideIcemask

  @Test
  subroutine downscaleFilter_afterUpdate_doesNotContain_singleAtAtmTopo(this)
    class(TestTopo), intent(inout) :: this
    type(glc_behavior_type) :: glc_behavior
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected_filter

    call setup_single_icemec_column(elev_class = 1)
    glc_behavior = create_glc_behavior_all_collapse()
    expected_filter = col_filter_empty(bounds)

    call this%topo%Init(bounds)
    ! Need icemask 0, because we can't have single_at_atm_topo inside the icemask
    call this%do_UpdateTopo(glc_behavior, icemask_grc = grc_array(0._r8))
    filter = this%topo%DownscaleFilterc(bounds)

    @assertTrue(filter == expected_filter)
  end subroutine downscaleFilter_afterUpdate_doesNotContain_singleAtAtmTopo

  @Test
  subroutine downscaleFilter_afterUpdate_doesNotContain_vegOutsideIcemask(this)
    class(TestTopo), intent(inout) :: this
    type(glc_behavior_type) :: glc_behavior
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected_filter

    call setup_single_veg_patch(pft_type = 1)
    ! Use 'virtual' behavior, to make sure that we're not accidentally trying to
    ! downscale vegetation over virtual columns.
    glc_behavior = create_glc_behavior_all_virtual()
    expected_filter = col_filter_empty(bounds)

    call this%topo%Init(bounds)
    call this%do_UpdateTopo(glc_behavior, icemask_grc = grc_array(0._r8))
    filter = this%topo%DownscaleFilterc(bounds)

    @assertTrue(filter == expected_filter)
  end subroutine downscaleFilter_afterUpdate_doesNotContain_vegOutsideIcemask

  @Test
  subroutine downscaleFilter_afterUpdate_contains_vegInsideIcemask(this)
    class(TestTopo), intent(inout) :: this
    type(glc_behavior_type) :: glc_behavior
    type(filter_col_type) :: filter
    type(filter_col_type) :: expected_filter

    call setup_single_veg_patch(pft_type = 1)
    glc_behavior = create_glc_behavior_all_multiple()
    expected_filter = col_filter_from_index_array(bounds, [bounds%begc])

    call this%topo%Init(bounds)
    call this%do_UpdateTopo(glc_behavior, icemask_grc = grc_array(1._r8))
    filter = this%topo%DownscaleFilterc(bounds)

    @assertTrue(filter == expected_filter)
  end subroutine downscaleFilter_afterUpdate_contains_vegInsideIcemask

  @Test
  subroutine topo_noChange_for_glcmecOutsideIcemask(this)
    class(TestTopo), intent(inout) :: this
    type(glc_behavior_type) :: glc_behavior
    real(r8), parameter :: topo_orig = 7._r8

    ! our column should NOT get set to either of these:
    real(r8), parameter :: atm_topo = 23._r8
    real(r8), parameter :: glc_topo = 27._r8

    call setup_single_icemec_column(elev_class = 1)
    glc_behavior = create_glc_behavior_all_virtual()
    topo_glc_mec(:,:) = topo_orig

    call this%topo%Init(bounds)
    call this%do_UpdateTopo(glc_behavior, icemask_grc = grc_array(0._r8), &
         atm_topo_grc = grc_array(atm_topo), &
         glc_topo = glc_topo)

    @assertEqual(topo_orig, this%topo%topo_col(bounds%begc))
  end subroutine topo_noChange_for_glcmecOutsideIcemask

  @Test
  subroutine topo_changes_for_glcmecInsideIcemask(this)
    class(TestTopo), intent(inout) :: this
    type(glc_behavior_type) :: glc_behavior
    real(r8), parameter :: topo_orig = 7._r8
    real(r8), parameter :: atm_topo = 23._r8

    ! our column should get set to this:
    real(r8), parameter :: glc_topo = 27._r8

    call setup_single_icemec_column(elev_class = 1)
    glc_behavior = create_glc_behavior_all_virtual()
    topo_glc_mec(:,:) = topo_orig

    call this%topo%Init(bounds)
    call this%do_UpdateTopo(glc_behavior, icemask_grc = grc_array(1._r8), &
         atm_topo_grc = grc_array(atm_topo), &
         glc_topo = glc_topo)

    @assertEqual(glc_topo, this%topo%topo_col(bounds%begc))
  end subroutine topo_changes_for_glcmecInsideIcemask

  @Test
  subroutine topo_changes_for_singleAtAtmTopo(this)
    class(TestTopo), intent(inout) :: this
    type(glc_behavior_type) :: glc_behavior
    real(r8), parameter :: topo_orig = 7._r8
    real(r8), parameter :: glc_topo = 27._r8

    ! our column should get set to this:
    real(r8), parameter :: atm_topo = 23._r8

    call setup_single_icemec_column(elev_class = 1)
    glc_behavior = create_glc_behavior_all_collapse()
    topo_glc_mec(:,:) = topo_orig

    call this%topo%Init(bounds)
    call this%do_UpdateTopo(glc_behavior, icemask_grc = grc_array(0._r8), &
         atm_topo_grc = grc_array(atm_topo), &
         glc_topo = glc_topo)

    @assertEqual(atm_topo, this%topo%topo_col(bounds%begc))
  end subroutine topo_changes_for_singleAtAtmTopo

  @Test
  subroutine elevClass_changes_for_singleAtAtmTopo(this)
    class(TestTopo), intent(inout) :: this
    type(glc_behavior_type) :: glc_behavior
    integer :: new_elev_class
    real(r8), parameter :: topo_orig = 7._r8
    real(r8), parameter :: glc_topo = 27._r8

    ! our column should get set to this:
    real(r8), parameter :: atm_topo = 23._r8

    call setup_single_icemec_column(elev_class = 1)
    glc_behavior = create_glc_behavior_all_collapse()
    topo_glc_mec(:,:) = topo_orig

    call this%topo%Init(bounds)
    call this%do_UpdateTopo(glc_behavior, icemask_grc = grc_array(0._r8), &
         atm_topo_grc = grc_array(atm_topo), &
         glc_topo = glc_topo)

    new_elev_class = col_itype_to_icemec_class(col%itype(bounds%begc))
    @assertEqual(3, new_elev_class)
  end subroutine elevClass_changes_for_singleAtAtmTopo

end module test_topo
