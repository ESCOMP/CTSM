module test_total_water_and_heat

  ! Tests of TotalWaterAndHeatMod

  use pfunit_mod
  use TotalWaterAndHeatMod
  use shr_kind_mod , only : r8 => shr_kind_r8
  use unittestSubgridMod
  use unittestSimpleSubgridSetupsMod
  use clm_varcon, only : tfrz, cpliq, hfus

  implicit none

  @TestCase
  type, extends(TestCase) :: TestTWAH
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestTWAH

  real(r8), parameter :: tol = 1.e-13_r8
  real(r8), parameter :: irrelevant_temp = tfrz + 9999._r8

contains

  subroutine setUp(this)
    class(TestTWAH), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestTWAH), intent(inout) :: this

    call unittest_subgrid_teardown()
  end subroutine tearDown

  ! ------------------------------------------------------------------------
  ! Tests of LiquidWaterHeat
  ! ------------------------------------------------------------------------

  @Test
  subroutine LiquidWaterHeatBasic(this)
    class(TestTWAH), intent(inout) :: this
    real(r8), parameter :: h2o = 3._r8
    real(r8), parameter :: temp_above_base = 4._r8
    real(r8), parameter :: temp = heat_base_temp + temp_above_base
    real(r8) :: heat
    real(r8) :: expected_heat, expected_latent_heat, expected_total

    heat = LiquidWaterHeat(temp = temp, h2o = h2o)
    expected_latent_heat = h2o * hfus
    expected_heat = h2o * cpliq * temp_above_base
    expected_total = expected_latent_heat + expected_heat

    @assertEqual(expected_total, heat, tolerance=tol)
  end subroutine LiquidWaterHeatBasic

  ! ------------------------------------------------------------------------
  ! Tests of AdjustDeltaHeatForDeltaLiq
  ! ------------------------------------------------------------------------

  @Test
  subroutine AdjustDeltaHeatNoDeltaLiq(this)
    class(TestTWAH), intent(inout) :: this
    real(r8) :: delta_heat(1)
    real(r8), parameter :: delta_liq = 0._r8
    real(r8), parameter :: delta_heat_init = 17._r8

    call setup_single_veg_patch(pft_type = 1)

    delta_heat(1) = delta_heat_init

    call AdjustDeltaHeatForDeltaLiq(bounds, [delta_liq], &
         [irrelevant_temp], [irrelevant_temp], &
         delta_heat)

    @assertEqual(delta_heat(1), delta_heat_init)
  end subroutine AdjustDeltaHeatNoDeltaLiq

  @Test
  subroutine AdjustDeltaHeatNegativeDeltaLiq(this)
    class(TestTWAH), intent(inout) :: this
    real(r8) :: delta_heat(1)
    real(r8) :: heat_diff
    real(r8) :: expected_total_heat
    real(r8), parameter :: liquid_water_temp1 = tfrz + 3._r8
    real(r8), parameter :: delta_heat_init = 17._r8
    real(r8), parameter :: delta_liq = -2._r8

    call setup_single_veg_patch(pft_type = 1)
    
    delta_heat(1) = delta_heat_init

    call AdjustDeltaHeatForDeltaLiq(bounds, [delta_liq], &
         [liquid_water_temp1], [irrelevant_temp], &
         delta_heat)
    heat_diff = delta_heat(1) - delta_heat_init

    expected_total_heat = LiquidWaterHeat( &
         temp = liquid_water_temp1, &
         h2o = -delta_liq)

    @assertLessThan(0._r8, heat_diff)
    @assertEqual(expected_total_heat, heat_diff, tolerance=tol)

  end subroutine AdjustDeltaHeatNegativeDeltaLiq

  @Test
  subroutine AdjustDeltaHeatPositiveDeltaLiq(this)
    class(TestTWAH), intent(inout) :: this
    real(r8) :: delta_heat(1)
    real(r8) :: heat_diff
    real(r8) :: expected_total_heat
    real(r8), parameter :: liquid_water_temp2 = tfrz + 3._r8
    real(r8), parameter :: delta_heat_init = 17._r8
    real(r8), parameter :: delta_liq = 2._r8

    call setup_single_veg_patch(pft_type = 1)
    
    delta_heat(1) = delta_heat_init

    call AdjustDeltaHeatForDeltaLiq(bounds, [delta_liq], &
         [irrelevant_temp], [liquid_water_temp2], &
         delta_heat)
    heat_diff = delta_heat(1) - delta_heat_init

    expected_total_heat = LiquidWaterHeat( &
         temp = liquid_water_temp2, &
         h2o = -delta_liq)

    @assertGreaterThan(0._r8, heat_diff)
    @assertEqual(expected_total_heat, heat_diff, tolerance=tol)

  end subroutine AdjustDeltaHeatPositiveDeltaLiq

  @Test
  subroutine AdjustDeltaHeatVeryColdTemperature(this)
    class(TestTWAH), intent(inout) :: this
    real(r8) :: delta_heat(1)
    real(r8) :: heat_diff
    real(r8) :: expected_total_heat
    real(r8), parameter :: liquid_water_temp2 = DeltaLiqMinTemp - 1._r8
    real(r8), parameter :: delta_heat_init = 17._r8
    real(r8), parameter :: delta_liq = 2._r8

    call setup_single_veg_patch(pft_type = 1)
    
    delta_heat(1) = delta_heat_init

    call AdjustDeltaHeatForDeltaLiq(bounds, [delta_liq], &
         [irrelevant_temp], [liquid_water_temp2], &
         delta_heat)
    heat_diff = delta_heat(1) - delta_heat_init

    expected_total_heat = LiquidWaterHeat( &
         temp = DeltaLiqMinTemp, &
         h2o = -delta_liq)

    @assertEqual(expected_total_heat, heat_diff, tolerance=tol)
  end subroutine AdjustDeltaHeatVeryColdTemperature

  @Test
  subroutine AdjustDeltaHeatVeryHotTemperature(this)
    class(TestTWAH), intent(inout) :: this
    real(r8) :: delta_heat(1)
    real(r8) :: heat_diff
    real(r8) :: expected_total_heat
    real(r8), parameter :: liquid_water_temp2 = DeltaLiqMaxTemp + 1._r8
    real(r8), parameter :: delta_heat_init = 17._r8
    real(r8), parameter :: delta_liq = 2._r8

    call setup_single_veg_patch(pft_type = 1)
    
    delta_heat(1) = delta_heat_init

    call AdjustDeltaHeatForDeltaLiq(bounds, [delta_liq], &
         [irrelevant_temp], [liquid_water_temp2], &
         delta_heat)
    heat_diff = delta_heat(1) - delta_heat_init

    expected_total_heat = LiquidWaterHeat( &
         temp = DeltaLiqMaxTemp, &
         h2o = -delta_liq)

    @assertEqual(expected_total_heat, heat_diff, tolerance=tol)
  end subroutine AdjustDeltaHeatVeryHotTemperature

end module test_total_water_and_heat
