module test_SnowHydrology_initSnowLayers
  
  ! Tests of SnowHydrologyMod: initSnowLayers
  
  use pfunit_mod
  use SnowHydrologyMod
  use shr_kind_mod, only : r8 => shr_kind_r8
  use unittestSubgridMod
  use unittestSimpleSubgridSetupsMod
  use ColumnType, only : col
  use clm_varpar, only : nlevsno

  implicit none
  
  @TestCase
  type, extends(TestCase) :: TestSnowHydrology
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestSnowHydrology
  
contains
  
  subroutine setUp(this)
    class(TestSnowHydrology), intent(inout) :: this
  end subroutine setUp
  
  subroutine tearDown(this)
    class(TestSnowHydrology), intent(inout) :: this
    call unittest_subgrid_teardown()
    call SnowHydrologyClean()
  end subroutine tearDown

  @Test
  subroutine test_initSnowLayers_depth0_snl(this)
    class(TestSnowHydrology), intent(inout) :: this
    real(r8), allocatable :: snow_depth(:)

    ! Setup
    nlevsno = 5
    call SnowHydrologySetControlForTesting()
    call setup_single_veg_patch(pft_type = 1)
    allocate(snow_depth(bounds%begc:bounds%endc))
    snow_depth(:) = 0._r8
    col%zi(bounds%begc:bounds%endc,0) = 0._r8 ! Normally initialized elsewhere (initVerticalMod)

    ! Exercise
    call InitSnowLayers(bounds, snow_depth)

    ! Verify
    @assertEqual(0, col%snl(bounds%begc))

  end subroutine test_initSnowLayers_depth0_snl

  @Test
  subroutine test_initSnowLayers_depth1_snl(this)
    class(TestSnowHydrology), intent(inout) :: this
    real(r8), allocatable :: snow_depth(:)

    ! Setup
    nlevsno = 5
    call SnowHydrologySetControlForTesting()
    call setup_single_veg_patch(pft_type = 1)
    allocate(snow_depth(bounds%begc:bounds%endc))
    snow_depth(:) = 1._r8
    col%zi(bounds%begc:bounds%endc,0) = 0._r8 ! Normally initialized elsewhere (initVerticalMod)

    ! Exercise
    call InitSnowLayers(bounds, snow_depth)

    ! Verify
    @assertEqual(-5, col%snl(bounds%begc))

  end subroutine test_initSnowLayers_depth1_snl

end module test_SnowHydrology_initSnowLayers
