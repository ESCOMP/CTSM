module test_SnowHydrology_newSnowBulkDensity
  
  ! Tests of SnowHydrologyMod: newSnowBulkDensity
  
  use pfunit_mod
  use unittestSubgridMod
  use SnowHydrologyMod
  use atm2lndType , only : atm2lnd_type
  use clm_varcon  , only : tfrz
  use shr_kind_mod, only : r8 => shr_kind_r8

  implicit none
  
  @TestCase
  type, extends(TestCase) :: TestSnowHydrology
     integer :: numf
     integer,  allocatable :: filter(:)
     real(r8), allocatable :: bifall(:)
     type(atm2lnd_type)   :: atm2lnd_inst
     real(r8) :: NEG15C
     real(r8) :: TWOC
     real(r8) :: MINSNOWDENSITY
     real(r8) :: MAXSNOWDENSITY
     real(r8) :: MAXWINDEDSNOWDENSITY
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestSnowHydrology


  real(r8), parameter :: tol = 1.e-13 ! tolerance for error checks

contains
  
  subroutine setUp(this)
    use unittestSimpleSubgridSetupsMod, only : setup_single_veg_patch
    use unittestFilterBuilderMod, only : filter_from_range
    class(TestSnowHydrology), intent(inout) :: this

    call setup_single_veg_patch(pft_type=1)
    call filter_from_range(start=bounds%begc, end=bounds%endc, numf=this%numf, filter=this%filter)
    @assertEqual( this%numf, 1 )
    call this%atm2lnd_inst%InitForTesting( bounds )
    this%atm2lnd_inst%forc_wind_grc(bounds%begg)  = 0.0_r8
    allocate( this%bifall(bounds%begc:bounds%endc) )
    this%NEG15C = tfrz - 15._r8
    this%TWOC   = tfrz + 2._r8
    ! These constants agree with the hard-coded values in newSnowBulkDensity
    this%MINSNOWDENSITY = 50.0_r8
    this%MAXSNOWDENSITY = 170.0_r8
    this%MAXWINDEDSNOWDENSITY = 270.0_r8
    call SnowHydrologySetControlForTesting( set_winddep_snowdensity=.false., &
         set_new_snow_density=LoTmpDnsTruncatedAnderson1976 )
  end subroutine setUp
  
  subroutine tearDown(this)
    class(TestSnowHydrology), intent(inout) :: this

    call unittest_subgrid_teardown()
    call this%atm2lnd_inst%Clean( )
    deallocate( this%filter )
    this%numf = -1
    deallocate( this%bifall )
  end subroutine tearDown

  @Test
  subroutine newSnowBulkDensity_neg15_TruncatedMethod(this)
    ! Test the input at negative 15 degrees C
    class(TestSnowHydrology), intent(inout) :: this
    real(r8) :: minsnowdensity

    call SnowHydrologySetControlForTesting( set_winddep_snowdensity=.false., &
         set_new_snow_density=LoTmpDnsTruncatedAnderson1976 )
    this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) = this%NEG15C - epsilon(this%NEG15C)
    call NewSnowBulkDensity(bounds, this%numf, this%filter, this%atm2lnd_inst, this%bifall)
    write(*,*) 'forc_t   = ', this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc)
    write(*,*) 'min, max = ', this%MINSNOWDENSITY, this%MAXSNOWDENSITY
    write(*,*) 'bifall   = ', this%bifall(bounds%begc)

    @assertLessThanOrEqual( this%MINSNOWDENSITY, this%bifall(bounds%begc), message="at -15C" )
    minsnowdensity = this%bifall(bounds%begc)

    ! Test that below neg15 stays at the same value
    do while( this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) > (tfrz - 100.0_r8) )
       this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) = this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) - 0.1_r8
       call NewSnowBulkDensity(bounds, this%numf, this%filter, this%atm2lnd_inst, this%bifall)
       @assertEqual(this%bifall(bounds%begc), minsnowdensity, message="below -15C" )
    end do

  end subroutine newSnowBulkDensity_neg15_TruncatedMethod

  @Test
  subroutine newSnowBulkDensity_neg15_SlaterDensity(this)
    ! Test the input at negative 15 degrees C
    class(TestSnowHydrology), intent(inout) :: this
    real(r8) :: minsnowdensity

    call SnowHydrologySetControlForTesting( set_winddep_snowdensity=.false., &
         set_new_snow_density=LoTmpDnsSlater2017 )
    this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) = this%NEG15C - epsilon(this%NEG15C)
    call NewSnowBulkDensity(bounds, this%numf, this%filter, this%atm2lnd_inst, this%bifall)

    @assertLessThanOrEqual( this%MINSNOWDENSITY, this%bifall(bounds%begc), message="at -15C SlaterDensity" )
    minsnowdensity = this%bifall(bounds%begc)

    ! Test that from -15 to -100, stays within bounds
    do while( this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) > (tfrz - 100.0_r8) )
       this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) = this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) - 0.1_r8
       call NewSnowBulkDensity(bounds, this%numf, this%filter, this%atm2lnd_inst, this%bifall)
       @assertLessThan( minsnowdensity, this%bifall(bounds%begc), message="below -15C Slater Density > min" )
       @assertGreaterThan( this%MAXSNOWDENSITY, this%bifall(bounds%begc), message="below -15C Slater Density < max" )
    end do

  end subroutine newSnowBulkDensity_neg15_SlaterDensity

  @Test
  subroutine newSnowBulkDensity_lowT_SlaterDensity(this)
    ! Test the input for very low temperatures: density should be no lower than at higher
    ! temperatures
    class(TestSnowHydrology), intent(inout) :: this
    real(r8) :: density_at_neg_57_c(1)

    ! Setup

    call SnowHydrologySetControlForTesting( set_winddep_snowdensity=.false., &
         set_new_snow_density=LoTmpDnsSlater2017 )

    ! Get density at -57 C. This is close to the highest density for the cold-temperature
    ! regime.
    this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) = tfrz - 57._r8
    call NewSnowBulkDensity(bounds, this%numf, this%filter, this%atm2lnd_inst, density_at_neg_57_c)

    ! Exercise: Get density at very cold temperature: just above absolute zero
    this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) = 0.1_r8
    call NewSnowBulkDensity(bounds, this%numf, this%filter, this%atm2lnd_inst, this%bifall)

    ! Make sure that (1) density at -57 C is greater than minsnowdensity, and (2) density
    ! at really cold T is greater than or equal to than density at -57 C (which is close
    ! to the maximum snow density for the cold-temperature regime).
    @assertLessThan(this%MINSNOWDENSITY, density_at_neg_57_c(1), message="density at -57C > min")
    @assertLessThanOrEqual(density_at_neg_57_c(1), this%bifall(bounds%begc), message="density at very cold > density at -57C")

  end subroutine newSnowBulkDensity_lowT_SlaterDensity



  @Test
  subroutine checkWindDependentDensity(this)
    ! Test the range of the wind denpendent density
    class(TestSnowHydrology), intent(inout) :: this
    real(r8) :: base_density, last_density, diff

    this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) = (this%NEG15C + this%TWOC)*0.5
    call SnowHydrologySetControlForTesting( set_winddep_snowdensity=.false., &
         set_new_snow_density=LoTmpDnsTruncatedAnderson1976 )
    this%atm2lnd_inst%forc_wind_grc(bounds%begg)  = 0.0_r8
    call NewSnowBulkDensity(bounds, this%numf, this%filter, this%atm2lnd_inst, this%bifall)
    base_density = this%bifall(bounds%begc)
    call SnowHydrologySetControlForTesting( set_winddep_snowdensity=.true., &
         set_new_snow_density=LoTmpDnsTruncatedAnderson1976 )
    call NewSnowBulkDensity(bounds, this%numf, this%filter, this%atm2lnd_inst, this%bifall)
    @assertEqual( base_density, this%bifall(bounds%begc), tolerance=1.0e-12_r8, message="Expect no change with zero wind" )
    write(*,*) 'without wind-depend = ', base_density, ' with wind@0=', this%bifall(bounds%begc)
    base_density = this%bifall(bounds%begc)

    last_density = base_density
    ! Check that monotone increasing with wind
    do while ( this%atm2lnd_inst%forc_wind_grc(bounds%begg) < 30.0 )
       this%atm2lnd_inst%forc_wind_grc(bounds%begg)  = this%atm2lnd_inst%forc_wind_grc(bounds%begg) + 0.1
       call NewSnowBulkDensity(bounds, this%numf, this%filter, this%atm2lnd_inst, this%bifall)
       @assertLessThanOrEqual( base_density, this%bifall(bounds%begc), message="Density should increase with wind" )
       @assertLessThanOrEqual( last_density, this%bifall(bounds%begc), message="Density should increase with wind" )
       diff = this%bifall(bounds%begc)-base_density
       @assertLessThanOrEqual(   diff, this%MAXWINDEDSNOWDENSITY, message="density increase with wind < max" )
       @assertGreaterThanOrEqual(this%bifall(bounds%begc), this%MINSNOWDENSITY, message="density with wind > min" )
       last_density = this%bifall(bounds%begc)
    end do
    ! Check at certain values...
    this%atm2lnd_inst%forc_wind_grc(bounds%begg)  = 5.0_R8
    call NewSnowBulkDensity(bounds, this%numf, this%filter, this%atm2lnd_inst, this%bifall)
    diff = this%bifall(bounds%begc)-base_density
    @assertEqual( 90.0_r8, diff, message="at 5m/sec should be around 90", tolerance=10.0_r8 )
    this%atm2lnd_inst%forc_wind_grc(bounds%begg)  = 10.0_R8
    call NewSnowBulkDensity(bounds, this%numf, this%filter, this%atm2lnd_inst, this%bifall)
    diff = this%bifall(bounds%begc)-base_density
    @assertEqual( 230.0_r8, diff, message="at 10m/sec should be around 230", tolerance=10.0_r8 )
    this%atm2lnd_inst%forc_wind_grc(bounds%begg)  = 15.0_R8
    call NewSnowBulkDensity(bounds, this%numf, this%filter, this%atm2lnd_inst, this%bifall)
    diff = this%bifall(bounds%begc)-base_density
    @assertEqual( 258.0_r8, diff, message="at 10m/sec should be around 258", tolerance=8.0_r8 )

  end subroutine checkWindDependentDensity

  @Test
  subroutine newSnowBulkDensity_2C(this)
    ! Test the input at 2 degrees C
    class(TestSnowHydrology), intent(inout) :: this
    real(r8) :: maxsnowdensity
    integer :: density_type

    do density_type = 1, 2
       call SnowHydrologySetControlForTesting( set_winddep_snowdensity=.false., &
            set_new_snow_density=density_type )
       write(*,*) 'snow density type = ', density_type
       this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) = this%TWOC + epsilon(this%TWOC)
       call NewSnowBulkDensity(bounds, this%numf, this%filter, this%atm2lnd_inst, this%bifall)

       @assertGreaterThan( this%MAXSNOWDENSITY, this%bifall(bounds%begc), message="at 2C" )
       maxsnowdensity = this%bifall(bounds%begc)

       ! Test that stays the same above 2C
       do while( this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) < (tfrz + 100.0_r8) )
          this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) = this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) + 0.1_r8
          call NewSnowBulkDensity(bounds, this%numf, this%filter, this%atm2lnd_inst, this%bifall)
          @assertEqual(this%bifall(bounds%begc), maxsnowdensity, message="above 2C" )
       end do
    end do
  end subroutine newSnowBulkDensity_2C

  @Test
  subroutine newSnowBulkDensity_monotoneincreasing(this)
    ! Test that between -15C and 2C is monotone increasing
    class(TestSnowHydrology), intent(inout) :: this
    real(r8) :: minsnowdensity, maxsnowdensity, lastsnowdensity
    integer :: density_type

    do density_type = 1, 2
       call SnowHydrologySetControlForTesting( set_winddep_snowdensity=.false., &
            set_new_snow_density=density_type )
       write(*,*) 'snow density type = ', density_type
       this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) = this%TWOC + epsilon(this%TWOC)
       call NewSnowBulkDensity(bounds, this%numf, this%filter, this%atm2lnd_inst, this%bifall)
       maxsnowdensity = this%bifall(bounds%begc)
       this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) = this%NEG15C - epsilon(this%NEG15C)
       call NewSnowBulkDensity(bounds, this%numf, this%filter, this%atm2lnd_inst, this%bifall)
       minsnowdensity = this%bifall(bounds%begc)

       lastsnowdensity = minsnowdensity
       ! Test that between -15 and 2 C is between range and monotone increasing
       do while( this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) < this%TWOC )
          this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) = this%atm2lnd_inst%forc_t_downscaled_col(bounds%begc) + 0.1_r8
          call NewSnowBulkDensity(bounds, this%numf, this%filter, this%atm2lnd_inst, this%bifall)
          @assertLessThanOrEqual(   this%bifall(bounds%begc), maxsnowdensity, message="< max" )
          @assertGreaterThanOrEqual(this%bifall(bounds%begc), minsnowdensity,  message="> min" )
          @assertGreaterThanOrEqual(this%bifall(bounds%begc), lastsnowdensity, message="> last" )
          lastsnowdensity = this%bifall(bounds%begc)
          ! Check that both density types give same answers
          if ( density_type == 1 ) then
             call SnowHydrologySetControlForTesting( set_winddep_snowdensity=.false., &
                  set_new_snow_density=LoTmpDnsSlater2017 )
             call NewSnowBulkDensity(bounds, this%numf, this%filter, this%atm2lnd_inst, this%bifall)
             @assertEqual(   this%bifall(bounds%begc), lastsnowdensity, message="Density methods same for mid temps" )
          end if
       end do
    end do

  end subroutine newSnowBulkDensity_monotoneincreasing


end module test_SnowHydrology_newSnowBulkDensity
