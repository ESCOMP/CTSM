module test_compute_max_daylength

  ! Tests of DaylengthMod: ComputeMaxDaylength

  use pfunit_mod
  use DaylengthMod, only: ComputeMaxDaylength, daylength
  use shr_kind_mod , only : r8 => shr_kind_r8
  use unittestSubgridMod, only : unittest_subgrid_teardown, bounds
  use unittestSimpleSubgridSetupsMod, only : setup_ncells_single_veg_patch
  use GridcellType, only : grc

  implicit none

  @TestCase
  type, extends(TestCase) :: TestMaxDaylength
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestMaxDaylength

  ! Note larger tolerance here than what we typically use:
  real(r8), parameter :: tol = 1.e-3_r8

contains

  subroutine setUp(this)
    class(TestMaxDaylength), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestMaxDaylength), intent(inout) :: this

    call unittest_subgrid_teardown
  end subroutine tearDown

  @Test
  subroutine computeMaxDaylength_basic(this)
    ! Basic tests of ComputeMaxDaylength, for both negative and positive latitudes
    class(TestMaxDaylength), intent(inout) :: this
    real(r8), parameter :: lat1 = 0.1_r8
    real(r8), parameter :: lat2 = 0.2_r8
    real(r8), parameter :: obliquity = 0.3_r8
    real(r8) :: expected_lat1, expected_lat2
    real(r8) :: expected(4)

    call setup_ncells_single_veg_patch(ncells=4, pft_type=1)
    ! Mix of negative and positive latitudes:
    grc%lat(bounds%begg:bounds%endg) = [-lat1, lat1, -lat2, lat2]

    expected_lat1 = daylength(lat1, obliquity)
    expected_lat2 = daylength(lat2, obliquity)
    ! Expected max daylength is the same for lat1 and -lat1
    expected(:) = [expected_lat1, expected_lat1, expected_lat2, expected_lat2]

    call ComputeMaxDaylength(bounds, &
         lat = grc%lat(bounds%begg:bounds%endg), &
         obliquity = obliquity, &
         max_daylength = grc%max_dayl(bounds%begg:bounds%endg))

    @assertEqual(expected, grc%max_dayl(bounds%begg:bounds%endg), tolerance=tol)
  end subroutine computeMaxDaylength_basic

  @Test
  subroutine computeMaxDaylength_equator(this)
    ! At the equator, max daylength should be 12 hours
    class(TestMaxDaylength), intent(inout) :: this
    real(r8), parameter :: twelve_hours = 12._r8 * 60._r8 * 60._r8  ! in seconds

    call setup_ncells_single_veg_patch(ncells=1, pft_type=1)
    grc%lat(bounds%begg) = 0._r8

    call ComputeMaxDaylength(bounds, &
         lat = grc%lat(bounds%begg:bounds%endg), &
         obliquity = 0.3_r8, &
         max_daylength = grc%max_dayl(bounds%begg:bounds%endg))

    @assertEqual(twelve_hours, grc%max_dayl(bounds%begg), tolerance=tol)
  end subroutine computeMaxDaylength_equator

  @Test
  subroutine computeMaxDaylength_nearPoles(this)
    ! Near the poles, max daylength should be 24 hours
    class(TestMaxDaylength), intent(inout) :: this
    real(r8), parameter :: twentyfour_hours = 24._r8 * 60._r8 * 60._r8  ! in seconds
    real(r8) :: expected(2)

    call setup_ncells_single_veg_patch(ncells=2, pft_type=1)
    grc%lat(bounds%begg:bounds%endg) = [1.5_r8, -1.5_r8]

    expected(:) = [twentyfour_hours, twentyfour_hours]

    call ComputeMaxDaylength(bounds, &
         lat = grc%lat(bounds%begg:bounds%endg), &
         obliquity = 0.3_r8, &
         max_daylength = grc%max_dayl(bounds%begg:bounds%endg))

    @assertEqual(expected, grc%max_dayl(bounds%begg:bounds%endg), tolerance=tol)
  end subroutine computeMaxDaylength_nearPoles

end module test_compute_max_daylength
