module test_water_type

  ! Tests of WaterType

  use pfunit_mod
  use WaterType
  use shr_kind_mod , only : r8 => shr_kind_r8
  use unittestSubgridMod, only : bounds, unittest_subgrid_teardown
  use unittestSimpleSubgridSetupsMod, only : setup_single_veg_patch
  use unittestArrayMod, only : col_array
  use unittestUtils, only : endrun_msg
  use clm_varpar, only : nlevsoi, nlevgrnd, nlevsno
  use ColumnType, only : col

  implicit none

  @TestCase
  type, extends(TestCase) :: TestWaterType
     type(water_type) :: water_inst
   contains
     procedure :: setUp
     procedure :: tearDown
     procedure :: init_water_inst_1pt
  end type TestWaterType

  real(r8), parameter :: tol = 1.e-13_r8

contains

  subroutine setUp(this)
    class(TestWaterType), intent(inout) :: this

    ! Arbitrarily set nlevs (needed for allocating multi-level variables)
    nlevsoi = 3
    nlevgrnd = nlevsoi + 1
    nlevsno = 3
  end subroutine setUp

  subroutine tearDown(this)
    class(TestWaterType), intent(inout) :: this

    ! Ideally this would call water_inst%Clean. But we don't yet have a clean method in
    ! water_type or most of the types it contains. So for now we have a small memory leak
    ! in each test.

    call unittest_subgrid_teardown()
  end subroutine tearDown

  subroutine init_water_inst_1pt(this)
    ! Initializes the subgrid structure for a single point, and initializes
    ! this%water_inst
    class(TestWaterType), intent(inout) :: this

    type(water_params_type) :: params
    real(r8), allocatable :: watsat_col(:,:)
    real(r8), allocatable :: t_soisno_col(:,:)

    call setup_single_veg_patch(pft_type=1)

    col%snl(:) = 0
    col%dz(:,:) = 1._r8

    params = water_params_type( &
         enable_consistency_checks = .true., &
         enable_isotopes = .false.)

    allocate(watsat_col(bounds%begc:bounds%endc, nlevgrnd))
    watsat_col(:,:) = 0._r8
    allocate(t_soisno_col(bounds%begc:bounds%endc, -nlevsno+1:nlevgrnd))
    t_soisno_col(:,:) = 275._r8
    call this%water_inst%InitForTesting(bounds, params, &
         h2osno_col = col_array(0._r8), &
         snow_depth_col = col_array(0._r8), &
         watsat_col = watsat_col, &
         t_soisno_col = t_soisno_col)

  end subroutine init_water_inst_1pt

  ! ------------------------------------------------------------------------
  ! Tests of TracerConsistencyCheck and other code that sets things up for this check
  ! ------------------------------------------------------------------------

  @Test
  subroutine tracerConsistencyCheck_passes(this)
    class(TestWaterType), intent(inout) :: this

    call this%init_water_inst_1pt()

    @assertTrue(this%water_inst%DoConsistencyCheck())

    ! The test is just about making sure that this line doesn't raise an exception:
    call this%water_inst%TracerConsistencyCheck(bounds, &
         caller_location = 'test')

  end subroutine tracerConsistencyCheck_passes

  @Test
  subroutine tracerConsistencyCheck_changed1dBulk_fails(this)
    ! If we change a 1d bulk variable, but don't change the corresponding tracer
    ! variable, the tracer consistency check should fail
    class(TestWaterType), intent(inout) :: this
    character(len=:), allocatable :: expected_msg

    call this%init_water_inst_1pt()

    this%water_inst%waterstatebulk_inst%h2osfc_col(bounds%begc) = &
         this%water_inst%waterstatebulk_inst%h2osfc_col(bounds%begc) + 1._r8

    @assertTrue(this%water_inst%DoConsistencyCheck())

    call this%water_inst%TracerConsistencyCheck(bounds, &
         caller_location = 'test')

    expected_msg = endrun_msg( &
         'CompareBulkToTracer: tracer does not agree with bulk water')
    @assertExceptionRaised(expected_msg)

  end subroutine tracerConsistencyCheck_changed1dBulk_fails

  @Test
  subroutine tracerConsistencyCheck_changed1dTracer_fails(this)
    ! If we change a 1d tracer variable, but don't change the corresponding bulk
    ! variable, the tracer consistency check should fail
    class(TestWaterType), intent(inout) :: this
    integer :: bulk_tracer
    character(len=:), allocatable :: expected_msg

    call this%init_water_inst_1pt()
    bulk_tracer = this%water_inst%GetBulkTracerIndex()
    @assertGreaterThan(bulk_tracer, 0)

    this%water_inst%waterstate_tracer_inst(bulk_tracer)%h2osfc_col(bounds%begc) = &
         this%water_inst%waterstate_tracer_inst(bulk_tracer)%h2osfc_col(bounds%begc) + 1._r8

    @assertTrue(this%water_inst%DoConsistencyCheck())

    call this%water_inst%TracerConsistencyCheck(bounds, &
         caller_location = 'test')

    expected_msg = endrun_msg( &
         'CompareBulkToTracer: tracer does not agree with bulk water')
    @assertExceptionRaised(expected_msg)

  end subroutine tracerConsistencyCheck_changed1dTracer_fails

  @Test
  subroutine tracerConsistencyCheck_changed2d_fails(this)
    ! If we change a 2d variable inconsistently between bult and tracer, the tracer
    ! consistency check should fail. This confirms that the multi-layer variables have
    ! each of their layers added
    class(TestWaterType), intent(inout) :: this
    integer :: lev
    integer :: bulk_tracer
    character(len=:), allocatable :: expected_msg

    call this%init_water_inst_1pt()
    bulk_tracer = this%water_inst%GetBulkTracerIndex()
    @assertGreaterThan(bulk_tracer, 0)

    lev = lbound(this%water_inst%waterstatebulk_inst%h2osoi_liq_col, 2) + 1
    ! We set both the bulk and tracer values explicitly, because we can't rely on these
    ! being set to reasonable values in all layers in initialization
    this%water_inst%waterstatebulk_inst%h2osoi_liq_col(bounds%begc, lev) = 1._r8
    this%water_inst%waterstate_tracer_inst(bulk_tracer)%h2osoi_liq_col(bounds%begc, lev) = 2._r8

    @assertTrue(this%water_inst%DoConsistencyCheck())

    call this%water_inst%TracerConsistencyCheck(bounds, &
         caller_location = 'test')

    expected_msg = endrun_msg( &
         'CompareBulkToTracer: tracer does not agree with bulk water')
    @assertExceptionRaised(expected_msg)

  end subroutine tracerConsistencyCheck_changed2d_fails

end module test_water_type
