module test_humanstress

  ! Tests of the humanstress functions in HumanIndexMod

  use pfunit_mod

  use shr_kind_mod  , only : r8 => shr_kind_r8
  use HumanIndexMod
  use shr_infnan_mod, only : shr_infnan_isnan
  use shr_const_mod , only: SHR_CONST_TKFRZ

  implicit none
  save

  real(r8), parameter :: tol = 1.e-8_r8

contains

  @Test
  subroutine test_standard_WetBulb()
    real(r8) :: temp   ! Temperature
    real(r8) :: rh     ! relative humidity
    real(r8) :: wbt    ! Wet bulb temp

    call Wet_BulbS( 0.0_r8, 0.0_r8, wbt )
    @assertEqual( -3.6531108341574_r8, wbt, tolerance=tol)
    call Wet_BulbS( 0.0_r8, 100.0_r8, wbt )
    @assertEqual( -0.13165370616986_r8, wbt, tolerance=tol)
    call Wet_BulbS( 50.0_r8, 100.0_r8, wbt )
    @assertTrue( .not. shr_infnan_isnan(wbt) )

    temp = 100._r8
    rh   = 100.0_r8
    do while ( temp > -50.0 )
       call Wet_BulbS( temp, rh, wbt )
       @assertTrue( .not. shr_infnan_isnan(wbt) )
       temp = temp - 0.1_r8
    end do
    
  end subroutine test_standard_WetBulb

  @Test
  subroutine test_WetBulb()
    use QSatMod, only : QSat
    implicit none
    real(r8) :: temp   ! Temperature
    real(r8) :: rh     ! relative humidity
    real(r8) :: wbt    ! Wet bulb temp
    real(r8) :: pres   ! atmospheric pressure
    real(r8) :: vapor  ! vapor pressure
    real(r8) :: shum   ! specific humidity

    real(r8) :: Teq, epott, sat_vapor
    real(r8) :: es_mb, de_mbdT, dlnes_mbdT, rs, rsdT, foftk, fdT

    pres = 100000._r8

    temp =  50._r8 + SHR_CONST_TKFRZ
    rh   = 100.0_r8
    call QSat (temp, pres, rs, &
         es = sat_vapor)
    call VaporPres( rh, sat_vapor, vapor )
    call VaporPres( rh, rs, shum )
    call Wet_Bulb (temp,vapor,pres,rh,shum,Teq,epott,wbt)
    @assertEqual( 50._r8, wbt, tolerance=1.e-2_r8 )

    temp =  59._r8 + SHR_CONST_TKFRZ
    rh   =  65.0_r8
    call QSat (temp, pres, rs, &
         es = sat_vapor)
    call VaporPres( rh, sat_vapor, vapor )
    call VaporPres( rh, rs, shum )
    call Wet_Bulb (temp,vapor,pres,rh,shum,Teq,epott,wbt)
    @assertTrue( .not. shr_infnan_isnan(wbt) )

    rh = 100.0_r8
    do while ( rh > 0.0_r8 )
       pres = 120000.0_r8
       do while ( pres > 85000._r8 )
          temp =  53._r8 + SHR_CONST_TKFRZ
          do while ( temp > SHR_CONST_TKFRZ-127.0 )
             call QSat (temp, pres, rs, &
                  es = sat_vapor)
             call VaporPres( rh, sat_vapor, vapor )
             call VaporPres( rh, rs, shum )
             call Wet_Bulb (temp,vapor,pres,rh,shum,Teq,epott,wbt)
             if ( rh == 100._r8 )then
                @assertEqual( temp-SHR_CONST_TKFRZ, wbt, tolerance=1.e-2_r8 )
             else
                @assertLessThan( wbt-1.e-6_r8, temp-SHR_CONST_TKFRZ )
             end if
             temp = temp - 10.0_r8
          end do
          pres = pres - 5000.0_r8
       end do
       rh = rh - 5.0_r8
       if ( rh == 90.0_r8 ) rh = 5.0_r8
    end do
    
  end subroutine test_WetBulb


  @Test
  subroutine test_WetBulb_extremeTemps()
    use QSatMod, only : QSat
    implicit none
    real(r8) :: temp   ! Temperature
    real(r8) :: rh     ! relative humidity
    real(r8) :: wbt    ! Wet bulb temp
    real(r8) :: pres   ! atmospheric pressure
    real(r8) :: vapor  ! vapor pressure
    real(r8) :: shum   ! specific humidity

    real(r8) :: Teq, epott, sat_vapor
    real(r8) :: es_mb, de_mbdT, dlnes_mbdT, rs, rsdT, foftk, fdT

    rh = 1.0_r8
    do while ( rh < 95.0_r8 )
       pres = 95000.0_r8
       do while ( pres < 110000._r8 )
          temp =  53._r8 + SHR_CONST_TKFRZ
          do while ( temp <= SHR_CONST_TKFRZ+58.0 )
             call QSat (temp, pres, rs, &
                  es = sat_vapor)
             call VaporPres( rh, sat_vapor, vapor )
             call VaporPres( rh, rs, shum )
             write(*,*) 'temp, pres, rh : ', temp-SHR_CONST_TKFRZ, pres, rh
             call Wet_Bulb (temp,vapor,pres,rh,shum,Teq,epott,wbt)
             write(*,*) 'wbt: ', wbt
             @assertLessThan( wbt-1.e-6_r8, temp-SHR_CONST_TKFRZ )
             temp = temp + 1.5_r8
          end do
          pres = pres + 2500.0_r8
       end do
       rh = rh + 5.0_r8
    end do
    
  end subroutine test_WetBulb_extremeTemps


end module test_humanstress
