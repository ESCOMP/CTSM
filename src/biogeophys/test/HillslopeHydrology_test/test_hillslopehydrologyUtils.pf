module test_hillslopehydrologyUtils

  ! Tests of the HillslopeHydrologyUtils module

  use funit
  use unittestSubgridMod
  use ColumnType      , only : col
  use LandunitType    , only : lun
  use landunit_varcon , only : istwet
  use decompMod       , only : bounds_type
  use clm_varpar      , only : nlevsoi, nlevgrnd
  use shr_kind_mod    , only : r8 => shr_kind_r8
  use HillslopeHydrologyUtilsMod, only : HillslopeSoilThicknessProfile_linear

  implicit none

  ! From clm_instInit
  real(r8), parameter :: soil_depth_lowland = 8.5_r8
  real(r8), parameter :: soil_depth_upland = 2._r8

  integer, parameter :: nbedrock_dummy_value = 9999

  @TestCase
  type, extends(TestCase) :: TestInit
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestInit

contains

  subroutine setUp(this)
    ! Set up variables needed for tests: various subgrid type variables, along with
    ! bounds.
    !
    class(TestInit), intent(inout) :: this
    integer :: g, l, c

    ! Set up subgrid structure
    ! The weights (of both landunits and columns) and column types in the following are
    ! arbitrary, since they are not important for these tests

    call unittest_subgrid_setup_start()

    ! Set up gridcell with one landunit and two columns
    call unittest_add_gridcell()
    call unittest_add_landunit(my_gi=gi, ltype=istwet, wtgcell=0.25_r8)
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.5_r8)
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.5_r8)

    call unittest_subgrid_setup_end()

    ! These will be enabled by specific tests
    col%active(begc:endc) = .false.
    col%is_hillslope_column(begc:endc) = .false.

    ! Set up hill_distance
    l = bounds%begl
    do c = lun%coli(l), lun%colf(l)
       col%hill_distance(c) = real(c, kind=r8)
    end do


  end subroutine setUp

  subroutine tearDown(this)
    ! clean up stuff set up in setup()
    use clm_varcon, only: clm_varcon_clean
    class(TestInit), intent(inout) :: this

    call unittest_subgrid_teardown()
    call clm_varcon_clean()

  end subroutine tearDown

  ! Set up ground/soil structure
  subroutine ground_a(bounds)
    use clm_varcon, only: clm_varcon_init, zisoi
    type(bounds_type), intent(in) :: bounds
    real(r8), allocatable :: my_zisoi(:)

    nlevsoi = 5
    allocate(my_zisoi(1:nlevsoi))
    my_zisoi = [0.01_r8, 0.02_r8, 2._r8, 4._r8, 6._r8]
    nlevgrnd = size(my_zisoi)
    call clm_varcon_init( is_simple_buildtemp = .true.)
    zisoi(0) = 0._r8
    zisoi(1:nlevgrnd) = my_zisoi(:)
    col%nbedrock(bounds%begc:bounds%endc) = nbedrock_dummy_value
    
    deallocate(my_zisoi)
  end subroutine ground_a

    ! Set up ground/soil structure
  subroutine ground_b(bounds)
    use clm_varcon, only: clm_varcon_init, zisoi
    type(bounds_type), intent(in) :: bounds
    real(r8), allocatable :: my_zisoi(:)

    nlevsoi = 3
    allocate(my_zisoi(1:nlevsoi))
    my_zisoi = [0.01_r8, 0.02_r8, 1._r8]
    nlevgrnd = size(my_zisoi)
    call clm_varcon_init( is_simple_buildtemp = .true.)
    zisoi(0) = 0._r8
    zisoi(1:nlevgrnd) = my_zisoi(:)
    col%nbedrock(bounds%begc:bounds%endc) = nbedrock_dummy_value
    
    deallocate(my_zisoi)
  end subroutine ground_b

  @Test
  subroutine test_HillslopeSoilThicknessProfile_linear(this)
    class(TestInit), intent(inout) :: this
    integer, allocatable :: nbedrock_expected(:)
    integer :: l, c

    l = bounds%begl

    call ground_a(bounds)
    col%active(bounds%begc:bounds%endc) = .true.
    col%is_hillslope_column(bounds%begc:bounds%endc) = .true.

    ! Get expected values
    ! Column 1 soil_depth_col = 8.5
    ! Column 2 soil_depth_col = 2.0
    allocate(nbedrock_expected(bounds%begc:bounds%endc))
    nbedrock_expected(lun%coli(l)) = nbedrock_dummy_value
    nbedrock_expected(lun%coli(l) + 1) = 3

    call HillslopeSoilThicknessProfile_linear(bounds, soil_depth_lowland, soil_depth_upland)

    @assertEqual(nbedrock_expected(lun%coli(l):lun%colf(l)), col%nbedrock(lun%coli(l):lun%colf(l)))

    deallocate(nbedrock_expected)

  end subroutine test_HillslopeSoilThicknessProfile_linear

  @Test
  subroutine test_HillslopeSoilThicknessProfile_linear_tooshallow(this)
    class(TestInit), intent(inout) :: this
    integer, allocatable :: nbedrock_expected(:)
    integer :: l, c

    l = bounds%begl

    call ground_b(bounds)
    col%active(bounds%begc:bounds%endc) = .true.
    col%is_hillslope_column(bounds%begc:bounds%endc) = .true.

    ! Get expected values
    ! Column 1 soil_depth_col = 8.5
    ! Column 2 soil_depth_col = 2.0; still too deep for ground_b()
    allocate(nbedrock_expected(bounds%begc:bounds%endc))
    nbedrock_expected(lun%coli(l)) = nbedrock_dummy_value
    nbedrock_expected(lun%coli(l) + 1) = nbedrock_dummy_value

    call HillslopeSoilThicknessProfile_linear(bounds, soil_depth_lowland, soil_depth_upland)

    @assertEqual(nbedrock_expected(lun%coli(l):lun%colf(l)), col%nbedrock(lun%coli(l):lun%colf(l)))

    deallocate(nbedrock_expected)

  end subroutine test_HillslopeSoilThicknessProfile_linear_tooshallow

  @Test
  subroutine test_HillslopeSoilThicknessProfile_linear_noslope(this)
    class(TestInit), intent(inout) :: this
    integer, allocatable :: nbedrock_expected(:)
    integer :: l, c
    real(r8) :: toosmall_distance

    l = bounds%begl

    call ground_a(bounds)
    col%active(bounds%begc:bounds%endc) = .true.
    col%is_hillslope_column(bounds%begc:bounds%endc) = .true.

    ! Get expected values, setting toosmall_distance to something high enough that the (abs(max_hill_dist - min_hill_dist) > toosmall_distance) conditional will fail, causing m = 0.0
    toosmall_distance = 100._r8
    ! Column 1 soil_depth_col = 2.0
    ! Column 2 soil_depth_col = 2.0
    allocate(nbedrock_expected(bounds%begc:bounds%endc))
    nbedrock_expected(lun%coli(l)) = 3
    nbedrock_expected(lun%coli(l) + 1) = 3

    call HillslopeSoilThicknessProfile_linear(bounds, soil_depth_lowland, soil_depth_upland, toosmall_distance_in=toosmall_distance)

    @assertEqual(nbedrock_expected(lun%coli(l):lun%colf(l)), col%nbedrock(lun%coli(l):lun%colf(l)))

    deallocate(nbedrock_expected)

  end subroutine test_HillslopeSoilThicknessProfile_linear_noslope

  @Test
  subroutine test_HillslopeSoilThicknessProfile_linear_inactive(this)
    class(TestInit), intent(inout) :: this
    integer, allocatable :: nbedrock_expected(:)
    integer :: l, c

    l = bounds%begl

    call ground_a(bounds)
    col%active(bounds%begc:bounds%endc) = .false.
    col%is_hillslope_column(bounds%begc:bounds%endc) = .true.

    ! Get expected values
    ! Column 1 soil_depth_col = 8.5
    ! Column 2 soil_depth_col = 2.0, but not active
    allocate(nbedrock_expected(bounds%begc:bounds%endc))
    nbedrock_expected(lun%coli(l)) = nbedrock_dummy_value
    nbedrock_expected(lun%coli(l) + 1) = nbedrock_dummy_value

    call HillslopeSoilThicknessProfile_linear(bounds, soil_depth_lowland, soil_depth_upland)

    @assertEqual(nbedrock_expected(lun%coli(l):lun%colf(l)), col%nbedrock(lun%coli(l):lun%colf(l)))

    deallocate(nbedrock_expected)

  end subroutine test_HillslopeSoilThicknessProfile_linear_inactive

  @Test
  subroutine test_HillslopeSoilThicknessProfile_linear_nohillslope(this)
    class(TestInit), intent(inout) :: this
    integer, allocatable :: nbedrock_expected(:)
    integer :: l, c

    l = bounds%begl

    call ground_a(bounds)
    col%active(bounds%begc:bounds%endc) = .true.
    col%is_hillslope_column(bounds%begc:bounds%endc) = .false.

    ! Get expected values
    ! Column 1 soil_depth_col = 8.5
    ! Column 2 soil_depth_col = 2.0, but not is_hillslope_column
    allocate(nbedrock_expected(bounds%begc:bounds%endc))
    nbedrock_expected(lun%coli(l)) = nbedrock_dummy_value
    nbedrock_expected(lun%coli(l) + 1) = nbedrock_dummy_value

    call HillslopeSoilThicknessProfile_linear(bounds, soil_depth_lowland, soil_depth_upland)

    @assertEqual(nbedrock_expected(lun%coli(l):lun%colf(l)), col%nbedrock(lun%coli(l):lun%colf(l)))

    deallocate(nbedrock_expected)

  end subroutine test_HillslopeSoilThicknessProfile_linear_nohillslope

end module test_hillslopehydrologyUtils
