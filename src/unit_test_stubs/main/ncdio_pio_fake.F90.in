module ncdio_pio

  ! This is a fake replacement for ncdio_pio. It does not interact with external files
  ! (or pio for that matter) at all! Instead it essentially provides setters and getters
  ! for module-level variables, in order to fake i/o.

  ! Currently it just contains 'read' functionality

  use shr_kind_mod, only : r8 => shr_kind_r8, i4=>shr_kind_i4
  use shr_assert_mod , only : shr_assert
  use shr_sys_mod, only : shr_sys_abort
  use ncdio_var, only : ncdio_var_type
  use ncdio_dim, only : ncdio_dim_type

  ! !PUBLIC TYPES:
  implicit none
  save
  private

  public :: file_desc_t
  public :: var_desc_t
  
  ! Fake replacement for file_desc_t. Instead of relating to a netcdf file, this fake
  ! object contains the data faking the file.
  type :: file_desc_t
     private
     ! all of the variables in the file (a linked list would be a more efficient
     ! implementation, but I'm going for simplicity over efficiency here)
     type(ncdio_var_type), allocatable :: vars(:)

     ! all of the dimensions in the file
     type(ncdio_dim_type), allocatable :: dims(:)
  end type file_desc_t

  ! Stub replacement for var_desc_t, to satisfy interfaces that need it
  type :: var_desc_t
  end type var_desc_t

  integer, parameter, public :: ncd_double = 1
  integer, parameter, public :: ncd_int = 2
  integer, parameter, public :: ncd_log = 3

  integer, parameter, public :: ncd_global = 1

  !
  ! !PUBLIC MEMBER FUNCTIONS:

  public :: check_var             ! determine if variable is on netcdf file
  public :: check_dim             ! determine if dimension is on netcdf file
  public :: check_var_or_dim      ! determine if variable or dimension is on netcdf file
  public :: ncd_io                ! do fake i/o (currently only set up to read)
  public :: ncd_inqvid            ! inquire on a variable id
  public :: ncd_set_var           ! set data on "file" for one variable
  public :: ncd_set_dim           ! set a single dimension on a "file"
  public :: ncd_reset_read_times  ! reset the "read_times" sensor variable for a given variable
  public :: ncd_get_read_times    ! get the value of the "read_times" sensor variable for a given variable
  public :: ncd_pio_openfile      ! stub: open file
  public :: ncd_pio_closefile     ! stub: close file
  public :: ncd_inqdid            ! stub: inquire dimension id
  public :: ncd_inqvdims          ! stub: inquire variable dimensions
  public :: ncd_inqvdlen          ! stub: inquire size of a dimension
  public :: ncd_inqvdname         ! stub: inquire name of a dimension
  public :: ncd_inqdlen           ! stub: inquire size of a dimension
  public :: ncd_defvar            ! define variables
  public :: ncd_inqfdims          ! stub: inquire file dimensions
  public :: ncd_inqnatts          ! stub: inquire number of global attributes
  public :: ncd_inqattname        ! stub: inquire attribute name
  public :: ncd_getatt            ! stub: get attribute
  public :: ncd_putatt            ! stub: put attribute
  public :: check_att             ! stub: check attribute

  interface file_desc_t
     module procedure constructor  ! initialize a new file_desc_t object
  end interface file_desc_t

  !
  ! !PRIVATE TYPES:

  integer, parameter :: var_not_found = -1  ! flag indicating variable wasn't found on file

  !
  ! !PRIVATE MEMBER FUNCTIONS:

  interface ncd_defvar
     module procedure ncd_defvar_bynf
     module procedure ncd_defvar_bygrid
  end interface
  
  private :: ncd_get_variable_index  ! return the index of a given variable

  interface ncd_io
     module procedure ncd_io_1d_double
     module procedure ncd_io_2d_double
     module procedure ncd_io_1d_int
     module procedure ncd_io_2d_int
     module procedure ncd_io_3d_double
     module procedure ncd_io_3d_int
     module procedure ncd_io_1d_logical

     !DIMS 0,1,2,3
     !TYPE int,double
     module procedure ncd_io_{DIMS}d_{TYPE}_glob

     !DIMS 0,1,2
     !TYPE text
     module procedure ncd_io_{DIMS}d_{TYPE}_glob

  end interface ncd_io

  interface ncd_getatt
     module procedure ncd_getatt_char
     module procedure ncd_getatt_int
  end interface ncd_getatt

  interface ncd_putatt
     module procedure ncd_putatt_int
     module procedure ncd_putatt_real
     module procedure ncd_putatt_char
  end interface ncd_putatt

contains

  ! ======================================================================
  ! Constructors
  ! ======================================================================

  !-----------------------------------------------------------------------
  type(file_desc_t) function constructor()
    !
    ! !DESCRIPTION:
    ! Create a new file_desc_t object
    !
    ! !ARGUMENTS:
    !
    ! !LOCAL VARIABLES:
    
    character(len=*), parameter :: subname = 'file_desc_t constructor'
    !-----------------------------------------------------------------------
    
    allocate(constructor%vars(0))
    allocate(constructor%dims(0))
    
  end function constructor
  
  
  ! ======================================================================
  ! Fakes for the actual ncdio_pio functionality
  ! ======================================================================

  !-----------------------------------------------------------------------
  ! DIMS 1,2
  subroutine ncd_io_{DIMS}d_double(varname, data, dim1name, flag, ncid, nt, readvar)
    !
    ! !DESCRIPTION:
    ! Fake for the non-glob form of ncd_io_{DIMS}d_double.
    !
    ! Note that this assumes we are working with a single time slice (I'm not sure
    ! whether the true ncd_io routines carry that assumption)
    !
    ! !ARGUMENTS:
    character(len=*)   , intent(in)    :: varname      ! variable name
    real(r8)           , pointer       :: data{DIMSTR} ! local decomposition data (no time dimension)
    character(len=*)   , intent(in)    :: dim1name     ! dimension name (unused for the fake)
    character(len=*)   , intent(in)    :: flag         ! 'read' or 'write' (currently only 'read' is supported)
    class(file_desc_t) , intent(inout) :: ncid         ! netcdf file id
    integer, optional  , intent(in)    :: nt           ! time sample index
    logical, optional  , intent(out)   :: readvar      ! true => variable is on dataset (read only)
    !
    ! !LOCAL VARIABLES:
    integer :: varindex  ! index of variable of interest

    character(len=*), parameter :: subname = 'ncd_io_{DIMS}d_double'
    !-----------------------------------------------------------------------

    call shr_assert(flag == 'read', subname//' ERROR: currently only the "read" flag is supported')

    ! nt is optional so code can build, but any code that is actually run in a unit
    ! test should be providing nt
    call shr_assert(present(nt), subname//' ERROR: currently, the nt optional argument must be present')
    
    varindex = ncd_get_variable_index(ncid, varname)

    if (varindex /= var_not_found) then
       call ncid%vars(varindex)%get_data(nt, data)
       if (present(readvar)) then
          readvar = .true.
       end if
    else  ! varindex == var_not_found
       if (present(readvar)) then
          readvar = .false.
       end if
    end if
       
  end subroutine ncd_io_{DIMS}d_double

  !-----------------------------------------------------------------------
  ! DIMS 1,2
  subroutine ncd_io_{DIMS}d_double_glob(varname, data, flag, ncid, readvar, nt, posNOTonfile)
    !
    ! !DESCRIPTION:
    ! Fake for the glob (global) form of ncd_io_{DIMS}d_double.
    !
    ! If nt isn't provided, it is assumed to be 1. Note that this fake implementation of
    ! ncdio_pio gives all variables a time dimension. For variables that are not really
    ! supposed to have a time dimension (as is the case for many global variables), it is
    ! appropriate to call this routine with nt absent.
    !
    ! !ARGUMENTS:
    character(len=*)   , intent(in)    :: varname      ! variable name
    real(r8)           , intent(inout) :: data{DIMSTR} ! read-in data (no time dimension)
    character(len=*)   , intent(in)    :: flag         ! 'read' or 'write' (currently only 'read' is supported)
    class(file_desc_t) , intent(inout) :: ncid         ! netcdf file id
    logical, optional  , intent(out)   :: readvar      ! true => variable is on dataset (read only)
    integer, optional  , intent(in)    :: nt           ! time sample index (if not present, assumed to be 1)
    logical, optional  , intent(in)    :: posNOTonfile ! position is NOT on this file (ignored)
    !
    ! !LOCAL VARIABLES:
    integer :: l_nt      ! local version of nt
    integer :: varindex  ! index of variable of interest

    character(len=*), parameter :: subname = 'ncd_io_{DIMS}d_double'
    !-----------------------------------------------------------------------

    call shr_assert(flag == 'read', subname//' ERROR: currently only the "read" flag is supported')

    if (present(nt)) then
       l_nt = nt
    else
       l_nt = 1
    end if

    varindex = ncd_get_variable_index(ncid, varname)

    if (varindex /= var_not_found) then
       call ncid%vars(varindex)%get_data(l_nt, data)
       if (present(readvar)) then
          readvar = .true.
       end if
    else  ! varindex == var_not_found
       if (present(readvar)) then
          readvar = .false.
       end if
    end if

  end subroutine ncd_io_{DIMS}d_double_glob


  !-----------------------------------------------------------------------
  subroutine ncd_inqvid(ncid, name, varid, vardesc, readvar)
    ! Fake to inquire on a variable ID
    !
    ! Unlike the true implementation, this one never aborts. It is meant to be called
    ! with readvar present (in which case the true implementation doesn't abort, either.)
    !
    ! !ARGUMENTS:
    class(file_desc_t), intent(inout) :: ncid      ! netcdf file id
    character(len=*)  , intent(in)    :: name      ! variable name
    integer           , intent(out)   :: varid     ! variable id
    type(Var_desc_t)  , intent(out)   :: vardesc   ! variable descriptor (not set in this implementation)
    logical, optional , intent(out)   :: readvar   ! does variable exist
    !-----------------------------------------------------------------------

    varid = ncd_get_variable_index(ncid, name)

    if (present(readvar)) then
       if (varid /= var_not_found) then
          readvar = .true.
       else
          readvar = .false.
       end if
    end if
  end subroutine ncd_inqvid

  !-----------------------------------------------------------------------
  subroutine check_var(ncid, varname, readvar, vardesc, print_err)
    !
    ! !DESCRIPTION:
    ! Fake to check if variable is on netcdf file
    !
    ! !ARGUMENTS:
    class(file_desc_t) , intent(inout)          :: ncid      ! PIO file descriptor
    character(len=*)   , intent(in)             :: varname   ! Varible name to check
    logical            , intent(out)            :: readvar   ! If variable exists or not
    type(Var_desc_t)   , optional, intent(out)  :: vardesc   ! Output variable descriptor (not set in this implementation)
    logical            , optional, intent(in)   :: print_err ! If should print about error (ignored in this implementation)
    !
    ! !LOCAL VARIABLES:
    integer :: varid
    type(Var_desc_t) :: vardesc_local

    character(len=*), parameter :: subname = 'check_var'
    !-----------------------------------------------------------------------

    call ncd_inqvid(ncid, varname, varid, vardesc_local, readvar)

  end subroutine check_var

  !-----------------------------------------------------------------------
  subroutine check_dim(ncid, dimname, dimexist)
    !
    ! Fake to check if dimension is on netcdf file
    !
    ! !ARGUMENTS:
    class(file_desc_t) , intent(inout) :: ncid     ! PIO file descriptor
    character(len=*)   , intent(in)    :: dimname  ! dimension name
    logical            , intent(out)   :: dimexist ! if this dimension exists or not
    !
    ! !LOCAL VARIABLES:
    integer :: dimid

    character(len=*), parameter :: subname = 'check_dim'
    !-----------------------------------------------------------------------

    call ncd_inqdid(ncid, dimname, dimid, dimexist)

  end subroutine check_dim

  !-----------------------------------------------------------------------
  subroutine check_var_or_dim(ncid, name, is_dim, exists)
    !
    ! !DESCRIPTION:
    ! Fake to check if variable or dimension is on netcdf file
    !
    ! !ARGUMENTS:
    class(file_desc_t) , intent(inout) :: ncid   ! PIO file descriptor
    character(len=*)   , intent(in)    :: name   ! variable or dimension name to check
    logical            , intent(in)    :: is_dim ! if true, check for dimension; if false, check for variable
    logical            , intent(out)   :: exists ! whether the given variable or dimension exists on file
    !
    ! !LOCAL VARIABLES:

    character(len=*), parameter :: subname = 'check_var_or_dim'
    !-----------------------------------------------------------------------

    if (is_dim) then
       call check_dim(ncid, name, exists)
    else
       call check_var(ncid, name, exists, print_err=.false.)
    end if

  end subroutine check_var_or_dim


  !-----------------------------------------------------------------------
  subroutine ncd_inqdid(ncid, name, dimid, dimexist)
    !
    ! !DESCRIPTION:
    ! Fake to inquire on a dimension ID
    !
    ! Unlike the true implementation, this one never aborts. It is meant to be called
    ! with dimexist present (in which case the true implementation doesn't abort, either.)
    !
    ! !ARGUMENTS:
    class(file_desc_t),intent(inout) :: ncid   ! netcdf file id
    character(len=*) , intent(in) :: name      ! dimension name
    integer          , intent(out):: dimid     ! dimension id
    logical,optional , intent(out):: dimexist  ! if this dimension exists or not

    dimid = ncd_get_dimension_index(ncid, name)

    if (present(dimexist)) then
       if (dimid /= var_not_found) then
          dimexist = .true.
       else
          dimexist = .false.
       end if
    end if

  end subroutine ncd_inqdid

  !-----------------------------------------------------------------------
  subroutine ncd_inqdlen(ncid, dimid, len, name)
    !
    ! !DESCRIPTION:
    ! Fake to inquire on a dimension length.
    !
    ! Returns -1 if the given dimension isn't found. (This differs from the behavior of
    ! the true ncd_inqdlen, which I think aborts if the given dimension isn't found.)
    !
    ! As in the real implementation: If 'name' is absent, then 'dimid' is used as an
    ! input: the dimension id to inquire.  If 'name' is present, then it gives the name of
    ! the dimension to inquire, and 'dimid' is set to the ID associated with this
    ! dimension.
    !
    ! !ARGUMENTS:
    class(file_desc_t), intent(inout) :: ncid       ! netcdf file id
    integer           , intent(inout) :: dimid      ! dimension id
    integer           , intent(out)   :: len        ! dimension len
    character(len=*), optional, intent(in) :: name  ! dimension name
    !
    ! !LOCAL VARIABLES:
    logical :: dimexist
    !-----------------------------------------------------------------------

    len = -1

    if (present(name)) then
       call ncd_inqdid(ncid, name, dimid, dimexist = dimexist)
       if (.not. dimexist) then
          return
       end if
    end if

    if (dimid >= 1 .and. dimid <= size(ncid%dims)) then
       len = ncid%dims(dimid)%get_dimlen()
    end if

  end subroutine ncd_inqdlen

  ! ======================================================================
  ! Stubs for the actual ncdio_pio functionality (do nothing)
  ! ======================================================================

  !-----------------------------------------------------------------------
  subroutine ncd_defvar_bynf(ncid, varname, xtype, ndims, dimid, varid, &
       long_name, units, cell_method, missing_value, fill_value, &
       imissing_value, ifill_value, comment, flag_meanings, &
       flag_values, nvalid_range )
    !
    ! !DESCRIPTION:
    !  Define a netcdf variable
    !
    ! !ARGUMENTS:
    class(file_desc_t) , intent(inout) :: ncid                  ! netcdf file id
    character(len=*)   , intent(in)  :: varname                 ! variable name
    integer            , intent(in)  :: xtype                   ! external type
    integer            , intent(in)  :: ndims                   ! number of dims
    integer            , intent(inout) :: varid                 ! returned var id
    integer            , intent(in), optional :: dimid(:)       ! dimids
    character(len=*)   , intent(in), optional :: long_name      ! attribute
    character(len=*)   , intent(in), optional :: units          ! attribute
    character(len=*)   , intent(in), optional :: cell_method    ! attribute
    character(len=*)   , intent(in), optional :: comment        ! attribute
    character(len=*)   , intent(in), optional :: flag_meanings(:) ! attribute
    real(r8)           , intent(in), optional :: missing_value  ! attribute for real
    real(r8)           , intent(in), optional :: fill_value     ! attribute for real
    integer            , intent(in), optional :: imissing_value ! attribute for int
    integer            , intent(in), optional :: ifill_value    ! attribute for int
    integer            , intent(in), optional :: flag_values(:)  ! attribute for int
    integer            , intent(in), optional :: nvalid_range(2)  ! attribute for int

    ! Do nothing
    call shr_sys_abort( 'ncd_defvar_bynf should not be actually called for unit tests' )

  end subroutine ncd_defvar_bynf

  !-----------------------------------------------------------------------
  subroutine ncd_defvar_bygrid(ncid, varname, xtype, &
       dim1name, dim2name, dim3name, dim4name, dim5name, &
       long_name, units, cell_method, missing_value, fill_value, &
       imissing_value, ifill_value, switchdim, comment, &
       flag_meanings, flag_values, nvalid_range )
    !
    ! !DESCRIPTION:
    !  Define a netcdf variable
    !
    ! !ARGUMENTS:
    class(file_desc_t) , intent(inout) :: ncid                 ! netcdf file id
    character(len=*)   , intent(in)  :: varname                 ! variable name
    integer            , intent(in)  :: xtype                   ! external type
    character(len=*)   , intent(in), optional :: dim1name       ! dimension name
    character(len=*)   , intent(in), optional :: dim2name       ! dimension name
    character(len=*)   , intent(in), optional :: dim3name       ! dimension name
    character(len=*)   , intent(in), optional :: dim4name       ! dimension name
    character(len=*)   , intent(in), optional :: dim5name       ! dimension name
    character(len=*)   , intent(in), optional :: long_name      ! attribute
    character(len=*)   , intent(in), optional :: units          ! attribute
    character(len=*)   , intent(in), optional :: cell_method    ! attribute
    character(len=*)   , intent(in), optional :: comment        ! attribute
    character(len=*)   , intent(in), optional :: flag_meanings(:) ! attribute
    real(r8)           , intent(in), optional :: missing_value  ! attribute for real
    real(r8)           , intent(in), optional :: fill_value     ! attribute for real
    integer            , intent(in), optional :: imissing_value ! attribute for int
    integer            , intent(in), optional :: ifill_value    ! attribute for int
    logical            , intent(in), optional :: switchdim      ! true=> permute dim1 and dim2 for output
    integer            , intent(in), optional :: flag_values(:)  ! attribute for int
    integer            , intent(in), optional :: nvalid_range(2)  ! attribute for int

    ! Do nothing
    call shr_sys_abort( 'ncd_defvar_bygrid should not be actually called for unit tests' )

  end subroutine ncd_defvar_bygrid


  !-----------------------------------------------------------------------
  subroutine ncd_pio_openfile(file, fname, mode)
    !
    ! !DESCRIPTION:
    ! Stub replacement: Open a NetCDF PIO file
    !
    ! !ARGUMENTS:
    class(file_desc_t) , intent(inout) :: file   ! Output PIO file handle
    character(len=*)   , intent(in)    :: fname  ! Input filename to open
    integer            , intent(in)    :: mode   ! file mode

  end subroutine ncd_pio_openfile

  !-----------------------------------------------------------------------
  subroutine ncd_pio_closefile(file)
    !
    ! !DESCRIPTION:
    ! Stub replacement: Close a NetCDF PIO file
    !
    ! !ARGUMENTS:
    class(file_desc_t), intent(inout) :: file   ! PIO file handle to close

  end subroutine ncd_pio_closefile

  !TYPE int,logical
  subroutine ncd_io_1d_{TYPE}(varname, data, dim1name, flag, ncid, nt, readvar, cnvrtnan2fill)
    !
    ! !DESCRIPTION:
    ! Stub replacement: netcdf I/O for 1d 
    !
    ! !ARGUMENTS:
    class(file_desc_t), intent(inout)        :: ncid          ! netcdf file id
    character(len=*) , intent(in)            :: flag          ! 'read' or 'write'
    character(len=*) , intent(in)            :: varname       ! variable name
    {VTYPE}          , pointer               :: data(:)       ! local decomposition data
    character(len=*) , intent(in)            :: dim1name      ! dimension name
    integer          , optional, intent(in)  :: nt            ! time sample index
    logical          , optional, intent(out) :: readvar       ! true => variable is on initial dataset (read only)
    logical          , optional, intent(in)  :: cnvrtnan2fill ! true => convert any NaN's to _FillValue (spval)
  
    if (present(readvar)) then
       readvar = .false.
    end if

  end subroutine ncd_io_1d_{TYPE}

  subroutine ncd_io_2d_int(varname, data, dim1name, lowerb2, upperb2, &
       flag, ncid, nt, readvar, switchdim, cnvrtnan2fill)
    !
    ! !DESCRIPTION:
    ! Stub replacement: netcdf I/O for 2d int
    !
    ! !ARGUMENTS:
    class(file_desc_t), intent(inout) :: ncid         ! netcdf file id
    character(len=*) , intent(in)  :: flag            ! 'read' or 'write'
    character(len=*) , intent(in)  :: varname         ! variable name
    integer          , pointer     :: data(:,:)       ! local decomposition input data
    character(len=*) , intent(in)  :: dim1name        ! dimension 1 name
    integer, optional, intent(in)  :: nt              ! time sample index
    integer, optional, intent(in)  :: lowerb2,upperb2 ! lower and upper bounds of second dimension
    logical, optional, intent(out) :: readvar         ! true => variable is on initial dataset (read only)
    logical, optional, intent(in)  :: switchdim       ! true=> permute dim1 and dim2 for output
    logical, optional, intent(in)  :: cnvrtnan2fill   ! true => convert any NaN's to _FillValue (spval)

    if (present(readvar)) then
       readvar = .false.
    end if
  end subroutine ncd_io_2d_int

  !TYPE int,double
  subroutine ncd_io_3d_{TYPE}(varname, data, dim1name, flag, ncid, nt, readvar)
    !
    ! !DESCRIPTION:
    ! Stub: Netcdf i/o of 3d 
    !
    ! !ARGUMENTS:
    class(file_desc_t), intent(inout) :: ncid         ! netcdf file id
    character(len=*) , intent(in)  :: flag            ! 'read' or 'write'
    character(len=*) , intent(in)  :: varname         ! variable name
    {VTYPE}          , pointer     :: data(:,:,:)     ! local decomposition input data
    character(len=*) , intent(in)  :: dim1name        ! dimension 1 name
    integer, optional, intent(in)  :: nt              ! time sample index
    logical, optional, intent(out) :: readvar         ! true => variable is on initial dataset (read only)

    if (present(readvar)) then
       readvar = .false.
    end if
  end subroutine ncd_io_3d_{TYPE}

  !------------------------------------------------------------------------
  !DIMS 0,1,2,3
  subroutine ncd_io_{DIMS}d_int_glob(varname, data, flag, ncid, readvar, nt, posNOTonfile)
    !
    ! !DESCRIPTION:
    ! Stub replacement: netcdf I/O of global variable
    !
    ! !ARGUMENTS:
    class(file_desc_t),         intent(inout) :: ncid         ! netcdf file id
    character(len=*),           intent(in)    :: flag         ! 'read' or 'write'
    character(len=*),           intent(in)    :: varname      ! variable name
    integer         ,           intent(inout) :: data{DIMSTR} ! raw data
    logical         , optional, intent(out)   :: readvar      ! was var read?
    integer         , optional, intent(in)    :: nt           ! time sample index
    logical         , optional, intent(in)    :: posNOTonfile ! position is NOT on this file

    if (present(readvar)) then
       readvar = .false.
    end if

  end subroutine ncd_io_{DIMS}d_int_glob

  !------------------------------------------------------------------------
  !DIMS 0,3
  subroutine ncd_io_{DIMS}d_double_glob(varname, data, flag, ncid, readvar, nt, posNOTonfile)
    !
    ! !DESCRIPTION:
    ! Stub replacement: netcdf I/O of global variable
    !
    ! !ARGUMENTS:
    class(file_desc_t),         intent(inout) :: ncid         ! netcdf file id
    character(len=*),           intent(in)    :: flag         ! 'read' or 'write'
    character(len=*),           intent(in)    :: varname      ! variable name
    real(r8)        ,           intent(inout) :: data{DIMSTR} ! raw data
    logical         , optional, intent(out)   :: readvar      ! was var read?
    integer         , optional, intent(in)    :: nt           ! time sample index
    logical         , optional, intent(in)    :: posNOTonfile ! position is NOT on this file

    if (present(readvar)) then
       readvar = .false.
    end if

  end subroutine ncd_io_{DIMS}d_double_glob

  !------------------------------------------------------------------------
  !DIMS 0,1,2
  !TYPE text
  subroutine ncd_io_{DIMS}d_{TYPE}_glob(varname, data, flag, ncid, readvar, nt, posNOTonfile)
    !
    ! !DESCRIPTION:
    ! Stub replacement: netcdf I/O of global variable
    !
    ! !ARGUMENTS:
    class(file_desc_t),         intent(inout) :: ncid         ! netcdf file id
    character(len=*),           intent(in)    :: flag         ! 'read' or 'write'
    character(len=*),           intent(in)    :: varname      ! variable name
    {VTYPE}         ,           intent(inout) :: data{DIMSTR} ! raw data
    logical         , optional, intent(out)   :: readvar      ! was var read?
    integer         , optional, intent(in)    :: nt           ! time sample index
    logical         , optional, intent(in)    :: posNOTonfile ! position is NOT on this file

    if (present(readvar)) then
       readvar = .false.
    end if
  end subroutine ncd_io_{DIMS}d_{TYPE}_glob

  !-----------------------------------------------------------------------
  subroutine ncd_inqvdims(ncid,ndims,vardesc)
    !
    ! !DESCRIPTION:
    ! Stub replacement for ncd_inqvdims. This does nothing, but just satisfies the
    ! interface for ncd_inqvdims.
    !
    ! !ARGUMENTS:
    class(file_desc_t), intent(in)   :: ncid      ! netcdf file id
    integer           , intent(out)  :: ndims     ! variable ndims
    type(Var_desc_t)  , intent(inout):: vardesc   ! variable descriptor
    !
    ! !LOCAL VARIABLES:

    character(len=*), parameter :: subname = 'ncd_inqvdims'
    !-----------------------------------------------------------------------

    ndims = -1

  end subroutine ncd_inqvdims
  
  !-----------------------------------------------------------------------
  subroutine ncd_inqvdlen(ncid,varname,dimnum,dlen,err_code)
    !
    ! !DESCRIPTION:
    ! Stub replacement for ncd_inqvdlen_byName (note that we currently do not support
    ! ncd_inqvdlen_byDesc). This does nothing, but just satisfies the interface for
    ! ncd_inqvdlen. 
    !
    ! !ARGUMENTS:
    class(file_desc_t),intent(inout) :: ncid      ! netcdf file id
    character(len=*)  ,intent(in)    :: varname   ! variable name
    integer           ,intent(in)    :: dimnum    ! dimension number to query
    integer           ,intent(out)   :: dlen      ! length of the dimension
    integer           ,intent(out)   :: err_code  ! error code (0 means no error)

    dlen = 0
    err_code = 0

  end subroutine ncd_inqvdlen

  !-----------------------------------------------------------------------
  subroutine ncd_inqvdname(ncid,varname,dimnum,dname,err_code)
    !
    ! !DESCRIPTION:
    ! Stub replacement for ncd_inqvdname_byName (note that we currently do not support
    ! ncd_inqvdlen_byDesc). This does nothing, but just satisfies the interface for
    ! ncd_inqvdname.
    !
    ! !ARGUMENTS:
    class(file_desc_t),intent(inout) :: ncid      ! netcdf file id
    character(len=*)  ,intent(in)    :: varname   ! variable name
    integer           ,intent(in)    :: dimnum    ! dimension number to query
    character(len=*)  ,intent(out)   :: dname     ! name of the dimension
    integer           ,intent(out)   :: err_code  ! error code (0 means no error)
    !
    ! !LOCAL VARIABLES:

    character(len=*), parameter :: subname = 'ncd_inqvdname'
    !-----------------------------------------------------------------------

    dname = ' '
    err_code = 0

  end subroutine ncd_inqvdname

  !-----------------------------------------------------------------------
  subroutine ncd_inqfdims(ncid, isgrid2d, ni, nj, ns)
    !
    ! !DESCRIPTION:
    ! Stub replacement for ncd_inqfdims. This does nothing, but just satisfies the
    ! interface.
    !
    ! !ARGUMENTS:
    class(file_desc_t), intent(inout):: ncid
    logical           , intent(out)  :: isgrid2d
    integer           , intent(out)  :: ni
    integer           , intent(out)  :: nj
    integer           , intent(out)  :: ns

    isgrid2d = .true.
    ni = 1
    nj = 1
    ns = 1
  end subroutine ncd_inqfdims

  !-----------------------------------------------------------------------
  subroutine ncd_inqnatts(ncid, nattributes)
    !
    ! !DESCRIPTION:
    ! Stub replacement for ncd_inqnatts. This just returns 0.
    !
    ! !ARGUMENTS:
    class(file_desc_t), intent(inout) :: ncid ! netcdf file id
    integer           , intent(out)   :: nattributes ! number of global attributes
    !
    ! !LOCAL VARIABLES:

    character(len=*), parameter :: subname = 'ncd_inqnatts'
    !-----------------------------------------------------------------------

    nattributes = 0

  end subroutine ncd_inqnatts

  !-----------------------------------------------------------------------
  subroutine ncd_inqattname(ncid, varid, attnum, attname)
    !
    ! !DESCRIPTION:
    ! Stub replacement for ncd_inqattname. This just returns an empty string.
    !
    ! !ARGUMENTS:
    class(file_desc_t) , intent(inout) :: ncid   ! netcdf file id
    integer            , intent(in)    :: varid  ! netcdf var id (can be ncd_global)
    integer            , intent(in)    :: attnum ! attribute number
    character(len=*)   , intent(out) :: attname
    !
    ! !LOCAL VARIABLES:

    character(len=*), parameter :: subname = 'ncd_inqattname'
    !-----------------------------------------------------------------------

    attname = ' '

  end subroutine ncd_inqattname


  !-----------------------------------------------------------------------
  subroutine ncd_getatt_char(ncid,varid,attrib,value)
    !
    ! !DESCRIPTION:
    ! Stub replacement for ncd_getatt_char. This does nothing, but just satisfies the
    ! interface.
    !
    ! !ARGUMENTS:
    class(file_desc_t),intent(inout) :: ncid      ! netcdf file id
    integer           ,intent(in)    :: varid     ! netcdf var id
    character(len=*)  ,intent(in)    :: attrib    ! netcdf attrib
    character(len=*)  ,intent(out)   :: value     ! netcdf attrib value
    !-----------------------------------------------------------------------
    
    ! Do nothing
  end subroutine ncd_getatt_char

  !-----------------------------------------------------------------------
  subroutine ncd_getatt_int(ncid,varid,attrib,value)
    !
    ! !DESCRIPTION:
    ! Stub replacement for ncd_getatt_int. This does nothing, but just satisfies the
    ! interface.
    !
    ! !ARGUMENTS:
    class(file_desc_t),intent(inout) :: ncid      ! netcdf file id
    integer           ,intent(in)    :: varid     ! netcdf var id
    character(len=*)  ,intent(in)    :: attrib    ! netcdf attrib
    integer           ,intent(out)   :: value     ! netcdf attrib value
    !-----------------------------------------------------------------------
    
    ! Do nothing
  end subroutine ncd_getatt_int


  !-----------------------------------------------------------------------
  subroutine ncd_putatt_int(ncid,varid,attrib,value,xtype)
    !
    ! !DESCRIPTION:
    ! Stub replacement for ncd_putatt_int. This does nothing, but just satisfies the
    ! interface.
    !
    ! !ARGUMENTS:
    class(file_desc_t),intent(inout) :: ncid      ! netcdf file id
    integer           ,intent(in)    :: varid     ! netcdf var id
    character(len=*)  ,intent(in)    :: attrib    ! netcdf attrib
    integer           ,intent(in)    :: value     ! netcdf attrib value
    integer,optional  ,intent(in)    :: xtype     ! netcdf data type
    !
    ! !LOCAL VARIABLES:
    integer :: status
    !-----------------------------------------------------------------------

    ! Do nothing
  end subroutine ncd_putatt_int

  !-----------------------------------------------------------------------
  subroutine ncd_putatt_char(ncid,varid,attrib,value,xtype)
    !
    ! !DESCRIPTION:
    ! Stub replacement for ncd_putatt_char. This does nothing, but just satisfies the
    ! interface.
    !
    ! !ARGUMENTS:
    class(file_desc_t),intent(inout) :: ncid      ! netcdf file id
    integer           ,intent(in)    :: varid     ! netcdf var id
    character(len=*)  ,intent(in)    :: attrib    ! netcdf attrib
    character(len=*)  ,intent(in)    :: value     ! netcdf attrib value
    integer,optional  ,intent(in)    :: xtype     ! netcdf data type
    !
    ! !LOCAL VARIABLES:
    integer :: status
    !-----------------------------------------------------------------------

    ! Do nothing
  end subroutine ncd_putatt_char

  !-----------------------------------------------------------------------
  subroutine ncd_putatt_real(ncid,varid,attrib,value,xtype)
    !
    ! !DESCRIPTION:
    ! Stub replacement for ncd_putatt_real. This does nothing, but just satisfies the
    ! interface.
    !
    ! !ARGUMENTS:
    class(file_desc_t),intent(inout) :: ncid      ! netcdf file id
    integer           ,intent(in)    :: varid     ! netcdf var id
    character(len=*)  ,intent(in)    :: attrib    ! netcdf attrib
    real(r8)          ,intent(in)    :: value     ! netcdf attrib value
    integer,optional  ,intent(in)    :: xtype     ! netcdf data type
    !
    ! !LOCAL VARIABLES:
    integer :: status
    !-----------------------------------------------------------------------

    ! Do nothing
  end subroutine ncd_putatt_real


  !-----------------------------------------------------------------------
  subroutine check_att(ncid, varid, attrib, att_found)
    !
    ! !DESCRIPTION:
    ! Stub replacement for check_att. This just returns false.
    !
    ! !ARGUMENTS:
    class(file_desc_t),intent(inout) :: ncid      ! netcdf file id
    integer           ,intent(in)    :: varid     ! netcdf var id
    character(len=*)  ,intent(in)    :: attrib    ! netcdf attrib
    logical           ,intent(out)   :: att_found ! true if the attribute was found
    !
    ! !LOCAL VARIABLES:

    character(len=*), parameter :: subname = 'check_att'
    !-----------------------------------------------------------------------

    att_found = .false.

  end subroutine check_att


  ! ======================================================================
  ! Public routines to aid unit testing, specific to this fake replacement
  ! ======================================================================

  !-----------------------------------------------------------------------
  subroutine ncd_set_var(ncid, varname, data, data_shape)
    !
    ! !DESCRIPTION:
    ! Set values for a single variable on this netcdf 'file'.
    !
    ! Regardless of the true dimensionality of the undelying data, this should be called
    ! with a 2-d data variable. The 2nd dim is time, 1st is everything else compressed
    ! into a single dimension. 'data_shape' then gives the true shape of the underlying
    ! data, WITHOUT the underlying time dimension
    !
    ! !USES:
    !
    ! !ARGUMENTS:
    class(file_desc_t) , intent(inout) :: ncid          ! netcdf 'file' into which we should add this variable
    character(len=*)   , intent(in)    :: varname       ! variable name
    real(r8)           , intent(in)    :: data(:,:)     ! the data (see notes above)
    integer            , intent(in)    :: data_shape(:) ! true shape of the underlying data, WITHOUT the time dimension
    !
    ! !LOCAL VARIABLES:
    type(ncdio_var_type) :: newvar  ! the new variable
    type(ncdio_var_type), allocatable :: new_var_list(:)

    character(len=*), parameter :: subname = 'ncd_set_var'
    !-----------------------------------------------------------------------

    ! If a variable with this name is already on the file, stop with an error message
    call shr_assert(ncd_get_variable_index(ncid, varname) == var_not_found, &
         subname//' ERROR: cannot set a variable already on file - '//trim(varname))
    
    newvar = ncdio_var_type(varname, data, data_shape)

    ! Add newvar to the list.
    !
    ! In theory, I think I should be able to do this, but it isn't working, at least with
    ! the intel compiler v. 13 on yellowstone:
    ! ncid%vars = [ncid%vars, newvar]
    !
    ! Update: the above also doesn't work with intel v. 15 on hobart or intel v. 17 on
    ! cheyenne.
    !
    ! So I'm using an inefficient method, but that's okay for these purposes
    allocate(new_var_list(size(ncid%vars) + 1))
    new_var_list(1:size(ncid%vars)) = ncid%vars(:)
    new_var_list(size(ncid%vars)+1) = newvar
    call move_alloc(new_var_list, ncid%vars)

  end subroutine ncd_set_var

  !-----------------------------------------------------------------------
  subroutine ncd_set_dim(ncid, dimname, dimlen)
    !
    ! !DESCRIPTION:
    ! Set a single dimension on this netcdf 'file'.
    !
    ! !ARGUMENTS:
    class(file_desc_t) , intent(inout) :: ncid          ! netcdf 'file' into which we should add this dimension
    character(len=*)   , intent(in)    :: dimname       ! dimension name
    integer            , intent(in)    :: dimlen        ! dimension length
    !
    ! !LOCAL VARIABLES:
    type(ncdio_dim_type) :: newdim  ! the new dimension
    type(ncdio_dim_type), allocatable :: new_dim_list(:)

    character(len=*), parameter :: subname = 'ncd_set_dim'
    !-----------------------------------------------------------------------

    ! If a dimension with this name is already on the file, stop with an error message
    call shr_assert(ncd_get_dimension_index(ncid, dimname) == var_not_found, &
       subname//' ERROR: cannot set a dimension already on file - '//trim(dimname))

    newdim = ncdio_dim_type(dimname, dimlen)

    ! Add newdim to the list.
    !
    ! See comment in ncd_set_var for why we use this more complex method.
    allocate(new_dim_list(size(ncid%dims) + 1))
    new_dim_list(1:size(ncid%dims)) = ncid%dims(:)
    new_dim_list(size(ncid%dims)+1) = newdim
    call move_alloc(new_dim_list, ncid%dims)

  end subroutine ncd_set_dim


  !-----------------------------------------------------------------------
  subroutine ncd_reset_read_times(ncid, varname)
    !
    ! !DESCRIPTION:
    ! Reset the 'read_times' flag for a given variable. This provides a starting point
    ! for a future call to ncd_get_read_times - i.e., if ncd_get_read_times were called
    ! immediately after ncd_reset_read_times, it would always be false.
    !
    ! !ARGUMENTS:
    class(file_desc_t) , intent(inout) :: ncid    ! netcdf 'file' to operate on
    character(len=*)   , intent(in)    :: varname ! variable name
    !
    ! !LOCAL VARIABLES:
    integer :: varindex  ! index of variable of interest
    
    character(len=*), parameter :: subname = 'ncd_reset_read_times'
    !-----------------------------------------------------------------------

    varindex = ncd_get_variable_index(ncid, varname)

    call shr_assert(varindex /= var_not_found, subname//' ERROR: could not find variable '//trim(varname))

    call ncid%vars(varindex)%reset_read_times()
    
  end subroutine ncd_reset_read_times


  !-----------------------------------------------------------------------
  function ncd_get_read_times(ncid, varname)
    !
    ! !DESCRIPTION:
    ! Return the value of 'read_times' for all times. This tells you whether this variable
    ! has been 'read' for each time index since the last call to reset_read_times (or
    ! since initialization, if reset_read_times hasn't been called).
    !
    ! !ARGUMENTS:
    logical, allocatable :: ncd_get_read_times(:)  ! function result
    class(file_desc_t) , intent(in) :: ncid    ! netcdf 'file' to operate on
    character(len=*)   , intent(in) :: varname ! variable name
    !
    ! !LOCAL VARIABLES:
    integer :: varindex  ! index of variable of interest
    
    character(len=*), parameter :: subname = 'ncd_get_read_times'
    !-----------------------------------------------------------------------
    
    varindex = ncd_get_variable_index(ncid, varname)
    
    call shr_assert(varindex /= var_not_found, subname//' ERROR: could not find variable '//trim(varname))

    ncd_get_read_times = ncid%vars(varindex)%get_read_times()

  end function ncd_get_read_times


  ! ======================================================================
  ! Private routines
  ! ======================================================================

  !-----------------------------------------------------------------------
  integer function ncd_get_variable_index(ncid, varname)
    ! Return the index of the variable whose name is 'varname' in the ncid structure. If
    ! varname is not present, return var_not_found
    class(file_desc_t), intent(in) :: ncid
    character(len=*), intent(in) :: varname  ! variable name to find

    integer :: index
    logical :: found

    found = .false.
    index = 0
    do while((index < size(ncid%vars)) .and. (.not. found))
       index = index + 1
       if (ncid%vars(index)%get_varname() == varname) then
          found = .true.
       end if
    end do

    if (found) then
       ncd_get_variable_index = index
    else
       ncd_get_variable_index = var_not_found
    end if
  end function ncd_get_variable_index

  !-----------------------------------------------------------------------
  integer function ncd_get_dimension_index(ncid, dimname)
    ! Return the index of the dimension whose name is 'dimname' in the ncid structure. If
    ! dimname is not present, return var_not_found
    class(file_desc_t), intent(in) :: ncid
    character(len=*), intent(in) :: dimname  ! dimension name to find

    integer :: index
    logical :: found

    found = .false.
    index = 0
    do while((index < size(ncid%dims)) .and. (.not. found))
       index = index + 1
       if (ncid%dims(index)%get_dimname() == dimname) then
          found = .true.
       end if
    end do

    if (found) then
       ncd_get_dimension_index = index
    else
       ncd_get_dimension_index = var_not_found
    end if
  end function ncd_get_dimension_index

end module ncdio_pio
