module restUtilMod

  ! This is a stub for restUtilMod. Currently all it does is provide empty
  ! implementations for restartvar, to satisfy the interface that is expected throughout
  ! the CLM code

  use shr_kind_mod, only: r8=>shr_kind_r8, r4 => shr_kind_r4, i4=>shr_kind_i4
  use ncdio_pio, only : file_desc_t

  implicit none
  private
  save

  interface restartvar
     !DIMS 0,1,2
     !TYPE text,int,double
     module procedure restartvar_{DIMS}d_{TYPE}
     !TYPE int,double
     module procedure restartvar_2d_{TYPE}_bounds
  end interface restartvar

  public :: restartvar

  public :: RestartExcessIceIssue

  public :: set_missing_from_template

  public :: CallRestartvarDimOK

contains

  !-----------------------------------------------------------------------
  !DIMS 0
  !TYPE text,int,double
  subroutine restartvar_{DIMS}d_{TYPE}(&
       ncid, flag, varname, xtype, &
       long_name, units, interpinic_flag, data, readvar, &
       comment, flag_meanings, missing_value, fill_value, &
       imissing_value, ifill_value, flag_values, nvalid_range )

    !----------------------------------------------------
    ! Arguments
    type(file_desc_t) , intent(inout)        :: ncid             ! netcdf file id
    character(len=*)  , intent(in)           :: flag             ! 'read' or 'write'
    character(len=*)  , intent(in)           :: varname          ! variable name
    integer           , intent(in)           :: xtype            ! netcdf data type
    character(len=*)  , intent(in)           :: long_name        ! long name for variable
    character(len=*)  , intent(in)           :: interpinic_flag  ! interpolate variable using interpinic
    {VTYPE}           , intent(inout)        :: data{DIMSTR}
    logical           , intent(out)          :: readvar          ! was var read?
    character(len=*)  , intent(in), optional :: units            ! long name for variable
    character(len=*)  , intent(in), optional :: comment          ! attribute
    character(len=*)  , intent(in), optional :: flag_meanings(:) ! attribute
    real(r8)          , intent(in), optional :: missing_value    ! attribute for real
    real(r8)          , intent(in), optional :: fill_value       ! attribute for real
    integer           , intent(in), optional :: imissing_value   ! attribute for int
    integer           , intent(in), optional :: ifill_value      ! attribute for int
    integer           , intent(in), optional :: flag_values(:)   ! attribute for int
    integer           , intent(in), optional :: nvalid_range(2)  ! attribute for int
    ! 

    readvar = .false.

  end subroutine restartvar_{DIMS}d_{TYPE}

  !-----------------------------------------------------------------------
  !DIMS 1,2
  !TYPE text,int,double
  subroutine restartvar_{DIMS}d_{TYPE}(&
       ncid, flag, varname, xtype, dim1name, &
       long_name, units, interpinic_flag, data, readvar, &
       comment, flag_meanings, missing_value, fill_value, &
       imissing_value, ifill_value, flag_values, nvalid_range )

    !----------------------------------------------------
    ! Arguments
    type(file_desc_t) , intent(inout)        :: ncid             ! netcdf file id
    character(len=*)  , intent(in)           :: flag             ! 'read' or 'write'
    character(len=*)  , intent(in)           :: varname          ! variable name
    integer           , intent(in)           :: xtype            ! netcdf data type
    character(len=*)  , intent(in)           :: long_name        ! long name for variable
    character(len=*)  , intent(in)           :: interpinic_flag  ! interpolate variable using interpinic
    {VTYPE}           , pointer              :: data{DIMSTR}
    logical           , intent(inout)        :: readvar          ! was var read?
    character(len=*)  , intent(in), optional :: dim1name         ! dimension name
    character(len=*)  , intent(in), optional :: units            ! long name for variable
    character(len=*)  , intent(in), optional :: comment          ! attribute
    character(len=*)  , intent(in), optional :: flag_meanings(:) ! attribute
    real(r8)          , intent(in), optional :: missing_value    ! attribute for real
    real(r8)          , intent(in), optional :: fill_value       ! attribute for real
    integer           , intent(in), optional :: imissing_value   ! attribute for int
    integer           , intent(in), optional :: ifill_value      ! attribute for int
    integer           , intent(in), optional :: flag_values(:)   ! attribute for int
    integer           , intent(in), optional :: nvalid_range(2)  ! attribute for int

  end subroutine restartvar_{DIMS}d_{TYPE}

  !-----------------------------------------------------------------------

  !TYPE int,double
  subroutine restartvar_2d_{TYPE}_bounds(ncid, flag, varname, xtype, &
       dim1name, dim2name, switchdim, lowerb2, upperb2, &
       long_name, units, scale_by_thickness, interpinic_flag, data, readvar, &
       comment, flag_meanings, missing_value, fill_value, &
       imissing_value, ifill_value, flag_values, nvalid_range )

    !----------------------------------------------------
    ! Arguments
    type(file_desc_t), intent(inout)        :: ncid             ! netcdf file id
    character(len=*) , intent(in)           :: flag             ! 'read' or 'write'
    character(len=*) , intent(in)           :: varname          ! variable name
    integer          , intent(in)           :: xtype            ! netcdf data type
    character(len=*) , intent(in)           :: dim1name         ! dimension name
    character(len=*) , intent(in)           :: dim2name         ! dimension name
    logical          , intent(in)           :: switchdim
    character(len=*) , intent(in)           :: long_name        ! long name for variable
    logical          , intent(in)           :: scale_by_thickness  ! to scale by thickness in vertical interpolation or not
    character(len=*) , intent(in)           :: interpinic_flag  ! interpolate variable using interpinic
    {VTYPE}          , pointer              :: data(:,:)        ! raw data
    logical          , intent(out)          :: readvar          ! was var read?
    integer          , intent(in), optional :: lowerb2
    integer          , intent(in), optional :: upperb2 
    character(len=*) , intent(in), optional :: units            ! long name for variable
    character(len=*) , intent(in), optional :: comment          ! attribute
    character(len=*) , intent(in), optional :: flag_meanings(:) ! attribute
    real(r8)         , intent(in), optional :: missing_value    ! attribute for real
    real(r8)         , intent(in), optional :: fill_value       ! attribute for real
    integer          , intent(in), optional :: imissing_value   ! attribute for int
    integer          , intent(in), optional :: ifill_value      ! attribute for int
    integer          , intent(in), optional :: flag_values(:)   ! attribute for int
    integer          , intent(in), optional :: nvalid_range(2)  ! attribute for int

    readvar = .false.

  end subroutine restartvar_2d_{TYPE}_bounds

  !-----------------------------------------------------------------------
  subroutine set_missing_from_template(my_var, template_var, multiplier)
    !
    ! !DESCRIPTION:
    ! Set values of a missing restart field from a template field, with some constant
    ! multiplier
    !
    ! !USES:
    use shr_infnan_mod, only : isnan => shr_infnan_isnan, nan => shr_infnan_nan, assignment(=)
    !
    ! !ARGUMENTS:
    real(r8), intent(out) :: my_var(:)
    real(r8), intent(in)  :: template_var(:)
    real(r8), intent(in)  :: multiplier

    my_var(:) = template_var(:) * multiplier

  end subroutine set_missing_from_template

  !-----------------------------------------------------------------------
  subroutine RestartExcessIceIssue(ncid, flag, excess_ice_on_restart)
    !
    ! !DESCRIPTION:
    !
    ! !USES:
    !
    ! !ARGUMENTS:
    type(file_desc_t), intent(inout) :: ncid       ! netcdf id
    character(len=*) , intent(in)    :: flag       ! 'read' or 'write'
    logical, intent(out) :: excess_ice_on_restart  ! If excess ice is on the restart file
    !
    ! !LOCAL VARIABLES:
    integer  :: attribute_value

    character(len=*), parameter :: subname = 'RestartExcessIceIssue'
    !-----------------------------------------------------------------------

    excess_ice_on_restart = .false.

  end subroutine RestartExcessIceIssue


  !-----------------------------------------------------------------------
  logical function CallRestartvarDimOK (ncid, flag, dimname)
    !
    ! !DESCRIPTION:
    ! Answer whether to call restartvar(), if necessary checking whether
    ! a dimension exists in the restart file
    !
    ! BACKWARDS_COMPATIBILITY(wjs/ssr, 2022-02-02)
    ! Used in Restart(). Even though restartvar() can safely be called for a
    ! non-existent variable, it gives an error for a non-existent dimension, so
    ! check whether the dimension exists before trying to read. The need for this
    ! function arose because we recently added the mxsowings and mxharvests
    ! dimensions to the restart file.
    !
    ! !USES:
    use ncdio_pio
    !
    ! !ARGUMENTS:
    type(file_desc_t), intent(inout) :: ncid
    character(len=*) , intent(in)    :: flag
    character(len=*) , intent(in)    :: dimname
    !
    ! !LOCAL VARIABLES:
    !-----------------------------------------------------------------------

    CallRestartvarDimOK = .false.

  end function CallRestartvarDimOK


end module restUtilMod
