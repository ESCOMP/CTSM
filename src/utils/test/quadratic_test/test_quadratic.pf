module test_quadratic

  ! Tests of quadratic

  use pfunit_mod
  use quadraticMod
  use shr_kind_mod , only : r8 => shr_kind_r8
  use unittestUtils, only : endrun_msg

  implicit none

  @TestCase
  type, extends(TestCase) :: TestQuadratic
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestQuadratic

  real(r8), parameter :: tol = 1.e-15_r8
  real(r8), parameter :: tol_big = 1.e-6_r8

contains

  subroutine setUp(this)
    class(TestQuadratic), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestQuadratic), intent(inout) :: this

  end subroutine tearDown

  subroutine check_root(a,b,c,root)
     real(r8), intent(IN):: a, b, c, root
     real(r8) :: result

     result = a*root*root + b*root + c
     if ( abs(result) > 1.e-12 )then
        print *, 'result = ', result
        print *, 'a, b, c = ', a, b, c
     end if
     @AssertEqual( result, 0.0_r8, tolerance=tol)
     
  end subroutine check_root

  ! ------------------------------------------------------------------------
  ! Tests of zero roots
  ! ------------------------------------------------------------------------

  @Test
  subroutine zero_root(this)
    class(TestQuadratic), intent(inout) :: this
    real(r8) :: b, c, r1, r2
    real(r8) :: a(3)
    integer :: i
    
    a = (/ 1000.0_r8, 5.12345678_r8, -31.415927465859_r8 /)
    b = 0.0_r8
    c = 0.0_r8
    do i = 1, size(a)
       call quadratic (a(i), b, c, r1, r2)
       call check_root(a(i), b, c, r1)
       @assertEqual(0.0_r8,    r1, tolerance=tol)
       @assertEqual(1.e+36_r8, r2, tolerance=tol)
    end do

  end subroutine zero_root

  ! ------------------------------------------------------------------------
  ! Tests of simple  roots
  ! ------------------------------------------------------------------------

  @Test
  subroutine simple_roots(this)
    class(TestQuadratic), intent(inout) :: this
    real(r8) :: r1, r2
    real(r8) :: a(2), b(2), c(2)
    real(r8) :: expectedr1(2), expectedr2(2)
    integer :: i
    
    a = (/ 1.0_r8,  1.0_r8 /)
    b = (/ 3.0_r8,  0.0_r8 /)
    c = (/ 2.0_r8, -4.0_r8 /)
    expectedr1 = (/ -2.0_r8, -2.0_r8 /)
    expectedr2 = (/ -1.0_r8, +2.0_r8 /)
    do i = 1, size(a)
       call quadratic (a(i), b(i), c(i), r1, r2)
       call check_root(a(i), b(i), c(i), r1)
       call check_root(a(i), b(i), c(i), r2)
       @assertEqual(expectedr1(i), r1, tolerance=tol)
       @assertEqual(expectedr2(i), r2, tolerance=tol)
    end do

  end subroutine simple_roots

  ! ------------------------------------------------------------------------
  ! Tests of near_zero_sqrts
  ! ------------------------------------------------------------------------

  @Test
  subroutine near_zero_sqrts(this)
    class(TestQuadratic), intent(inout) :: this
    real(r8) :: r1, r2
    real(r8) :: a(1), b(1), c(1), c_coef
    real(r8) :: pert(3)
    real(r8) :: expectedr1(1)
    integer :: i, j
    
    a = (/ 1.0_r8 /)
    b = (/ 4.0_r8 /)
    c = (/ 4.0_r8 /)
    expectedr1 = (/ -2.0_r8 /)
    do i = 1, size(a)
       pert = (/ 0.0_r8, 0.5_r8*epsilon(b(i)), 2.0_r8*epsilon(b(i)) /)
       ! Check that b2 - 4ac is zero, which is what this test is about
       @assertEqual( 0.0_r8, b*b - 4.0_r8*a(i)*c(i) )
       do j = 1, size(pert)
          c_coef = c(i)+pert(j)
          print *, 'a, b, c_ = ', a(i), b(i), c_coef
          call quadratic (a(i), b(i), c_coef, r1, r2)
          call check_root(a(i), b(i), c_coef, r1)
          call check_root(a(i), b(i), c_coef, r2)
          @assertEqual(expectedr1(i), r1, tolerance=tol_big)
          @assertEqual(r1, r2, tolerance=tol_big )
        end do
    end do

  end subroutine near_zero_sqrts

  ! ------------------------------------------------------------------------
  ! Tests of error conditions
  ! ------------------------------------------------------------------------

  @Test
  subroutine check_errorcondsazero(this)
    class(TestQuadratic), intent(inout) :: this

    character(len=:), allocatable :: expected_msg
    real(r8) :: r1, r2
    real(r8) :: a, b, c

    a = 0.0_r8
    b = a
    c = a
    call quadratic (a, b, c, r1, r2)
    expected_msg = endrun_msg( &
         'quadratic ERROR: Quadratic solution error')
    @assertExceptionRaised(expected_msg)
  end subroutine check_errorcondsazero

  @Test
  subroutine check_errorcondsimaginary(this)
    class(TestQuadratic), intent(inout) :: this

    character(len=:), allocatable :: expected_msg
    real(r8) :: r1, r2
    real(r8) :: a, b, c

    a = 1.0_r8
    b = 2.0_r8
    c = 5.0_r8
    call quadratic (a, b, c, r1, r2)
    expected_msg = endrun_msg( &
         'quadratic ERROR: Quadratic solution error: b^2 - 4ac is negative')
    @assertExceptionRaised(expected_msg)
  end subroutine check_errorcondsimaginary

  @Test
  subroutine check_errorcondsbarelyimaginary(this)
    class(TestQuadratic), intent(inout) :: this

    character(len=:), allocatable :: expected_msg
    real(r8) :: r1, r2
    real(r8) :: a, b, c
    a = 1.0_r8
    b = 4.0_r8
    c = 4.0_r8 + 100.0_r8*epsilon(b)
    call quadratic (a, b, c, r1, r2)
    call check_root(a, b, c, r1)
    call check_root(a, b, c, r2)
    expected_msg = endrun_msg( &
         'quadratic ERROR: Quadratic solution error: b^2 - 4ac is negative')
    @assertExceptionRaised(expected_msg)

  end subroutine check_errorcondsbarelyimaginary

end module test_quadratic
