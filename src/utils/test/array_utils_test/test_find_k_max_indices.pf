module test_find_k_max_indices

  ! Tests of array_utils: find_k_max_indices

  use pfunit_mod
  use array_utils
  use shr_kind_mod , only : r8 => shr_kind_r8
  use unittestUtils, only : endrun_msg

  implicit none

  @TestCase
  type, extends(TestCase) :: TestFindKMax
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestFindKMax

  real(r8), parameter :: tol = 1.e-13_r8

contains

  subroutine setUp(this)
    class(TestFindKMax), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestFindKMax), intent(inout) :: this
  end subroutine tearDown

  @Test
  subroutine alreadyInOrder(this)
    class(TestFindKMax), intent(inout) :: this
    integer :: max_indices(3)

    call find_k_max_indices( &
         data = [5._r8, 4._r8, 3._r8, 2._r8], &
         lb = 1, &
         k = 3, &
         max_indices = max_indices)

    @assertEqual([1,2,3], max_indices)
  end subroutine alreadyInOrder

  @Test
  subroutine reversed(this)
    class(TestFindKMax), intent(inout) :: this
    integer :: max_indices(3)

    call find_k_max_indices( &
         data = [2._r8, 3._r8, 4._r8, 5._r8], &
         lb = 1, &
         k = 3, &
         max_indices = max_indices)

    @assertEqual([4,3,2], max_indices)
  end subroutine reversed

  @Test
  subroutine insertAtLast(this)
    ! Make sure we have a test that covers inserting the new element at the end of the
    ! max_vals array
    class(TestFindKMax), intent(inout) :: this
    integer :: max_indices(3)

    call find_k_max_indices( &
         data = [5._r8, 4._r8, 2._r8, 3._r8], &
         lb = 1, &
         k = 3, &
         max_indices = max_indices)

    @assertEqual([1,2,4], max_indices)
  end subroutine insertAtLast

  @Test
  subroutine insertAtFirst(this)
    ! Make sure we have a test that covers inserting the new element at the start of the
    ! max_vals array
    class(TestFindKMax), intent(inout) :: this
    integer :: max_indices(3)

    call find_k_max_indices( &
         data = [5._r8, 4._r8, 3._r8, 6._r8], &
         lb = 1, &
         k = 3, &
         max_indices = max_indices)

    @assertEqual([4,1,2], max_indices)
  end subroutine insertAtFirst

  @Test
  subroutine insertAtMiddle(this)
    ! Make sure we have a test that covers inserting the new element in the middle of the
    ! max_vals array
    class(TestFindKMax), intent(inout) :: this
    integer :: max_indices(3)

    call find_k_max_indices( &
         data = [5._r8, 3._r8, 2._r8, 4._r8], &
         lb = 1, &
         k = 3, &
         max_indices = max_indices)

    @assertEqual([1,4,2], max_indices)
  end subroutine insertAtMiddle

  @Test
  subroutine lbNot1(this)
    ! Test with lower bound different from 1
    class(TestFindKMax), intent(inout) :: this
    integer :: max_indices(3)

    call find_k_max_indices( &
         data = [2._r8, 3._r8, 4._r8, 5._r8], &
         lb = 2, &
         k = 3, &
         max_indices = max_indices)

    @assertEqual([5,4,3], max_indices)
  end subroutine lbNot1

  @Test
  subroutine k0_raisesException(this)
    class (TestFindKMax), intent(inout) :: this
    integer :: max_indices(0)
    character(len=:), allocatable :: expected_msg

    call find_k_max_indices( &
         data = [2._r8, 3._r8, 4._r8, 5._r8], &
         lb = 1, &
         k = 0, &
         max_indices = max_indices)

    expected_msg = endrun_msg( &
         'find_k_max_indices: must have 1 <= k <= size(data)')
    @assertExceptionRaised(expected_msg)
  end subroutine k0_raisesException

  @Test
  subroutine kBig_raisesException(this)
    class (TestFindKMax), intent(inout) :: this
    integer :: max_indices(5)
    character(len=:), allocatable :: expected_msg

    call find_k_max_indices( &
         data = [2._r8, 3._r8, 4._r8, 5._r8], &
         lb = 1, &
         k = 5, &
         max_indices = max_indices)

    expected_msg = endrun_msg( &
         'find_k_max_indices: must have 1 <= k <= size(data)')
    @assertExceptionRaised(expected_msg)
  end subroutine kBig_raisesException

  @Test
  subroutine kEquals1(this)
    ! Test the edge case k=1
    class(TestFindKMax), intent(inout) :: this
    integer :: max_indices(1)

    call find_k_max_indices( &
         data = [2._r8, 3._r8, 4._r8, 1._r8], &
         lb = 1, &
         k = 1, &
         max_indices = max_indices)

    @assertEqual([3], max_indices)
  end subroutine kEquals1

  @Test
  subroutine reversed_kEqualsN(this)
    ! Test the edge case k=n
    class(TestFindKMax), intent(inout) :: this
    integer :: max_indices(4)

    call find_k_max_indices( &
         data = [2._r8, 3._r8, 4._r8, 5._r8], &
         lb = 1, &
         k = 4, &
         max_indices = max_indices)

    @assertEqual([4,3,2,1], max_indices)
  end subroutine reversed_kEqualsN

  @Test
  subroutine nEquals1(this)
    ! Test the edge case n = k = 1
    class(TestFindKMax), intent(inout) :: this
    integer :: max_indices(1)

    call find_k_max_indices( &
         data = [2._r8], &
         lb = 1, &
         k = 1, &
         max_indices = max_indices)

    @assertEqual([1], max_indices)
  end subroutine nEquals1

end module test_find_k_max_indices
