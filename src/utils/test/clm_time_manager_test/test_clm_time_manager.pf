module test_clm_time_manager

  ! Tests of clm_time_manager

  use pfunit_mod
  use shr_kind_mod, only : r8 => shr_kind_r8
  use clm_time_manager
  use unittestTimeManagerMod, only : unittest_timemgr_setup, unittest_timemgr_teardown
  use unittestTimeManagerMod, only : &
       set_date => unittest_timemgr_set_curr_date, &
       set_nstep => unittest_timemgr_set_nstep
  use unittestUtils  , only : endrun_msg

  implicit none
  save

  real(r8), parameter :: tol = 1.e-13_r8
  integer, parameter :: dtime = 1800

  @TestCase
  type, extends(TestCase) :: TestTimeManager
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestTimeManager

contains
  
  subroutine setUp(this)
    class(TestTimeManager), intent(inout) :: this
    
  end subroutine setUp

  subroutine tearDown(this)
    class(TestTimeManager), intent(inout) :: this

    call unittest_timemgr_teardown()
  end subroutine tearDown

  @Test
  subroutine getStepSize_returnsCorrectValue(this)
    class(TestTimeManager), intent(inout) :: this
    integer :: step_size

    call unittest_timemgr_setup(dtime=dtime)

    step_size = get_step_size()

    @assertEqual(dtime, step_size)
  end subroutine getStepSize_returnsCorrectValue

  @Test
  subroutine getCalday_jan1_returns1(this)
    class(TestTimeManager), intent(inout) :: this
    real(r8) :: calday

    call unittest_timemgr_setup(dtime=dtime)

    calday = get_calday(101, 0)

    @assertEqual(1._r8, calday)
  end subroutine getCalday_jan1_returns1

  @Test
  subroutine getCalday_leapYearDec31_returnsCorrectValue(this)
    class(TestTimeManager), intent(inout) :: this
    real(r8) :: calday

    call unittest_timemgr_setup(dtime=dtime, use_gregorian_calendar=.true.)

    calday = get_calday(41231, 43200)

    @assertEqual(366.5_r8, calday)
  end subroutine getCalday_leapYearDec31_returnsCorrectValue

  @Test
  subroutine getCalday_leapYearDec31Reuse365_returnsCorrectValue(this)
    class(TestTimeManager), intent(inout) :: this
    real(r8) :: calday

    call unittest_timemgr_setup(dtime=dtime, use_gregorian_calendar=.true.)

    calday = get_calday(41231, 43200, reuse_day_365_for_day_366=.true.)

    @assertEqual(365.5_r8, calday)
  end subroutine getCalday_leapYearDec31Reuse365_returnsCorrectValue

  @Test
  subroutine getCurrCalday_jan1Time0_returns1(this)
    class(TestTimeManager), intent(inout) :: this
    real(r8) :: calday

    call unittest_timemgr_setup(dtime=dtime)

    call set_date(yr=2000, mon=1, day=1, tod=0)

    calday = get_curr_calday()

    @assertEqual(1._r8, calday)
  end subroutine getCurrCalday_jan1Time0_returns1

  @Test
  subroutine getCurrCalday_leapYearDec31_returnsCorrectValue(this)
    class(TestTimeManager), intent(inout) :: this
    real(r8) :: calday

    call unittest_timemgr_setup(dtime=dtime, use_gregorian_calendar=.true.)

    call set_date(yr=2000, mon=12, day=31, tod=43200)

    calday = get_curr_calday()

    @assertEqual(366.5_r8, calday)
  end subroutine getCurrCalday_leapYearDec31_returnsCorrectValue

  @Test
  subroutine getCurrCalday_leapYearDec31Reuse365_returnsCorrectValue(this)
    class(TestTimeManager), intent(inout) :: this
    real(r8) :: calday

    call unittest_timemgr_setup(dtime=dtime, use_gregorian_calendar=.true.)

    call set_date(yr=2000, mon=12, day=31, tod=43200)

    calday = get_curr_calday(reuse_day_365_for_day_366=.true.)

    @assertEqual(365.5_r8, calday)
  end subroutine getCurrCalday_leapYearDec31Reuse365_returnsCorrectValue

  @Test
  subroutine getPrevCalday_jan1Time0_returnsCorrectValue(this)
    class(TestTimeManager), intent(inout) :: this
    real(r8) :: calday
    real(r8) :: calday_expected

    call unittest_timemgr_setup(dtime=dtime)

    call set_date(yr=2000, mon=1, day=1, tod=0)

    calday = get_prev_calday()
    calday_expected = 366._r8 - dtime/86400._r8

    @assertEqual(calday_expected, calday, tolerance=tol)
  end subroutine getPrevCalday_jan1Time0_returnsCorrectValue

  @Test
  subroutine getPrevCalday_jan2Time0_returnsCorrectValue(this)
    class(TestTimeManager), intent(inout) :: this
    real(r8) :: calday
    real(r8) :: calday_expected

    call unittest_timemgr_setup(dtime=dtime)

    call set_date(yr=2000, mon=1, day=2, tod=0)

    calday = get_prev_calday()
    calday_expected = 2._r8 - dtime/86400._r8

    @assertEqual(calday_expected, calday, tolerance=tol)
  end subroutine getPrevCalday_jan2Time0_returnsCorrectValue

  @Test
  subroutine getCurrYearfrac_atYearBoundary_returns0(this)
    class(TestTimeManager), intent(inout) :: this
    real(r8) :: yearfrac

    call unittest_timemgr_setup(dtime=dtime)

    call set_date(yr=2, mon=1, day=1, tod=0)
    
    yearfrac = get_curr_yearfrac()

    @assertEqual(0._r8, yearfrac)
  end subroutine getCurrYearfrac_atYearBoundary_returns0

  @Test
  subroutine getCurrYearfrac_inMiddleOfYear_returnsCorrectValue(this)
    class(TestTimeManager), intent(inout) :: this
    real(r8) :: yearfrac
    real(r8) :: yearfrac_expected
    
    call unittest_timemgr_setup(dtime=dtime)

    call set_date(yr=2, mon=3, day=1, tod=43200)

    yearfrac = get_curr_yearfrac()

    yearfrac_expected = 59.5_r8 / 365._r8
    @assertEqual(yearfrac_expected, yearfrac)
  end subroutine getCurrYearfrac_inMiddleOfYear_returnsCorrectValue

  @Test
  subroutine getCurrYearfrac_leapYearDec31_returnsCorrectValue(this)
    class(TestTimeManager), intent(inout) :: this
    real(r8) :: yearfrac
    real(r8) :: yearfrac_expected

    call unittest_timemgr_setup(dtime=dtime, use_gregorian_calendar=.true.)

    call set_date(yr=2000, mon=12, day=31, tod=43200)

    yearfrac = get_curr_yearfrac()

    yearfrac_expected = 365.5_r8 / 366._r8
    @assertEqual(yearfrac_expected, yearfrac)
  end subroutine getCurrYearfrac_leapYearDec31_returnsCorrectValue

  @Test
  subroutine getPrevYearfrac_atYearBoundary_returnsLargeValue(this)
    class(TestTimeManager), intent(inout) :: this
    real(r8) :: yearfrac
    integer, parameter :: secs_in_day = 86400
    real(r8) :: yearfrac_expected

    call unittest_timemgr_setup(dtime=dtime)

    call set_date(yr=2, mon=1, day=1, tod=0)
    
    yearfrac = get_prev_yearfrac()

    yearfrac_expected = (365._r8 - real(dtime, r8) / real(secs_in_day, r8)) / 365._r8
    @assertEqual(yearfrac_expected, yearfrac)
  end subroutine getPrevYearfrac_atYearBoundary_returnsLargeValue

  @Test
  subroutine getPrevYearfrac_inMiddleOfYear_returnsCorrectValue(this)
    class(TestTimeManager), intent(inout) :: this
    real(r8) :: yearfrac
    integer, parameter :: secs_in_day = 86400
    real(r8) :: yearfrac_expected
    
    call unittest_timemgr_setup(dtime=dtime)

    call set_date(yr=2, mon=3, day=1, tod=43200)

    yearfrac = get_prev_yearfrac()

    yearfrac_expected = (59.5_r8 - real(dtime, r8) / real(secs_in_day, r8)) / 365._r8
    @assertEqual(yearfrac_expected, yearfrac)
  end subroutine getPrevYearfrac_inMiddleOfYear_returnsCorrectValue

  @Test
  subroutine getPrevYearfrac_leapYearInMiddleOfYear_returnsCorrectValue(this)
    class(TestTimeManager), intent(inout) :: this
    real(r8) :: yearfrac
    integer, parameter :: secs_in_day = 86400
    real(r8) :: yearfrac_expected

    call unittest_timemgr_setup(dtime=dtime, use_gregorian_calendar = .true.)

    call set_date(yr=2000, mon=3, day=1, tod=43200)

    yearfrac = get_prev_yearfrac()

    yearfrac_expected = (60.5_r8 - real(dtime, r8) / real(secs_in_day, r8)) / 366._r8
    @assertEqual(yearfrac_expected, yearfrac)
  end subroutine getPrevYearfrac_leapYearInMiddleOfYear_returnsCorrectValue

  @Test
  subroutine getPrevYearfrac_leapYearAtYearBoundary_returnsCorrectValue(this)
    ! This ensures that the correct year is used in determining the number of days in the year
    class(TestTimeManager), intent(inout) :: this
    real(r8) :: yearfrac
    integer, parameter :: secs_in_day = 86400
    real(r8) :: yearfrac_expected

    call unittest_timemgr_setup(dtime=dtime, use_gregorian_calendar = .true.)

    call set_date(yr=2000, mon=1, day=1, tod=0)

    yearfrac = get_prev_yearfrac()

    ! In the following, note that we have 365 and not 366, because the prev_yearfrac uses
    ! year 1999, which is not a leap year:
    yearfrac_expected = (365._r8 - real(dtime, r8) / real(secs_in_day, r8)) / 365._r8
    @assertEqual(yearfrac_expected, yearfrac)
  end subroutine getPrevYearfrac_leapYearAtYearBoundary_returnsCorrectValue

  @Test
  subroutine getNstep_step0(this)
    class(TestTimeManager), intent(inout) :: this
    integer :: nstep

    call unittest_timemgr_setup(dtime=dtime)

    nstep = get_nstep()

    @assertEqual(0, nstep)
  end subroutine getNstep_step0

  @Test
  subroutine getNstep_step3(this)
    class(TestTimeManager), intent(inout) :: this
    integer, parameter :: expected_nstep = 3
    integer :: nstep

    call unittest_timemgr_setup(dtime=dtime)

    call set_nstep(expected_nstep)

    nstep = get_nstep()

    @assertEqual(expected_nstep, nstep)
  end subroutine getNstep_step3

  @Test
  subroutine isBegCurrYear_atBeg(this)
    class(TestTimeManager), intent(inout) :: this
    logical :: is_beg

    call unittest_timemgr_setup(dtime=dtime)

    call set_date(yr=2, mon=1, day=1, tod=dtime)

    is_beg = is_beg_curr_year()

    @assertTrue(is_beg)
  end subroutine isBegCurrYear_atBeg

  @Test
  subroutine isBegCurrYear_notAtBeg(this)
    class(TestTimeManager), intent(inout) :: this
    logical :: is_beg

    call unittest_timemgr_setup(dtime=dtime)

    call set_date(yr=2, mon=1, day=2, tod=dtime)

    is_beg = is_beg_curr_year()

    @assertFalse(is_beg)
  end subroutine isBegCurrYear_notAtBeg

  @Test
  subroutine isEndCurrYear_atEnd(this)
    class(TestTimeManager), intent(inout) :: this
    logical :: is_end

    call unittest_timemgr_setup(dtime=dtime)

    call set_date(yr=2, mon=1, day=1, tod=0)

    is_end = is_end_curr_year()

    @assertTrue(is_end)
  end subroutine isEndCurrYear_atEnd

  @Test
  subroutine isEndCurrYear_notAtEnd(this)
    class(TestTimeManager), intent(inout) :: this
    logical :: is_end

    call unittest_timemgr_setup(dtime=dtime)

    call set_date(yr=2, mon=1, day=2, tod=0)

    is_end = is_end_curr_year()

    @assertFalse(is_end)
  end subroutine isEndCurrYear_notAtEnd

  @Test
  subroutine isFirstStep_atFirstStep(this)
    class(TestTimeManager), intent(inout) :: this
    logical :: is_first

    call unittest_timemgr_setup(dtime=dtime)

    is_first = is_first_step()

    @assertTrue(is_first)
  end subroutine isFirstStep_atFirstStep

  @Test
  subroutine isFirstStep_notAtFirstStep(this)
    class(TestTimeManager), intent(inout) :: this
    logical :: is_first

    call unittest_timemgr_setup(dtime=dtime)

    call set_nstep(1)

    is_first = is_first_step()

    @assertFalse(is_first)
  end subroutine isFirstStep_notAtFirstStep

  @Test
  subroutine check_DA_nstep(this)
    class(TestTimeManager), intent(inout) :: this
    integer :: nstep

    call unittest_timemgr_setup(dtime=dtime)

    nstep = 100
    call set_nstep(nstep)

    @assertEqual( nstep, get_nstep() )
    @assertEqual( nstep, get_nstep_since_startup_or_lastDA_restart_or_pause() )

    ! Now update DA nstep, and nstep should be the same, but DA step should be zero
    call update_DA_nstep()
    @assertEqual( nstep, get_nstep() )
    @assertEqual( 0, get_nstep_since_startup_or_lastDA_restart_or_pause() )

    ! Advance time step and should be one more step out
    call advance_timestep()

    @assertEqual( nstep+1, get_nstep() )
    @assertEqual( 1, get_nstep_since_startup_or_lastDA_restart_or_pause() )

  end subroutine check_DA_nstep

  @Test
  subroutine check_local_time(this)
    class(TestTimeManager), intent(inout) :: this

    integer :: secs
    real(r8) :: londeg
    integer  :: expected

    call unittest_timemgr_setup(dtime=dtime)

    ! Check for local noon at Greenich
    londeg = 0.0_r8
    secs = 3600*12
    call set_date(yr=2, mon=3, day=1, tod=secs)
    expected = secs
    @assertEqual( expected, get_local_time( londeg ) )
    londeg = 360.0_r8
    @assertEqual( expected, get_local_time( londeg ) )

    ! Check for local noon on otherside of the world
    secs = 0
    londeg = 180.0_r8
    call set_date(yr=2, mon=3, day=1, tod=secs )
    @assertEqual( expected, get_local_time( londeg ) )
    londeg = -180.0_r8
    @assertEqual( expected, get_local_time( londeg ) )
  end subroutine check_local_time

  @Test
  subroutine compare_local_time(this)
    class(TestTimeManager), intent(inout) :: this

    integer :: secs
    real(r8) :: londeg

    call unittest_timemgr_setup(dtime=dtime)

    londeg = 0.0_r8
    do while ( londeg <= 360.0_r8 )
       londeg = londeg + 0.1_r8
       ! Start at 0 Z
       secs = 0
       call set_date(yr=1, mon=1, day=1, tod=secs)
       do while ( .not. is_end_curr_year() )
          @assertEqual( get_local_time( londeg, starttime=0 ), get_local_timestep_time( londeg ) )
          call advance_timestep()
       end do
    end do

  end subroutine compare_local_time

  @Test
  subroutine check_local_time_woffset(this)
    class(TestTimeManager), intent(inout) :: this

    integer :: secs
    real(r8) :: londeg
    integer  :: expected

    call unittest_timemgr_setup(dtime=dtime)

    ! Check for local noon at Greenich for 1 time step ahead
    londeg = 0.0_r8
    secs = 3600*12 + dtime
    call set_date(yr=2018, mon=9, day=3, tod=secs)
    expected = secs - dtime
    @assertEqual( expected, get_local_time( londeg, offset=-dtime ) )
    londeg = 360.0_r8
    @assertEqual( expected, get_local_time( londeg, offset=-dtime ) )
  end subroutine check_local_time_woffset


  @Test
  subroutine check_near_local_noon(this)
    class(TestTimeManager), intent(inout) :: this

    integer :: secs
    real(r8) :: londeg

    call unittest_timemgr_setup(dtime=dtime)

    ! Check for local noon at Greenich will be true from 11 to 1pm
    londeg = 0.0_r8
    secs = 3600*11
    call set_date(yr=2, mon=3, day=1, tod=secs)
    @assertTrue(  is_near_local_noon( londeg, deltasec=3600 ) )
    secs = 3600*12
    call set_date(yr=2, mon=2, day=2, tod=secs)
    @assertTrue(  is_near_local_noon( londeg, deltasec=3600 ) )
    secs = 3600*13
    call set_date(yr=2, mon=1, day=10, tod=secs)
    @assertTrue(  is_near_local_noon( londeg, deltasec=3600 ) )

    ! anything before or after will be False
    secs =0
    call set_date(yr=2, mon=2, day=19, tod=secs)
    @assertFalse(  is_near_local_noon( londeg, deltasec=3600 ) )
    secs = 3600*11 - 1
    call set_date(yr=2, mon=4, day=23, tod=secs)
    @assertFalse(  is_near_local_noon( londeg, deltasec=3600 ) )
    secs = 3600*13 + 1
    call set_date(yr=2, mon=6, day=30, tod=secs)
    @assertFalse(  is_near_local_noon( londeg, deltasec=3600 ) )
    secs = 3600*24 - 1
    call set_date(yr=2, mon=12, day=31, tod=secs)
    @assertFalse(  is_near_local_noon( londeg, deltasec=3600 ) )
  end subroutine check_near_local_noon

  @Test
  subroutine bad_deltasec(this)
    class(TestTimeManager), intent(inout) :: this

    character(len=256) :: expected_msg
    real(r8) :: londeg
    integer :: secs
    logical :: check

    call unittest_timemgr_setup(dtime=dtime)

    londeg = 0.0_r8
    secs = get_local_time( londeg )
    secs = 3600*24 - 1
    call set_date(yr=2, mon=12, day=31, tod=secs)
    check = is_near_local_noon( londeg, deltasec=3600*12+1 )
    expected_msg = endrun_msg( &
          "ERROR: deltasec must be less than 12 hours" )
    @assertExceptionRaised(expected_msg)

  end subroutine bad_deltasec

  @Test
  subroutine bad_neglontolocal_time(this)
    class(TestTimeManager), intent(inout) :: this

    character(len=256) :: expected_msg
    real(r8) :: londeg
    integer :: secs

    call unittest_timemgr_setup(dtime=dtime)

    londeg = -200.0_r8
    secs = get_local_time( londeg )
    expected_msg = endrun_msg( &
          "ERROR: londeg must be greater than -180" )
    @assertExceptionRaised(expected_msg)

  end subroutine bad_neglontolocal_time

  @Test
  subroutine bad_hilontolocal_time(this)
    class(TestTimeManager), intent(inout) :: this

    character(len=256) :: expected_msg
    real(r8) :: londeg
    integer :: secs

    call unittest_timemgr_setup(dtime=dtime)

    londeg = 400.0_r8
    secs = get_local_time( londeg )
    expected_msg = endrun_msg( &
          "ERROR: londeg must be less than 360" )
    @assertExceptionRaised(expected_msg)

  end subroutine bad_hilontolocal_time

end module test_clm_time_manager
