module test_patch_state_updater

  ! Tests of dynPatchStateUpdaterMod

  use funit
  use dynPatchStateUpdaterMod
  use shr_kind_mod , only : r8 => shr_kind_r8
  use unittestSubgridMod
  use unittestSimpleSubgridSetupsMod
  use unittestFilterBuilderMod
  use PatchType
  use LandunitType
  use subgridWeightsMod, only : compute_higher_order_weights
  use clm_varpar, only : mxpft
  use landunit_varcon, only : istwet

  implicit none

  @TestCase
  type, extends(TestCase) :: TestPSUpdater
     ! filter
     integer :: numf
     integer, allocatable :: filter(:)

   contains
     procedure :: setUp
     procedure :: tearDown
     procedure :: do_all_setup_with_n_vegetated_patches
  end type TestPSUpdater

  real(r8), parameter :: tol = 1.e-13_r8

contains

  ! ========================================================================
  ! Test helpers
  ! ========================================================================

  subroutine setUp(this)
    class(TestPSUpdater), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestPSUpdater), intent(inout) :: this

    call unittest_subgrid_teardown()
  end subroutine tearDown

  !-----------------------------------------------------------------------
  subroutine do_all_setup_with_n_vegetated_patches(this, ps_updater, &
       pwtcol_old, pwtcol_new, pft_types, natveg_weight_old, natveg_weight_new)
    !
    ! !DESCRIPTION:
    ! Does all setup needed when setting up one grid cell that contains (1) a vegetated
    ! column containing n patches, and (2) a wetland landunit with a single column and a
    ! single patch. The old weight of the vegetated column is given by natveg_weight_old,
    ! if provided; if not provided, it defaults to 0.5. The new weight of the vegetated
    ! column is given by natveg_weight_new, if provided; if not provided, it defaults to
    ! natveg_weight_old.
    !
    ! !ARGUMENTS:
    class(TestPSUpdater), intent(inout) :: this
    type(patch_state_updater_type), intent(out) :: ps_updater
    real(r8), intent(in) :: pwtcol_old(begp:)  ! old weights of vegetated patches
    real(r8), intent(in) :: pwtcol_new(begp:)  ! new weights of vegetated patches
    integer, intent(in), optional :: pft_types(:)
    real(r8), intent(in), optional :: natveg_weight_old
    real(r8), intent(in), optional :: natveg_weight_new
    !
    ! !LOCAL VARIABLES:
    integer :: p
    integer :: li_natveg  ! index of natural veg landunit
    integer :: li_special ! index of special landunit
    real(r8) :: l_natveg_weight_old
    real(r8) :: l_natveg_weight_new

    character(len=*), parameter :: subname = 'do_all_setup_with_n_vegetated_patches'
    !-----------------------------------------------------------------------

    if (present(natveg_weight_old)) then
       l_natveg_weight_old = natveg_weight_old
    else
       l_natveg_weight_old = 0.5_r8
    end if

    if (present(natveg_weight_new)) then
       l_natveg_weight_new = natveg_weight_new
    else
       l_natveg_weight_new = l_natveg_weight_old
    end if

    ! Setup grid
    call unittest_subgrid_setup_start()
    call unittest_add_gridcell()
    call create_vegetated_landunit_n_patches(lweight = l_natveg_weight_old, &
         pwtcol = pwtcol_old, pft_types = pft_types)
    li_natveg = li
    call create_landunit_ncols(ltype = istwet, lweight = (1._r8 - l_natveg_weight_old), &
         ctypes = [istwet], cweights = [1._r8])
    li_special = li
    call unittest_subgrid_setup_end()
    call filter_from_range(bounds%begp, bounds%endp, this%numf, this%filter)

    ! Setup ps_updater
    ps_updater = patch_state_updater_type(bounds)
    call ps_updater%set_old_weights(bounds)

    ! Change areas
    ! Just include the vegetated patches in the loop - so skip the last patch
    do p = bounds%begp, (bounds%endp - 1)
       patch%wtcol(p) = pwtcol_new(p)
    end do
    lun%wtgcell(li_natveg) = l_natveg_weight_new
    lun%wtgcell(li_special) = 1._r8 - l_natveg_weight_new
    call compute_higher_order_weights(bounds)

    call ps_updater%set_new_weights(bounds)

  end subroutine do_all_setup_with_n_vegetated_patches


  ! ========================================================================
  ! Actual tests
  !
  ! Note: in most tests, there are 3 vegetated patches plus a wetland patch; the 2nd patch
  ! is the patch of interest
  ! ========================================================================

  @Test
  subroutine noAreaChange(this)
    ! no area change => no change in value, flux stays the same
    class(TestPSUpdater), intent(inout) :: this
    real(r8), parameter :: pwtcol_old(3) = [0.25_r8, 0.5_r8, 0.25_r8]
    real(r8), parameter :: pwtcol_new(3) = pwtcol_old
    type(patch_state_updater_type) :: ps_updater
    real(r8) :: var(4), expected_var(4)
    real(r8) :: flux_col_area(4), expected_flux_col_area(4)
    real(r8) :: flux_grc_area(4), expected_flux_grc_area(4)

    ! Setup

    call this%do_all_setup_with_n_vegetated_patches(ps_updater, &
         pwtcol_old = pwtcol_old, &
         pwtcol_new = pwtcol_new)

    var = [2._r8, 3._r8, 4._r8, 5._r8]
    expected_var = var
    flux_col_area = [12._r8, 13._r8, 14._r8, 15._r8]
    expected_flux_col_area = flux_col_area
    flux_grc_area = [22._r8, 23._r8, 24._r8, 25._r8]
    expected_flux_grc_area = flux_grc_area

    ! Exercise
    call ps_updater%update_patch_state(bounds, &
         this%numf, this%filter, var, &
         flux_out_col_area = flux_col_area, &
         flux_out_grc_area = flux_grc_area)

    ! Verify
    @assertEqual(expected_var, var)
    @assertEqual(expected_flux_col_area, flux_col_area)
    @assertEqual(expected_flux_grc_area, flux_grc_area)
  end subroutine noAreaChange

  @Test
  subroutine areaIncreases(this)
    ! if area increases from non-zero, then value is decreased appropriately; there
    ! should be no change in flux
    class(TestPSUpdater), intent(inout) :: this
    ! The second patch is the patch of interest
    real(r8), parameter :: pwtcol_old(3) = [0.3_r8, 0.2_r8, 0.5_r8]
    real(r8), parameter :: pwtcol_new(3) = [0.2_r8, 0.3_r8, 0.5_r8]
    type(patch_state_updater_type) :: ps_updater
    real(r8) :: var(4)
    real(r8) :: flux_col_area(4)
    real(r8) :: flux_grc_area(4)

    call this%do_all_setup_with_n_vegetated_patches(ps_updater, &
         pwtcol_old = pwtcol_old, &
         pwtcol_new = pwtcol_new)

    var = [2._r8, 3._r8, 4._r8, 5._r8]
    flux_col_area = [12._r8, 13._r8, 14._r8, 15._r8]
    flux_grc_area = [22._r8, 23._r8, 24._r8, 25._r8]

    ! Exercise
    call ps_updater%update_patch_state(bounds, &
         this%numf, this%filter, var, &
         flux_out_col_area = flux_col_area, &
         flux_out_grc_area = flux_grc_area)

    ! Verify
    @assertEqual(2._r8, var(2), tolerance=tol)
    ! same as starting flux:
    @assertEqual(13._r8, flux_col_area(2), tolerance=tol)
    @assertEqual(23._r8, flux_grc_area(2), tolerance=tol)
  end subroutine areaIncreases

  @Test
  subroutine colAreaIncreases(this)
    ! Column area increases with no change in pwtcol; value should be decreased
    ! appropriately; there should be no change in flux
    class(TestPSUpdater), intent(inout) :: this
    ! The second patch is the patch of interest
    real(r8), parameter :: pwtcol(3) = [0.3_r8, 0.2_r8, 0.5_r8]
    real(r8), parameter :: natveg_weight_old = 0.6_r8
    real(r8), parameter :: natveg_weight_new = 0.7_r8
    type(patch_state_updater_type) :: ps_updater
    real(r8) :: var(4)
    real(r8) :: flux_col_area(4)
    real(r8) :: flux_grc_area(4)
    real(r8) :: expected_var2

    call this%do_all_setup_with_n_vegetated_patches(ps_updater, &
         pwtcol_old = pwtcol, &
         pwtcol_new = pwtcol, &
         natveg_weight_old = natveg_weight_old, &
         natveg_weight_new = natveg_weight_new)

    var = [2._r8, 3._r8, 4._r8, 5._r8]
    flux_col_area = [12._r8, 13._r8, 14._r8, 15._r8]
    flux_grc_area = [22._r8, 23._r8, 24._r8, 25._r8]
    expected_var2 = var(2) * natveg_weight_old / natveg_weight_new

    ! Exercise
    call ps_updater%update_patch_state(bounds, &
         this%numf, this%filter, var, &
         flux_out_col_area = flux_col_area, &
         flux_out_grc_area = flux_grc_area)

    ! Verify
    @assertEqual(expected_var2, var(2), tolerance=tol)
    ! same as starting flux:
    @assertEqual(13._r8, flux_col_area(2), tolerance=tol)
    @assertEqual(23._r8, flux_grc_area(2), tolerance=tol)
  end subroutine colAreaIncreases

  @Test
  subroutine areaIncreasesFromZero(this)
    ! if area increases from zero, var should be set to 0
    class(TestPSUpdater), intent(inout) :: this
    real(r8), parameter :: pwtcol_old(3) = [0.5_r8, 0.0_r8, 0.5_r8]
    real(r8), parameter :: pwtcol_new(3) = [0.4_r8, 0.1_r8, 0.5_r8]
    type(patch_state_updater_type) :: ps_updater
    real(r8) :: var(4)

    ! Setup

    call this%do_all_setup_with_n_vegetated_patches(ps_updater, &
         pwtcol_old = pwtcol_old, &
         pwtcol_new = pwtcol_new)

    var = [2._r8, 3._r8, 4._r8, 5._r8]

    ! Exercise
    call ps_updater%update_patch_state(bounds, &
         this%numf, this%filter, var)

    ! Verify
    @assertEqual(0._r8, var(2))
  end subroutine areaIncreasesFromZero

  @Test
  subroutine areaIncreases_withSeed(this)
    ! area increases from non-zero with an additional seed amount
    class(TestPSUpdater), intent(inout) :: this
    ! The second patch is the patch of interest
    real(r8), parameter :: pwtcol_old(3) = [0.3_r8, 0.2_r8, 0.5_r8]
    real(r8), parameter :: pwtcol_new(3) = [0.2_r8, 0.3_r8, 0.5_r8]
    real(r8), parameter :: natveg_weight = 0.5_r8
    type(patch_state_updater_type) :: ps_updater
    real(r8) :: var(4)
    real(r8) :: seed(4)
    real(r8) :: seed_addition(4)
    real(r8) :: expected_seed_addition

    call this%do_all_setup_with_n_vegetated_patches(ps_updater, &
         pwtcol_old = pwtcol_old, &
         pwtcol_new = pwtcol_new, &
         natveg_weight_old = natveg_weight)

    var = [2._r8, 3._r8, 4._r8, 5._r8]
    seed = [0._r8, 9._r8, 0._r8, 0._r8]
    seed_addition = [22._r8, 23._r8, 24._r8, 25._r8]
    expected_seed_addition = seed_addition(2) + seed(2) * 0.1_r8 * natveg_weight

    ! Exercise
    call ps_updater%update_patch_state(bounds, &
         this%numf, this%filter, var, &
         seed = seed, &
         seed_addition = seed_addition)

    ! Verify
    ! Expected value of var(2) is:
    ! 3 * (pwtcol_old(2)/pwtcol_new(2)) +
    !   seed(2) * (pwtcol_new(2) - pwtcol_old(2))/pwtcol_new(2)
    ! = 3 * 2/3 + 9 * 1/3
    ! = 5
    @assertEqual(5._r8, var(2), tolerance=tol)
    @assertEqual(expected_seed_addition, seed_addition(2), tolerance=tol)
  end subroutine areaIncreases_withSeed

  @Test
  subroutine colAreaIncreases_withSeed(this)
    ! Column area increases with no change in pwtcol, with an additional seed amount
    class(TestPSUpdater), intent(inout) :: this
    ! The second patch is the patch of interest
    real(r8), parameter :: pwtcol(3) = [0.3_r8, 0.2_r8, 0.5_r8]
    real(r8), parameter :: natveg_weight_old = 0.6_r8
    real(r8), parameter :: natveg_weight_new = 0.7_r8
    type(patch_state_updater_type) :: ps_updater
    real(r8) :: var(4)
    real(r8) :: seed(4)
    real(r8) :: seed_addition(4)
    real(r8) :: expected_var2
    real(r8) :: expected_seed_addition

    call this%do_all_setup_with_n_vegetated_patches(ps_updater, &
         pwtcol_old = pwtcol, &
         pwtcol_new = pwtcol, &
         natveg_weight_old = natveg_weight_old, &
         natveg_weight_new = natveg_weight_new)

    var = [2._r8, 3._r8, 4._r8, 5._r8]
    seed = [0._r8, 9._r8, 0._r8, 0._r8]
    seed_addition = [22._r8, 23._r8, 24._r8, 25._r8]
    ! In the calculation of expected_var2, we don't need pwtcol(2) because it doesn't
    ! change.
    expected_var2 = var(2) * natveg_weight_old / natveg_weight_new + &
         seed(2) * (natveg_weight_new - natveg_weight_old) / natveg_weight_new
    expected_seed_addition = seed_addition(2) + &
         seed(2) * pwtcol(2) * (natveg_weight_new - natveg_weight_old)

    ! Exercise
    call ps_updater%update_patch_state(bounds, &
         this%numf, this%filter, var, &
         seed = seed, &
         seed_addition = seed_addition)

    ! Verify
    @assertEqual(expected_var2, var(2), tolerance=tol)
    @assertEqual(expected_seed_addition, seed_addition(2), tolerance=tol)
  end subroutine colAreaIncreases_withSeed

  @Test
  subroutine areaDecreases(this)
    ! if area decreases, var should stay the same, and there should be a flux out
    class(TestPSUpdater), intent(inout) :: this
    ! The second patch is the patch of interest
    real(r8), parameter :: pwtcol_old(3) = [0.2_r8, 0.3_r8, 0.5_r8]
    real(r8), parameter :: pwtcol_new(3) = [0.3_r8, 0.2_r8, 0.5_r8]
    real(r8), parameter :: natveg_weight = 0.5_r8
    type(patch_state_updater_type) :: ps_updater
    real(r8) :: var(4)
    real(r8) :: flux_col_area(4)
    real(r8) :: flux_grc_area(4)

    call this%do_all_setup_with_n_vegetated_patches(ps_updater, &
         pwtcol_old = pwtcol_old, &
         pwtcol_new = pwtcol_new, &
         natveg_weight_old = natveg_weight)

    var = [2._r8, 3._r8, 4._r8, 5._r8]
    flux_col_area = [12._r8, 13._r8, 14._r8, 15._r8]
    flux_grc_area = [22._r8, 23._r8, 24._r8, 25._r8]

    ! Exercise
    call ps_updater%update_patch_state(bounds, &
         this%numf, this%filter, var, &
         flux_out_col_area = flux_col_area, &
         flux_out_grc_area = flux_grc_area)

    ! Verify
    ! flux_col_area(2) changes by (pwtcol_new(2) - pwtcol_old(2)) * var(2)
    @assertEqual(13._r8 - 0.3_r8, flux_col_area(2), tolerance=tol)
    ! flux_grc_area(2) changes by (pwtgcell_new(2) - pwtgcell_old(2)) * var(2)
    @assertEqual(23._r8 - 0.15_r8, flux_grc_area(2), tolerance=tol)
    ! same as starting state:
    @assertEqual(3._r8, var(2))
  end subroutine areaDecreases

  @Test
  subroutine colAreaDecreases(this)
    ! Column area decreases; var should stay the same, and there should be a flux out
    class(TestPSUpdater), intent(inout) :: this
    ! The second patch is the patch of interest
    real(r8), parameter :: pwtcol(3) = [0.2_r8, 0.3_r8, 0.5_r8]
    real(r8), parameter :: natveg_weight_old = 0.9_r8
    real(r8), parameter :: natveg_weight_new = 0.8_r8
    type(patch_state_updater_type) :: ps_updater
    real(r8) :: var(4)
    real(r8) :: flux_col_area(4)
    real(r8) :: flux_grc_area(4)

    call this%do_all_setup_with_n_vegetated_patches(ps_updater, &
         pwtcol_old = pwtcol, &
         pwtcol_new = pwtcol, &
         natveg_weight_old = natveg_weight_old, &
         natveg_weight_new = natveg_weight_new)

    var = [2._r8, 3._r8, 4._r8, 5._r8]
    flux_col_area = [12._r8, 13._r8, 14._r8, 15._r8]
    flux_grc_area = [22._r8, 23._r8, 24._r8, 25._r8]

    ! Exercise
    call ps_updater%update_patch_state(bounds, &
         this%numf, this%filter, var, &
         flux_out_col_area = flux_col_area, &
         flux_out_grc_area = flux_grc_area)

    ! Verify
    ! flux_grc_area(2) changes by (pwtgcell_new(2) - pwtgcell_old(2)) * var(2)
    @assertEqual(23._r8 - 0.09_r8, flux_grc_area(2), tolerance=tol)
    ! flux_col_area(2) changes by:
    !    ((pwtgcell_new(2) - pwtgcell_old(2)) / cwtgcell_old(2)) * var(2)
    @assertEqual(13._r8 - 0.1_r8, flux_col_area(2), tolerance=tol)
    ! same as starting state:
    @assertEqual(3._r8, var(2))
  end subroutine colAreaDecreases

  @Test
  subroutine multiplePatches_increase_zero_decrease(this)
    ! Test multiple patches: one that increases, one with zero change, and one that
    ! decreases. Make sure that new var and flux are correct in all of them
    class(TestPSUpdater), intent(inout) :: this
    real(r8), parameter :: pwtcol_old(3) = [0.2_r8, 0.5_r8, 0.3_r8]
    real(r8), parameter :: pwtcol_new(3) = [0.3_r8, 0.5_r8, 0.2_r8]
    real(r8), parameter :: natveg_weight = 0.5_r8
    type(patch_state_updater_type) :: ps_updater
    real(r8) :: var(4), expected_var(4)
    real(r8) :: flux_col_area(4), expected_flux_col_area(4)
    real(r8) :: flux_grc_area(4), expected_flux_grc_area(4)

    call this%do_all_setup_with_n_vegetated_patches(ps_updater, &
         pwtcol_old = pwtcol_old, &
         pwtcol_new = pwtcol_new, &
         natveg_weight_old = natveg_weight)

    var = [2._r8, 3._r8, 4._r8, 5._r8]
    expected_var = var
    expected_var(1) = 4._r8 / 3._r8
    flux_col_area = [12._r8, 13._r8, 14._r8, 15._r8]
    expected_flux_col_area = flux_col_area
    expected_flux_col_area(3) = flux_col_area(3) - 0.4_r8
    flux_grc_area = [22._r8, 23._r8, 24._r8, 25._r8]
    expected_flux_grc_area = flux_grc_area
    ! flux_grc_area(3) changes by (pwtgcell_new(3) - pwtgcell_old(3)) * var(3)
    expected_flux_grc_area(3) = flux_grc_area(3) - 0.2_r8

    ! Exercise
    call ps_updater%update_patch_state(bounds, &
         this%numf, this%filter, var, &
         flux_out_col_area = flux_col_area, &
         flux_out_grc_area = flux_grc_area)

    ! Verify
    @assertEqual(expected_var, var, tolerance=tol)
    @assertEqual(expected_flux_col_area, flux_col_area, tolerance=tol)
    @assertEqual(expected_flux_grc_area, flux_grc_area, tolerance=tol)
  end subroutine multiplePatches_increase_zero_decrease

  @Test
  subroutine areaDecreases_partitionFluxByType(this)
    ! Test decrease in area with flux out partitioned into two pieces based on a variable
    ! indexed by pft type
    class(TestPSUpdater), intent(inout) :: this
    ! The second patch is the patch of interest
    real(r8), parameter :: pwtcol_old(3) = [0.2_r8, 0.3_r8, 0.5_r8]
    real(r8), parameter :: pwtcol_new(3) = [0.3_r8, 0.2_r8, 0.5_r8]
    real(r8), parameter :: natveg_weight = 0.5_r8
    integer, parameter :: patch2_type = 4
    integer, parameter :: pft_types(3) = [1, patch2_type, 1]
    real(r8) :: flux1_fraction(0:mxpft)
    real(r8), parameter :: patch2_flux_fraction = 0.6_r8
    type(patch_state_updater_type) :: ps_updater
    real(r8) :: var(4)
    real(r8) :: expected_total_flux, expected_flux1, expected_flux2
    real(r8) :: flux1(4), flux2(4)

    call this%do_all_setup_with_n_vegetated_patches(ps_updater, &
         pwtcol_old = pwtcol_old, &
         pwtcol_new = pwtcol_new, &
         natveg_weight_old = natveg_weight, &
         pft_types = pft_types)

    var = [2._r8, 3._r8, 4._r8, 5._r8]
    flux1 = [12._r8, 13._r8, 14._r8, 15._r8]
    flux2 = [22._r8, 23._r8, 24._r8, 25._r8]

    flux1_fraction(:) = 0._r8
    flux1_fraction(patch2_type) = patch2_flux_fraction

    ! Exercise
    call ps_updater%update_patch_state_partition_flux_by_type(bounds, &
         this%numf, this%filter, flux1_fraction, &
         var, flux1, flux2)

    ! Verify
    ! Note that fluxes in this routine are expressed as per-unit-area-gridcell
    ! (equivalent to flux_grc_area in the main update_patch_state routine),
    ! so total flux is (pwtgcell_old(2) - pwtgcell_new(2)) * var(2)
    expected_total_flux = -0.15_r8
    expected_flux1 = expected_total_flux * patch2_flux_fraction
    expected_flux2 = expected_total_flux * (1._r8 - patch2_flux_fraction)
    ! For these assertions, we add the expected new flux to the original value of the flux:
    @assertEqual(13._r8 + expected_flux1, flux1(2), tolerance=tol)
    @assertEqual(23._r8 + expected_flux2, flux2(2), tolerance=tol)
  end subroutine areaDecreases_partitionFluxByType

end module test_patch_state_updater
