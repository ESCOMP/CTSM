module test_glc_elevclasses_are_same

  ! Tests of initInterpUtils: glc_elevclasses_are_same

  use pfunit_mod
  use initInterpUtils
  use shr_kind_mod , only : r8 => shr_kind_r8
  use ncdio_pio, only : file_desc_t, ncd_set_dim, ncd_set_var

  implicit none

  @TestCase
  type, extends(TestCase) :: TestGlcECSame
     type(file_desc_t) :: ncidi  ! input file to use for test
     type(file_desc_t) :: ncido  ! output file to use for test
   contains
     procedure :: setUp
     procedure :: tearDown
     procedure :: createFiles
  end type TestGlcECSame

  real(r8), parameter :: tol = 1.e-13_r8

contains

  subroutine setUp(this)
    class(TestGlcECSame), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestGlcECSame), intent(inout) :: this
  end subroutine tearDown

  subroutine createFiles(this, ec_bounds_ncidi, ec_bounds_ncido)
    ! Creates this%ncidi and this%ncido, filled with correct glc_nec and glc_nec1
    ! dimensions and glc_elevclass_bounds data.
    class(TestGlcECSame), intent(inout) :: this
    real(r8), intent(in) :: ec_bounds_ncidi(:)
    real(r8), intent(in) :: ec_bounds_ncido(:)

    this%ncidi = file_desc_t()
    this%ncido = file_desc_t()

    call ncd_set_dim(this%ncidi, 'glc_nec', size(ec_bounds_ncidi)-1)
    call ncd_set_dim(this%ncidi, 'glc_nec1', size(ec_bounds_ncidi))
    call ncd_set_var(ncid = this%ncidi, &
         varname = 'glc_elevclass_bounds', &
         data = reshape(ec_bounds_ncidi, [size(ec_bounds_ncidi), 1]), &
         data_shape = [size(ec_bounds_ncidi)])

    call ncd_set_dim(this%ncido, 'glc_nec', size(ec_bounds_ncido)-1)
    call ncd_set_dim(this%ncido, 'glc_nec1', size(ec_bounds_ncido))
    call ncd_set_var(ncid = this%ncido, &
         varname = 'glc_elevclass_bounds', &
         data = reshape(ec_bounds_ncido, [size(ec_bounds_ncido), 1]), &
         data_shape = [size(ec_bounds_ncido)])
  end subroutine createFiles

  @Test
  subroutine different_num_ec(this)
    class(TestGlcECSame), intent(inout) :: this
    logical :: my_result

    call this%createFiles( &
         ec_bounds_ncidi = [0._r8, 1._r8, 2._r8], &
         ec_bounds_ncido = [0._r8, 1._r8, 2._r8, 3._r8])

    my_result = glc_elevclasses_are_same(this%ncidi, this%ncido)

    @assertFalse(my_result)
  end subroutine different_num_ec

  @Test
  subroutine different_bounds(this)
    class(TestGlcECSame), intent(inout) :: this
    logical :: my_result

    call this%createFiles( &
         ec_bounds_ncidi = [0._r8, 1._r8, 2._r8], &
         ec_bounds_ncido = [0._r8, 1._r8, 4._r8])

    my_result = glc_elevclasses_are_same(this%ncidi, this%ncido)

    @assertFalse(my_result)
  end subroutine different_bounds

  @Test
  subroutine same(this)
    class(TestGlcECSame), intent(inout) :: this
    real(r8), parameter :: diff = 1.e-12
    logical :: my_result

    ! Should be robust to differences within roundoff
    call this%createFiles( &
         ec_bounds_ncidi = [0._r8, 1._r8, 2._r8], &
         ec_bounds_ncido = [0._r8, 1._r8, 2._r8+diff])

    my_result = glc_elevclasses_are_same(this%ncidi, this%ncido)

    @assertTrue(my_result)
  end subroutine same

end module test_glc_elevclasses_are_same
