module test_init_interp_multilevel_interp

  ! Tests of initInterpMultilevelInterp

  use pfunit_mod
  use initInterpMultilevelInterp
  use multilevel_interp_factory
  use shr_kind_mod , only : r8 => shr_kind_r8
  use clm_varcon, only : spval, ispval

  implicit none

  @TestCase
  type, extends(TestCase) :: TestInitInterpMultilevelInterp
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestInitInterpMultilevelInterp

  real(r8), parameter :: tol = 1.e-13_r8

  ! Tests use this destination index. Some other indices get filled with garbage values to
  ! make sure we're accessing the correct points.
  integer, parameter :: index_dest = 3

  integer, parameter :: npts_dest = index_dest + 1

contains

  ! ------------------------------------------------------------------------
  ! Helper methods
  ! ------------------------------------------------------------------------

  subroutine setUp(this)
    class(TestInitInterpMultilevelInterp), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestInitInterpMultilevelInterp), intent(inout) :: this
  end subroutine tearDown

  function create_interpolator_no_levclasses(coordinates_source, coordinates_dest) &
       result(interpolator)
    ! Arguments:
    type(interp_multilevel_interp_type) :: interpolator  ! function result
    real(r8), intent(in) :: coordinates_source(:)  ! coordinates in source data for index_dest
    real(r8), intent(in) :: coordinates_dest(:)    ! coordinates in dest data for index_dest
    !-----------------------------------------------------------------------

    interpolator = create_multilevel_interp_no_levclasses( &
         coordinates_source = coordinates_source, &
         coordinates_dest = coordinates_dest, &
         index_dest = index_dest, &
         npts_dest = npts_dest)

  end function create_interpolator_no_levclasses

  function create_interpolator_with_levclasses(coordinates_source, coordinates_dest, &
       level_classes_source, level_classes_dest) &
       result(interpolator)
    ! Arguments:
    type(interp_multilevel_interp_type) :: interpolator  ! function result
    real(r8), intent(in) :: coordinates_source(:)   ! coordinates in source data for index_dest
    real(r8), intent(in) :: coordinates_dest(:)     ! coordinates in dest data for index_dest
    integer , intent(in) :: level_classes_source(:) ! class indices in source data for index_dest
    integer , intent(in) :: level_classes_dest(:)   ! class indices in dest data for index_dest
    !-----------------------------------------------------------------------

    interpolator = create_multilevel_interp_with_levclasses( &
         coordinates_source = coordinates_source, &
         coordinates_dest = coordinates_dest, &
         level_classes_source = level_classes_source, &
         level_classes_dest = level_classes_dest, &
         index_dest = index_dest, &
         npts_dest = npts_dest)

  end function create_interpolator_with_levclasses

  ! ------------------------------------------------------------------------
  ! Tests: no level classes
  ! ------------------------------------------------------------------------

  @Test
  subroutine sameLevels_copies(this)
    ! If the destination levels exactly match the source levels, the source data should
    ! be copied to the destination data
    class(TestInitInterpMultilevelInterp), intent(inout) :: this
    type(interp_multilevel_interp_type) :: interpolator
    real(r8) :: data_dest(3) = 0._r8
    real(r8), parameter :: data_source(3) = [11._r8, 12._r8, 13._r8]
    real(r8), parameter :: coordinates(3) = [1._r8, 2._r8, 3._r8]

    interpolator = create_interpolator_no_levclasses( &
         coordinates_source = coordinates, &
         coordinates_dest   = coordinates)

    call interpolator%interp_multilevel(data_dest, data_source, index_dest)

    @assertEqual(data_source, data_dest)

  end subroutine sameLevels_copies

  @Test
  subroutine allWithinBounds_interpolates(this)
    ! If the destination has different levels, but all levels are within the bounds of
    ! the source, the destination data should simply be interpolated from the source data.
    !
    ! This tests interpolation to multiple destination levels at once.

    class(TestInitInterpMultilevelInterp), intent(inout) :: this
    type(interp_multilevel_interp_type) :: interpolator
    real(r8) :: data_dest(3) = 0._r8
    real(r8) :: data_dest_expected(3)
    real(r8), parameter :: data_source(5) = [11._r8, 12._r8, 13._r8, 14._r8, 15._r8]
    real(r8), parameter :: coordinates_source(5) = [21._r8, 22._r8, 23._r8, 24._r8, 25._r8]
    real(r8), parameter :: coordinates_dest(3) = [21.5_r8, 22.75_r8, 24.5_r8]

    interpolator = create_interpolator_no_levclasses( &
         coordinates_source = coordinates_source, &
         coordinates_dest   = coordinates_dest)

    call interpolator%interp_multilevel(data_dest, data_source, index_dest)

    data_dest_expected = [11.5_r8, 12.75_r8, 14.5_r8]

    @assertEqual(data_dest_expected, data_dest, tolerance=tol)

  end subroutine allWithinBounds_interpolates

  @Test
  subroutine greaterThanLastLevel_copiesLastLevel(this)
    ! If the destination level is greater than the last source level, it should copy data
    ! from the last source level
    class(TestInitInterpMultilevelInterp), intent(inout) :: this
    type(interp_multilevel_interp_type) :: interpolator
    real(r8) :: data_dest(1) = 0._r8
    real(r8), parameter :: data_source(3) = [11._r8, 12._r8, 13._r8]
    real(r8), parameter :: coordinates_source(3) = [21._r8, 22._r8, 23._r8]
    real(r8), parameter :: coordinates_dest(1) = [24._r8]

    interpolator = create_interpolator_no_levclasses( &
         coordinates_source = coordinates_source, &
         coordinates_dest   = coordinates_dest)

    call interpolator%interp_multilevel(data_dest, data_source, index_dest)

    @assertEqual(data_source(3), data_dest)

  end subroutine greaterThanLastLevel_copiesLastLevel

  @Test
  subroutine lessThanFirstLevel_copiesFirstLevel(this)
    ! If the destination level is less than the first source level, it should copy data
    ! from the first source level
    class(TestInitInterpMultilevelInterp), intent(inout) :: this
    type(interp_multilevel_interp_type) :: interpolator
    real(r8) :: data_dest(1) = 0._r8
    real(r8), parameter :: data_source(3) = [11._r8, 12._r8, 13._r8]
    real(r8), parameter :: coordinates_source(3) = [21._r8, 22._r8, 23._r8]
    real(r8), parameter :: coordinates_dest(1) = [20._r8]

    interpolator = create_interpolator_no_levclasses( &
         coordinates_source = coordinates_source, &
         coordinates_dest   = coordinates_dest)

    call interpolator%interp_multilevel(data_dest, data_source, index_dest)

    @assertEqual(data_source(1), data_dest)

  end subroutine lessThanFirstLevel_copiesFirstLevel

  @Test
  subroutine noSourceLevels_leavesDestinationUnchanged(this)
    ! If there are no source levels, then the destination should be left at its original
    ! value
    class(TestInitInterpMultilevelInterp), intent(inout) :: this
    type(interp_multilevel_interp_type) :: interpolator
    real(r8), parameter :: data_orig = 17._r8
    real(r8) :: data_dest(1)
    real(r8) :: data_source(0)
    real(r8) :: coordinates_source(0)
    real(r8), parameter :: coordinates_dest(1) = [20._r8]

    interpolator = create_interpolator_no_levclasses( &
         coordinates_source = coordinates_source, &
         coordinates_dest   = coordinates_dest)

    data_dest(1) = data_orig
    call interpolator%interp_multilevel(data_dest, data_source, index_dest)

    @assertEqual(data_orig, data_dest)
  end subroutine noSourceLevels_leavesDestinationUnchanged

  ! ------------------------------------------------------------------------
  ! Tests: with level classes
  ! ------------------------------------------------------------------------

  @Test
  subroutine noSourceLevelsInClass_leavesDestinationUnchanged(this)
    ! If there are no source levels in the destination's class, then the destination
    ! should be left at its original value
    class(TestInitInterpMultilevelInterp), intent(inout) :: this
    type(interp_multilevel_interp_type) :: interpolator
    real(r8), parameter :: data_orig = 17._r8
    real(r8) :: data_dest(1)
    real(r8), parameter :: data_source(3) = [11._r8, 12._r8, 13._r8]
    real(r8), parameter :: coordinates_source(3) = [21._r8, 22._r8, 23._r8]
    real(r8), parameter :: coordinates_dest(1) = [22._r8]
    integer, parameter :: level_classes_source(3) = [2, 2, 2]
    integer, parameter :: level_classes_dest(1) = [1]

    interpolator = create_interpolator_with_levclasses( &
         coordinates_source = coordinates_source, &
         coordinates_dest   = coordinates_dest, &
         level_classes_source = level_classes_source, &
         level_classes_dest   = level_classes_dest)

    data_dest(1) = data_orig
    call interpolator%interp_multilevel(data_dest, data_source, index_dest)

    @assertEqual(data_orig, data_dest)

  end subroutine noSourceLevelsInClass_leavesDestinationUnchanged

  @Test
  subroutine destLevelIsSpval_leavesDestinationUnchanged(this)
    ! If the destination level class is ispval, then the destination should be left at
    ! its original value
    class(TestInitInterpMultilevelInterp), intent(inout) :: this
    type(interp_multilevel_interp_type) :: interpolator
    real(r8), parameter :: data_orig = 17._r8
    real(r8) :: data_dest(1)
    real(r8), parameter :: data_source(3) = [11._r8, 12._r8, 13._r8]
    real(r8), parameter :: coordinates_source(3) = [21._r8, 22._r8, 23._r8]
    real(r8), parameter :: coordinates_dest(1) = [22._r8]
    ! Note that some source classes are 1, some are ispval (so that there is at least one
    ! level whose class is the same as the destination class: both are ispval)
    integer, parameter :: level_classes_source(3) = [1, ispval, 1]
    integer, parameter :: level_classes_dest(1) = [ispval]

    interpolator = create_interpolator_with_levclasses( &
         coordinates_source = coordinates_source, &
         coordinates_dest   = coordinates_dest, &
         level_classes_source = level_classes_source, &
         level_classes_dest   = level_classes_dest)

    data_dest(1) = data_orig
    call interpolator%interp_multilevel(data_dest, data_source, index_dest)

    @assertEqual(data_orig, data_dest)
  end subroutine destLevelIsSpval_leavesDestinationUnchanged

  @Test
  subroutine dataInDifferentClasses_subsetsSourceLevelsByClass(this)
    ! For data points in two different classes: Each data level's interpolation should
    ! just consider the source points in that class
    class(TestInitInterpMultilevelInterp), intent(inout) :: this
    type(interp_multilevel_interp_type) :: interpolator
    real(r8) :: data_dest(2) = 0._r8
    real(r8) :: data_dest_expected(2)
    real(r8), parameter :: data_source(4) =          [11._r8, 62._r8, 13._r8, 64._r8]
    real(r8), parameter :: coordinates_source(4) =   [21._r8, 22._r8, 23._r8, 24._r8]
    integer , parameter :: level_classes_source(4) = [1     , 2     , 1     , 2]
    ! The destination points are constructed so that the points fall exactly at one of
    ! the source coordinates, but from the wrong class. So, if classes were not
    ! considered, the destination data would be equal to the source data from the level
    ! matching coordinates_dest; with classes, however, we need to interpolate from the
    ! two adjacent points.
    real(r8), parameter :: coordinates_dest(2)   = [22._r8, 23._r8]
    integer , parameter :: level_classes_dest(2) = [1     , 2]
    
    interpolator = create_interpolator_with_levclasses( &
         coordinates_source = coordinates_source, &
         coordinates_dest   = coordinates_dest, &
         level_classes_source = level_classes_source, &
         level_classes_dest   = level_classes_dest)

    call interpolator%interp_multilevel(data_dest, data_source, index_dest)

    data_dest_expected = [12._r8, 63._r8]

    @assertEqual(data_dest_expected, data_dest)
  end subroutine dataInDifferentClasses_subsetsSourceLevelsByClass

  @Test
  subroutine monotonicCheck_ignoresNonExistentLevels(this)
    ! Make sure that the test for monotonicity correctly ignores levels whose class is
    ! ispval
    class(TestInitInterpMultilevelInterp), intent(inout) :: this
    type(interp_multilevel_interp_type) :: interpolator

    ! Exercise
    interpolator = create_interpolator_with_levclasses( &
         coordinates_source = [1._r8, 2._r8, 1.5_r8, 3._r8], &
         coordinates_dest = [1._r8], &
         level_classes_source = [1,1,ispval,1], &
         level_classes_dest = [1])

    ! No assertion: The test passes as long as the constructor doesn't abort
  end subroutine monotonicCheck_ignoresNonExistentLevels

  ! ------------------------------------------------------------------------
  ! Tests: no level classes, but spval in source and/or destination data
  ! ------------------------------------------------------------------------

  @Test
  subroutine destIsSpval_leavesDestinationUnchanged(this)
    ! If the destination data is spval, then the destination should be left at spval
    class(TestInitInterpMultilevelInterp), intent(inout) :: this
    type(interp_multilevel_interp_type) :: interpolator
    real(r8) :: data_dest(1)
    real(r8), parameter :: data_source(3) = [11._r8, 12._r8, 13._r8]
    real(r8), parameter :: coordinates_source(3) = [21._r8, 22._r8, 23._r8]
    real(r8), parameter :: coordinates_dest(1) = [22._r8]

    interpolator = create_interpolator_no_levclasses( &
         coordinates_source = coordinates_source, &
         coordinates_dest   = coordinates_dest)

    data_dest(1) = spval
    call interpolator%interp_multilevel(data_dest, data_source, index_dest)

    @assertEqual(spval, data_dest)
  end subroutine destIsSpval_leavesDestinationUnchanged

  @Test
  subroutine sourceSpvalPoints_areIgnored(this)
    ! If the source contains spval values in data, those levels should be ignored
    class(TestInitInterpMultilevelInterp), intent(inout) :: this
    type(interp_multilevel_interp_type) :: interpolator
    real(r8) :: data_dest(1) = 0._r8
    real(r8) :: data_dest_expected(1)
    real(r8), parameter :: data_source(4) = [11._r8, spval, spval, 14._r8]
    ! coordinates_source are unevenly spaced to make sure we don't accidentally use
    ! coordinates corresponding to the spval points:
    real(r8), parameter :: coordinates_source(4) = [21._r8, 22.4_r8, 23.9_r8, 24._r8]
    ! Note that the destination level falls in between the two source levels that have
    ! spval - these should be ignored and the interpolation should instead use the other
    ! points:
    real(r8), parameter :: coordinates_dest(1) = [22.5_r8]

    interpolator = create_interpolator_no_levclasses( &
         coordinates_source = coordinates_source, &
         coordinates_dest   = coordinates_dest)

    call interpolator%interp_multilevel(data_dest, data_source, index_dest)

    data_dest_expected(1) = 12.5_r8
    @assertEqual(data_dest_expected, data_dest, tolerance=tol)
  end subroutine sourceSpvalPoints_areIgnored

end module test_init_interp_multilevel_interp
