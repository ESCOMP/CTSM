module test_init_interp_multilevel_snow

  ! Tests of initInterpMultilevelSnow

  use pfunit_mod
  use initInterpMultilevelSnow
  use shr_kind_mod , only : r8 => shr_kind_r8

  implicit none

  @TestCase
  type, extends(TestCase) :: TestInitInterpMultilevelSnow
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestInitInterpMultilevelSnow

  real(r8), parameter :: tol = 1.e-13_r8

  ! Tests use this destination index. Some other indices get filled with garbage values to
  ! make sure we're accessing the correct points.
  integer, parameter :: index_dest = 3

  integer, parameter :: npts_dest = index_dest + 1

contains

  ! ------------------------------------------------------------------------
  ! Helper methods
  ! ------------------------------------------------------------------------

  subroutine setUp(this)
    class(TestInitInterpMultilevelSnow), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestInitInterpMultilevelSnow), intent(inout) :: this
  end subroutine tearDown

  function create_interpolator(num_snow_layers_source) result(interpolator)
    ! Arguments:
    type(interp_multilevel_snow_type) :: interpolator ! function result
    integer, intent(in) :: num_snow_layers_source  ! number of existing snow layers for index_dest

    ! Local variables:
    integer, allocatable :: num_snow_layers_source_all(:)
    character(len=*), parameter :: num_layers_name = 'NUM_LAYERS'
    !-----------------------------------------------------------------------

    allocate(num_snow_layers_source_all(npts_dest))

    num_snow_layers_source_all(:) = 0
    num_snow_layers_source_all(index_dest) = num_snow_layers_source

    interpolator = interp_multilevel_snow_type( &
         num_snow_layers_source = num_snow_layers_source_all, &
         num_layers_name = num_layers_name)

  end function create_interpolator

  ! ------------------------------------------------------------------------
  ! Begin tests
  ! ------------------------------------------------------------------------

  @Test
  subroutine moreDestLevels_twoSourceLevels(this)
    ! More dest levels than source levels; only some source levels have snow present
    class(TestInitInterpMultilevelSnow), intent(inout) :: this
    type(interp_multilevel_snow_type) :: interpolator
    real(r8) :: data_dest(5) = 1000._r8
    real(r8) :: data_dest_expected(5)
    real(r8) :: data_source(3) = [11._r8, 12._r8, 13._r8]

    interpolator = create_interpolator(num_snow_layers_source = 2)

    call interpolator%interp_multilevel(data_dest, data_source, index_dest)

    data_dest_expected(1:2) = 0._r8
    data_dest_expected(3:5) = data_source(:)
    @assertEqual(data_dest_expected, data_dest)
  end subroutine moreDestLevels_twoSourceLevels

  @Test
  subroutine sameDestLevels(this)
    ! Same number of levels in dest as source; only some source levels have snow present
    class(TestInitInterpMultilevelSnow), intent(inout) :: this
    type(interp_multilevel_snow_type) :: interpolator
    real(r8) :: data_dest(5) = 1000._r8
    real(r8) :: data_dest_expected(5)
    integer  :: i
    real(r8) :: data_source(5) = [ (i, i=11,15) ]

    interpolator = create_interpolator(num_snow_layers_source = 3)
    call interpolator%interp_multilevel(data_dest, data_source, index_dest)

    data_dest_expected(:) = data_source(:)
    @assertEqual(data_dest_expected, data_dest)
  end subroutine sameDestLevels
 
  @Test
  subroutine fewerDestLevels_moreThanExist(this)
    ! Fewer snow levels in dest than source, but dest has more levels than the number of
    ! existing snow layers in source
    class(TestInitInterpMultilevelSnow), intent(inout) :: this
    type(interp_multilevel_snow_type) :: interpolator
    real(r8) :: data_dest(5) = 1000._r8
    real(r8) :: data_dest_expected(5)
    integer  :: i
    real(r8) :: data_source(9) = [ (i, i=11,19) ]

    interpolator = create_interpolator(num_snow_layers_source = 3)
    call interpolator%interp_multilevel(data_dest, data_source, index_dest)

    data_dest_expected(:) = data_source(5:9)
    @assertEqual(data_dest_expected, data_dest)
  end subroutine fewerDestLevels_moreThanExist

  @Test
  subroutine fewerDestLevels_sameAsExist(this)
    ! Fewer snow levels in dest than source; dest has the same number of levels as the
    ! number of existing snow layers in source
    class(TestInitInterpMultilevelSnow), intent(inout) :: this
    type(interp_multilevel_snow_type) :: interpolator
    real(r8) :: data_dest(5) = 1000._r8
    real(r8) :: data_dest_expected(5)
    integer  :: i
    real(r8) :: data_source(9) = [ (i, i=11,19) ]

    interpolator = create_interpolator(num_snow_layers_source = 5)
    call interpolator%interp_multilevel(data_dest, data_source, index_dest)

    data_dest_expected(:) = data_source(5:9)
    @assertEqual(data_dest_expected, data_dest)
  end subroutine fewerDestLevels_sameAsExist

  @Test
  subroutine fewerDestLevels_fewerThanExist(this)
    ! Fewer snow levels in dest than source; dest has fewer levels than the number of
    ! existing snow layers in source
    class(TestInitInterpMultilevelSnow), intent(inout) :: this
    type(interp_multilevel_snow_type) :: interpolator
    real(r8) :: data_dest(5) = 1000._r8
    real(r8) :: data_dest_expected(5)
    integer  :: i
    real(r8) :: data_source(9) = [ (i, i=11,19) ]

    interpolator = create_interpolator(num_snow_layers_source = 7)
    call interpolator%interp_multilevel(data_dest, data_source, index_dest)

    ! Note that the top level of source where snow exists is level 3
    data_dest_expected(:) = data_source(3:7)
    @assertEqual(data_dest_expected, data_dest)
  end subroutine fewerDestLevels_fewerThanExist

  @Test
  subroutine fewerDestLevels_allExist(this)
    ! Fewer snow levels in dest than source; all snow levels exist in source
    class(TestInitInterpMultilevelSnow), intent(inout) :: this
    type(interp_multilevel_snow_type) :: interpolator
    real(r8) :: data_dest(5) = 1000._r8
    real(r8) :: data_dest_expected(5)
    integer  :: i
    real(r8) :: data_source(9) = [ (i, i=11,19) ]

    interpolator = create_interpolator(num_snow_layers_source = 9)
    call interpolator%interp_multilevel(data_dest, data_source, index_dest)

    data_dest_expected(:) = data_source(1:5)
    @assertEqual(data_dest_expected, data_dest)
  end subroutine fewerDestLevels_allExist

end module test_init_interp_multilevel_snow
