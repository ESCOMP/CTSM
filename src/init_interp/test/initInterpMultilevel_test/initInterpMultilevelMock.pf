module initInterpMultilevelMock

  ! ------------------------------------------------------------------------
  ! !DESCRIPTION:
  ! This module defines a "mock" interpolator. All it does is assert that the
  ! interp_multilevel routine is called correctly.
  !
  ! !USES:
  use pfunit_mod
  use shr_kind_mod             , only : r8 => shr_kind_r8
  use initInterpMultilevelBase , only : interp_multilevel_type

  implicit none
  private
  save

  ! Public types

  public :: interp_multilevel_mock_type

  type, extends(interp_multilevel_type) :: interp_multilevel_mock_type
     private
     character(len=:), allocatable :: name

     ! Expected arguments to interp_multilevel
     real(r8), allocatable :: expected_data_dest(:)   ! original values in data_dest
     real(r8), allocatable :: expected_data_source(:)
     integer :: expected_index_dest
   contains
     ! Public methods from base class
     procedure :: interp_multilevel
     procedure :: check_npts
     procedure :: get_description
  end type interp_multilevel_mock_type

  interface interp_multilevel_mock_type
     module procedure constructor
  end interface interp_multilevel_mock_type

contains

  ! ========================================================================
  ! Constructors
  ! ========================================================================

  !-----------------------------------------------------------------------
  function constructor(name, expected_data_dest, expected_data_source, &
       expected_index_dest) result(this)
    !
    ! !DESCRIPTION:
    ! Creates an interp_multilevel_mock_type object
    !
    ! !USES:
    !
    ! !ARGUMENTS:
    type(interp_multilevel_mock_type) :: this  ! function result
    character(len=*), intent(in) :: name  ! name of this mock
    real(r8) , intent(in)    :: expected_data_dest(:)    ! original values in data_dest
    real(r8) , intent(in)    :: expected_data_source(:)
    integer  , intent(in)    :: expected_index_dest
    !
    ! !LOCAL VARIABLES:

    character(len=*), parameter :: subname = 'constructor'
    !-----------------------------------------------------------------------

    this%name = name
    allocate(this%expected_data_dest(size(expected_data_dest)))
    this%expected_data_dest = expected_data_dest
    allocate(this%expected_data_source(size(expected_data_source)))
    this%expected_data_source = expected_data_source
    this%expected_index_dest = expected_index_dest

  end function constructor

  ! ========================================================================
  ! Public methods
  ! ========================================================================

  subroutine interp_multilevel(this, data_dest, data_source, index_dest)
    ! Mock version: Asserts that it is called with correct arguments
    class(interp_multilevel_mock_type), intent(in) :: this
    real(r8) , intent(inout) :: data_dest(:)    ! not modified here, but intent(inout) to match interface
    real(r8) , intent(in)    :: data_source(:)
    integer  , intent(in)    :: index_dest

    @assertEqual(size(this%expected_data_dest), size(data_dest), message=this%name//': data_dest size')
    @assertEqual(this%expected_data_dest, data_dest, message=this%name//': data_dest')
    @assertEqual(size(this%expected_data_source), size(data_source), message=this%name//': data_source size')
    @assertEqual(this%expected_data_source, data_source, message=this%name//': data_source')
    @assertEqual(this%expected_index_dest, index_dest, message=this%name//': index_dest')

  end subroutine interp_multilevel

  subroutine check_npts(this, npts, varname)
    ! Stub
    class(interp_multilevel_mock_type), intent(in) :: this
    integer, intent(in) :: npts             ! number of dest points (on this processor)
    character(len=*), intent(in) :: varname ! variable name (for diagnostic output)

    ! Do nothing
  end subroutine check_npts

  pure function get_description(this) result(description)
    ! Stub
    character(len=:), allocatable :: description  ! function result
    class(interp_multilevel_mock_type), intent(in) :: this

    description = ' '
  end function get_description

end module initInterpMultilevelMock
