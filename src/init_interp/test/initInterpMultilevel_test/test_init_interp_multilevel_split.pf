module test_init_interp_multilevel_split

  ! Tests of initInterpMultilevelSplit

  use pfunit_mod
  use initInterpMultilevelSplit
  use initInterpMultilevelInterp, only : interp_multilevel_interp_type
  use initInterpMultilevelCopy, only : interp_multilevel_copy_type
  use initInterpMultilevelMock, only : interp_multilevel_mock_type
  use multilevel_interp_factory
  use shr_kind_mod , only : r8 => shr_kind_r8

  implicit none

  @TestCase
  type, extends(TestCase) :: TestInitInterpMultilevelSplit
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestInitInterpMultilevelSplit

  real(r8), parameter :: tol = 1.e-13_r8

  ! Tests use this destination index. Some other indices get filled with garbage values to
  ! make sure we're accessing the correct points.
  integer, parameter :: index_dest = 3

  integer, parameter :: npts_dest = index_dest + 1

contains

  subroutine setUp(this)
    class(TestInitInterpMultilevelSplit), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestInitInterpMultilevelSplit), intent(inout) :: this
  end subroutine tearDown

  @Test
  subroutine interpsCalledCorrectly(this)
    ! Test split interpolation with a "mock" to make sure the interpolators are called
    ! correctly.
    class(TestInitInterpMultilevelSplit), intent(inout) :: this
    type(interp_multilevel_split_type) :: interpolator
    type(interp_multilevel_mock_type), pointer :: interp_first, interp_second
    integer, parameter :: nlev_source_first = 2
    integer, parameter :: nlev_dest_first = 3
    integer, parameter :: start_source_second = nlev_source_first + 1
    integer, parameter :: start_dest_second = nlev_dest_first + 1
    integer, parameter :: nlev_source_second = 5
    integer, parameter :: nlev_dest_second = 7
    real(r8) :: data_source(nlev_source_first + nlev_source_second)
    real(r8) :: data_dest(nlev_dest_first + nlev_dest_second)
    integer :: i

    do i = 1, size(data_source)
       data_source(i) = 100._r8 + i
    end do
    do i = 1, size(data_dest)
       data_dest(i) = 200._r8 + i
    end do

    allocate(interp_first)
    interp_first = interp_multilevel_mock_type("interp_first", &
         expected_data_dest = data_dest(1:nlev_dest_first), &
         expected_data_source = data_source(1:nlev_source_first), &
         expected_index_dest = index_dest)

    allocate(interp_second)
    interp_second = interp_multilevel_mock_type("interp_second", &
         expected_data_dest = data_dest(start_dest_second:size(data_dest)), &
         expected_data_source = data_source(start_source_second:size(data_source)), &
         expected_index_dest = index_dest)

    interpolator = create_interp_multilevel_split_type( &
         interpolator_first_levels = interp_first, &
         interpolator_second_levels = interp_second, &
         num_second_levels_source = nlev_source_second, &
         num_second_levels_dest = nlev_dest_second)
    
    call interpolator%interp_multilevel(data_dest, data_source, index_dest)

    ! No assert section: mocks do the asserts for us

  end subroutine interpsCalledCorrectly

  @Test
  subroutine differentInterpolatorTypes(this)
    ! Test split interpolation with two different interpolator types, and with different
    ! numbers of levels in source and dest.
    class(TestInitInterpMultilevelSplit), intent(inout) :: this
    type(interp_multilevel_split_type) :: interpolator
    type(interp_multilevel_copy_type), pointer :: interp_first
    type(interp_multilevel_interp_type), pointer :: interp_second
    integer, parameter :: nlev_source_first = 4
    integer, parameter :: nlev_dest_first = 4
    integer, parameter :: nlev_source_second = 3
    integer, parameter :: nlev_dest_second = 2

    real(r8), parameter :: coordinates_source_second(nlev_source_second) = &
         [21._r8, 22._r8, 23._r8]
    real(r8), parameter :: coordinates_dest_second(nlev_dest_second) = &
         [21.5_r8, 22.5_r8]

    real(r8) :: data_dest(nlev_dest_first + nlev_dest_second) = 0._r8
    real(r8) :: data_dest_expected(nlev_dest_first + nlev_dest_second) = 0._r8
    real(r8), parameter :: data_source(nlev_source_first + nlev_source_second) = &
         [11._r8, 12._r8, 13._r8, 14._r8, 15._r8, 16._r8, 17._r8]


    allocate(interp_first)
    allocate(interp_second)

    interp_second = create_multilevel_interp_no_levclasses( &
         coordinates_source = coordinates_source_second, &
         coordinates_dest = coordinates_dest_second, &
         index_dest = index_dest, &
         npts_dest = npts_dest)

    interpolator = create_interp_multilevel_split_type( &
         interpolator_first_levels = interp_first, &
         interpolator_second_levels = interp_second, &
         num_second_levels_source = nlev_source_second, &
         num_second_levels_dest = nlev_dest_second)

    call interpolator%interp_multilevel(data_dest, data_source, index_dest)

    ! Determine expected result
    ! The first set of levels involves a simple copy:
    data_dest_expected(1:nlev_dest_first) = data_source(1:nlev_source_first)
    ! The second set of levels involves an interpolation:
    data_dest_expected((nlev_dest_first+1):(nlev_dest_first+nlev_dest_second)) = &
         [15.5_r8, 16.5_r8]

    @assertEqual(data_dest_expected, data_dest)

  end subroutine differentInterpolatorTypes

end module test_init_interp_multilevel_split
