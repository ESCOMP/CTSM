module test_CNPhenology

  ! Tests of CNPhenologyMod

  use funit
  use unittestSubgridMod
  use CNPhenologyMod
  use unittestTimeManagerMod, only : unittest_timemgr_setup, unittest_timemgr_teardown
  use unittestTimeManagerMod, only : unittest_timemgr_set_curr_date
  use unittestSimpleSubgridSetupsMod, only : setup_single_veg_patch, setup_n_veg_patches
  use shr_kind_mod , only : r8 => shr_kind_r8
  use pftconMod

  implicit none

  @TestCase
  type, extends(TestCase) :: TestCNPhenology
     integer  :: dtime
     real(r8) :: fracday
     real(r8) :: onset_gdd
     real(r8) :: onset_gddflag
     real(r8) :: soilt
     real(r8) :: soila10
     real(r8) :: t_a5min
     real(r8) :: dayl
     real(r8) :: snow_5day
     real(r8) :: ws_flag
     real(r8) :: crit_onset_gdd
     real(r8) :: season_decid_temperate
   contains
     procedure :: setUp
     procedure :: tearDown
     procedure :: calc_doonset
  end type TestCNPhenology

  real(r8), parameter :: tol = 1.e-13_r8

contains

  subroutine setUp(this)
    use clm_varctl, only : use_crop
    use clm_varcon, only: clm_varcon_init, zisoi, secspday
    use clm_varpar, only: nlevlak, nlevgrnd, nlevdecomp_full
    class(TestCNPhenology), intent(inout) :: this
    real(r8), parameter :: my_zisoi(5) = [0.01_r8, 0.02_r8, 2._r8, 4._r8, 6._r8]

    use_crop = .false.
    this%dtime = 1800
    this%fracday = real(this%dtime,r8) / secspday
    ! Setup time manager
    call unittest_timemgr_setup(dtime=this%dtime)

    this%onset_gdd = 0._r8      ! Will be reset...
    this%onset_gddflag = 0._r8  ! Will be reset...
    ! Temperatures
    this%soilt = 273._r8        ! Below freezing
    this%soila10 = 273._r8      ! Below freezing
    this%t_a5min = 273._r8      ! Below freezing

    this%dayl = 19500._r8       ! Below half of critical dayl 
    this%snow_5day = 1._r8      ! Above threshold
    this%ws_flag = 1._r8        ! After winter solstice
    this%crit_onset_gdd = 1._r8
    this%season_decid_temperate = 0._r8  ! Non temperate plant

    call setup_single_veg_patch(pft_type=1)

    nlevgrnd = size(my_zisoi)
    nlevlak = 10
    nlevdecomp_full = nlevgrnd
    call clm_varcon_init( is_simple_buildtemp = .true.)
    zisoi(0) = 0._r8
    zisoi(1:nlevgrnd) = my_zisoi(:)

    call CNPhenologySetParams()
    call CNPhenologyInit( bounds )
    call pftcon%InitForTesting()
    pftcon%season_decid_temperate =  this%season_decid_temperate

  end subroutine setUp

  subroutine tearDown(this)
    use clm_varcon, only: clm_varcon_clean
    class(TestCNPhenology), intent(inout) :: this

    call unittest_timemgr_teardown()
    call clm_varcon_clean()
    call unittest_subgrid_teardown()
    call pftcon%Clean()

  end subroutine tearDown

  subroutine calc_doonset(this, do_onset)
    class(TestCNPhenology), intent(inout) :: this
    logical, intent(out) :: do_onset

    do_onset = SeasonalDecidOnset( this%onset_gdd, this%onset_gddflag, this%soilt, this%soila10, this%t_a5min, this%dayl, &
                                   this%snow_5day, this%ws_flag, this%crit_onset_gdd, this%season_decid_temperate )
  end subroutine calc_doonset

  @Test
  subroutine check_doonset_normal(this)
    class(TestCNPhenology), intent(inout) :: this
    logical :: do_onset

    call CNPhenologySetNML( input_onset_thresh_depends_on_veg=.false.,        &
                            input_critical_daylight_method = critical_daylight_constant )
    this%onset_gdd = 1.0_r8
    this%crit_onset_gdd = 2.0_r8
    call this%calc_doonset( do_onset )
    @assertFalse( do_onset )
    this%onset_gdd = 2.000001_r8
    call this%calc_doonset( do_onset )
    @assertTrue( do_onset )
  end subroutine check_doonset_normal

  @Test
  subroutine check_doonset_vegdepend_buttemperate(this)
    class(TestCNPhenology), intent(inout) :: this
    logical :: do_onset

    ! This should be identical to the normal case
    call CNPhenologySetNML( input_onset_thresh_depends_on_veg=.true.,        &
                            input_critical_daylight_method = critical_daylight_constant )
    this%onset_gdd = 1.0_r8
    this%crit_onset_gdd = 2.0_r8
    this%season_decid_temperate = 1._r8
    call this%calc_doonset( do_onset )
    @assertFalse( do_onset )
    this%onset_gdd = 2.000001_r8
    call this%calc_doonset( do_onset )
    @assertTrue( do_onset )
  end subroutine check_doonset_vegdepend_buttemperate

  @Test
  subroutine check_doonset_vegdepend(this)
    class(TestCNPhenology), intent(inout) :: this
    logical :: do_onset

    call CNPhenologySetNML( input_onset_thresh_depends_on_veg=.true.,        &
                            input_critical_daylight_method = critical_daylight_constant )
    this%onset_gdd = 1.0_r8
    this%crit_onset_gdd = 2.0_r8
    this%season_decid_temperate = 0._r8
    call this%calc_doonset( do_onset )
    @assertFalse( do_onset )
    this%onset_gdd = 9999.000001_r8   ! No longer matters for veg dependent case
    call this%calc_doonset( do_onset )
    @assertFalse( do_onset )
    ! Set soila10 above freezing should still be off
    this%soila10 = 275._r8
    call this%calc_doonset( do_onset )
    @assertFalse( do_onset )
    ! Set t_a5min above freezing should still be off
    this%t_a5min = 275._r8
    call this%calc_doonset( do_onset )
    @assertFalse( do_onset )
    ! Set snow_5day below threshold should still be off
    this%snow_5day = 0._r8
    call this%calc_doonset( do_onset )
    @assertFalse( do_onset )
    ! Set dayl over half of critical and now should be on
    this%dayl = 19700._r8
    call this%calc_doonset( do_onset )
    @assertTrue( do_onset )
  end subroutine check_doonset_vegdepend
!
  @Test
  subroutine check_onsetflag_winter(this)
    class(TestCNPhenology), intent(inout) :: this
    logical :: do_onset

    call CNPhenologySetNML( input_onset_thresh_depends_on_veg=.false.,        &
                            input_critical_daylight_method = critical_daylight_constant )
    this%onset_gdd = 1.0_r8
    this%onset_gddflag = 1.0_r8
    this%ws_flag = 0._r8
    call this%calc_doonset( do_onset )
    @assertEqual( this%onset_gddflag, 0._r8 )
    @assertEqual( this%onset_gdd, 0._r8 )
    @assertFalse( do_onset )
  end subroutine check_onsetflag_winter


  @Test
  subroutine check_onsetflag_spring(this)
    use shr_const_mod   , only: SHR_CONST_TKFRZ
    class(TestCNPhenology), intent(inout) :: this
    logical :: do_onset
    real(r8), parameter :: temp = 5._r8

    call CNPhenologySetNML( input_onset_thresh_depends_on_veg=.false.,        &
                            input_critical_daylight_method = critical_daylight_constant )
    this%onset_gdd = 0.0_r8
    this%onset_gddflag = 0._r8
    this%ws_flag = 1._r8
    this%soilt = 270._r8
    call this%calc_doonset( do_onset )
    @assertEqual( this%onset_gddflag, 1._r8 )
    @assertEqual( this%onset_gdd, 0._r8 )
    @assertFalse( do_onset )
    this%soilt = SHR_CONST_TKFRZ + temp
    this%onset_gdd = 0.0_r8
    this%onset_gddflag = 0._r8
    call this%calc_doonset( do_onset )
    @assertEqual( this%onset_gddflag, 1._r8 )
    @assertEqual( this%onset_gdd, temp*this%fracday )
    @assertFalse( do_onset )
  end subroutine check_onsetflag_spring

  @Test
  subroutine check_crit_dayl_normal(this)
    class(TestCNPhenology), intent(inout) :: this
    integer :: p, g
    real(r8) :: crit_daylat

    call CNPhenologySetNML( input_onset_thresh_depends_on_veg=.false.,        &
                            input_critical_daylight_method = critical_daylight_constant )
    g = bounds%begg
    p = bounds%begp
    crit_daylat = SeasonalCriticalDaylength( g, p )
    @assertEqual( 39200._r8, crit_daylat, tolerance=tol )
  end subroutine check_crit_dayl_normal

  @Test
  subroutine check_crit_dayl_dependsonlat(this)
    use GridcellType                    , only : grc
    class(TestCNPhenology), intent(inout) :: this
    integer :: p, g
    real(r8) :: crit_daylat

    call CNPhenologySetNML( input_onset_thresh_depends_on_veg=.false.,        &
                            input_critical_daylight_method = critical_daylight_depends_on_lat )
    g = bounds%begg
    p = bounds%begp
    grc%latdeg(g) = 0.0_r8
    crit_daylat = SeasonalCriticalDaylength( g, p )
    @assertEqual( 39200._r8, crit_daylat, tolerance=tol )
    grc%latdeg(g) = 65.0_r8
    crit_daylat = SeasonalCriticalDaylength( g, p )
    @assertEqual( 54000._r8, crit_daylat, tolerance=tol )
    grc%latdeg(g) = 90.0_r8
    crit_daylat = SeasonalCriticalDaylength( g, p )
    @assertEqual( 72000._r8, crit_daylat, tolerance=tol )
    grc%latdeg(g) = 44.4_r8
    crit_daylat = SeasonalCriticalDaylength( g, p )
    @assertEqual( 39200._r8, crit_daylat, tolerance=tol )
  end subroutine check_crit_dayl_dependsonlat

  @Test
  subroutine check_crit_dayl_dependsonveg(this)
    use PatchType                       , only : patch
    class(TestCNPhenology), intent(inout) :: this
    integer :: p, g
    real(r8) :: crit_daylat

    call CNPhenologySetNML( input_onset_thresh_depends_on_veg=.false.,        &
                            input_critical_daylight_method = critical_daylight_depends_on_veg )
    g = bounds%begg
    p = bounds%begp
    crit_daylat = SeasonalCriticalDaylength( g, p )
    @assertEqual( 54000._r8, crit_daylat, tolerance=tol )
    pftcon%season_decid_temperate = 1
    crit_daylat = SeasonalCriticalDaylength( g, p )
    @assertEqual( 39200._r8, crit_daylat, tolerance=tol )
  end subroutine check_crit_dayl_dependsonveg


  @Test
  subroutine check_crit_dayl_dependsonlatnveg(this)
    use GridcellType                    , only : grc
    class(TestCNPhenology), intent(inout) :: this
    integer :: p, g, lat
    real(r8) :: crit_daylat
    integer, parameter :: nlats = 4
    real(r8) :: test_lats(nlats) = (/     0._r8,    65._r8,    90._r8,    44._r8 /)
    real(r8) :: expected(nlats)  = (/ 39200._r8, 54000._r8, 72000._r8, 39200._r8 /)

    call CNPhenologySetNML( input_onset_thresh_depends_on_veg=.false.,        &
                            input_critical_daylight_method = critical_daylight_depends_on_latnveg )
    g = bounds%begg
    p = bounds%begp
    do lat = 1, nlats
       grc%latdeg(g) = test_lats(lat)
       crit_daylat = SeasonalCriticalDaylength( g, p )
       @assertEqual( expected(lat), crit_daylat, tolerance=tol )
    end do
    pftcon%season_decid_temperate = 1
    do lat = 1, nlats
       grc%latdeg(g) = test_lats(lat)
       crit_daylat = SeasonalCriticalDaylength( g, p )
       @assertEqual( 39200._r8, crit_daylat, tolerance=tol )
    end do
  end subroutine check_crit_dayl_dependsonlatnveg



end module test_CNPhenology
