module test_SpeciesIsotope

  ! Tests of SpeciesIsotopeType

  use funit
  use SpeciesIsotopeType
  use shr_kind_mod , only : r8 => shr_kind_r8

  implicit none

  @TestCase
  type, extends(TestCase) :: TestSpeciesIsotope
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestSpeciesIsotope

  real(r8), parameter :: tol = 1.e-13_r8

contains

  subroutine setUp(this)
    class(TestSpeciesIsotope), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestSpeciesIsotope), intent(inout) :: this
  end subroutine tearDown

  @Test
  subroutine histFname_noSuffix(this)
    class(TestSpeciesIsotope), intent(inout) :: this
    type(species_isotope_type) :: species
    character(len=:), allocatable :: fname

    species = species_isotope_type('C', '13')

    fname = species%hist_fname('FOO')

    @assertEqual('C13_FOOC', fname)
  end subroutine histFname_noSuffix

  @Test
  subroutine histFname_withSuffix(this)
    class(TestSpeciesIsotope), intent(inout) :: this
    type(species_isotope_type) :: species
    character(len=:), allocatable :: fname

    species = species_isotope_type('C', '13')

    fname = species%hist_fname('FOO', suffix='_BAR')

    @assertEqual('C13_FOOC_BAR', fname)
  end subroutine histFname_withSuffix

  @Test
  subroutine restFname_noSuffix(this)
    class(TestSpeciesIsotope), intent(inout) :: this
    type(species_isotope_type) :: species
    character(len=:), allocatable :: fname

    species = species_isotope_type('C', '13')

    fname = species%rest_fname('foo')

    @assertEqual('fooc_13', fname)
  end subroutine restFname_noSuffix

  @Test
  subroutine restFname_withSuffix(this)
    class(TestSpeciesIsotope), intent(inout) :: this
    type(species_isotope_type) :: species
    character(len=:), allocatable :: fname

    species = species_isotope_type('C', '13')

    fname = species%rest_fname('foo', suffix='_bar')

    @assertEqual('fooc_13_bar', fname)
  end subroutine restFname_withSuffix

  @Test
  subroutine getSpecies(this)
    class(TestSpeciesIsotope), intent(inout) :: this
    type(species_isotope_type) :: species
    character(len=:), allocatable :: species_name

    species = species_isotope_type('C', '13')

    species_name = species%get_species()

    @assertEqual('C13', species_name)
  end subroutine getSpecies

end module test_SpeciesIsotope
