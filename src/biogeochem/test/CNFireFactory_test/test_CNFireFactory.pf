module test_CNFireFactory

    ! Tests of CNFireFactory
  
    use funit
    use unittestSubgridMod, only : bounds
    use FireMethodType   , only : fire_method_type
    use CNFireFactoryMod
    use ESMF, only : ESMF_SUCCESS
    use shr_kind_mod , only : r8 => shr_kind_r8
    use clm_varctl, only : use_cn, iulog
  
    implicit none
  
  @TestCase
    type, extends(TestCase) :: TestCNFireFactory
       logical :: initialized = .false.
       class(fire_method_type), allocatable :: cnfire_method
     contains
       procedure :: setUp
       procedure :: tearDown
       procedure :: FireFactInit
       procedure :: turn_fire_emis_on
    end type TestCNFireFactory
  
  contains
  
    !-----------------------------------------------------------------------
  
    subroutine setUp(this)
      use shr_log_mod, only : shr_log_setLogUnit
      use ESMF, only : ESMF_Initialize, ESMF_IsInitialized
      use shr_sys_mod, only : shr_sys_system
      class(TestCNFireFactory), intent(inout) :: this

      integer :: rc
      logical :: esmf_initialized

      esmf_initialized = ESMF_IsInitialized( rc=rc )
      if (rc /= ESMF_SUCCESS) then
         stop 'Error in ESMF_IsInitialized'
      end if
      if ( .not. esmf_initialized )then
         call ESMF_Initialize( rc=rc )
         if (rc /= ESMF_SUCCESS) then
            stop 'Error in ESMF_Initialize'
         end if
      end if
      use_cn = .true.
      iulog = 6
      call shr_log_setLogUnit(iulog)
      this%initialized = .false.

    end subroutine setUp
    !-----------------------------------------------------------------------
  
    subroutine tearDown(this)
      use shr_sys_mod, only : shr_sys_system
      use shr_log_mod, only : shr_log_setLogUnit
      class(TestCNFireFactory), intent(inout) :: this

      integer :: rc

      ! A clean method should be added to the fire method class structures
      if ( this%initialized )then
         call this%cnfire_method%FireClean()
         deallocate( this%cnfire_method )
      end if
      ! IMPORTANT NOTE: DO NOT CALL ESMF_Finalize HERE!
      ! Calling ESMF_Finalize here, with full ESMF, means you couldn't call ESMF_Initialize again
      this%initialized = .false.

    end subroutine tearDown
  
    !-----------------------------------------------------------------------
  
    subroutine FireFactInit(this, fire_method)
      class(TestCNFireFactory), intent(inout) :: this
      character(len=*), intent(in) :: fire_method

      if ( trim(fire_method) /= "DO_NOT_SET") then
         call CNFireSetFireMethod( fire_method_in=fire_method )
      end if
      call create_cnfire_method(this%cnfire_method)
      call this%cnfire_method%FireInit(bounds)
      this%initialized = .true.

    end subroutine FireFactInit

    !-----------------------------------------------------------------------

    subroutine turn_fire_emis_on(this)
      use shr_fire_emis_mod, only : shr_fire_emis_readnl, shr_fire_emis_mechcomps_n
      use shr_sys_mod, only : shr_sys_system
      class(TestCNFireFactory), intent(inout) :: this

      ! NOTE!: This is bad that this can be done directly without having it done through a namelist, or setter!
      shr_fire_emis_mechcomps_n = 2
    end subroutine turn_fire_emis_on

    !-----------------------------------------------------------------------

    @Test
    subroutine fire_method_not_set_fails(this)
      class(TestCNFireFactory), intent(inout) :: this
      character(100) :: expected_msg

      call this%FireFactInit( fire_method = "DO_NOT_SET")
      expected_msg = "ABORTED: Unknown option for namelist item fire_method: UNSET"
      @assertExceptionRaised(expected_msg)

    end subroutine fire_method_not_set_fails

    !-----------------------------------------------------------------------

    @Test
    subroutine fire_method_bad_fails(this)
      class(TestCNFireFactory), intent(inout) :: this
      character(100) :: expected_msg

      call this%FireFactInit( fire_method = "ZZTOP")   ! Set to an invalid option
      expected_msg = "ABORTED: Unknown option for namelist item fire_method: ZZTOP"
      @assertExceptionRaised(expected_msg)

    end subroutine fire_method_bad_fails

    !-----------------------------------------------------------------------

    @Test
    subroutine nofire_with_fire_emis_fails(this)
      class(TestCNFireFactory), intent(inout) :: this
      character(100) :: expected_msg

      call this%turn_fire_emis_on()
      call this%FireFactInit( fire_method = "nofire")
      expected_msg = "ABORTED: Having fire emissions on requires fire_method to be something besides nofire"
      @assertExceptionRaised(expected_msg)

    end subroutine nofire_with_fire_emis_fails

    !-----------------------------------------------------------------------

    @Test
    subroutine spcase_with_fire_emis_fails(this)
      use SatellitePhenologyMod, only : SatellitePhenologyInit
      class(TestCNFireFactory), intent(inout) :: this
      character(100) :: expected_msg

      use_cn = .false.
      call this%turn_fire_emis_on()
      call SatellitePhenologyInit( bounds )
      expected_msg = "ABORTED: Fire emission requires BGC to be on rather than a Satelitte Pheonology (SP) case"
      @assertExceptionRaised(expected_msg)

    end subroutine spcase_with_fire_emis_fails

    !-----------------------------------------------------------------------

    @Test
    subroutine li2014_works(this)
      class(TestCNFireFactory), intent(inout) :: this

      call this%FireFactInit( fire_method = "li2014qianfrc")

    end subroutine li2014_works

    !-----------------------------------------------------------------------

    !
    ! Test that default settings with ALL of the Li Fire options work by default
    ! (These tests are done one by one which makes them dead simple, but take up more code
    !  see the looping option below)
    !
    @Test
    subroutine li2016_works(this)
      class(TestCNFireFactory), intent(inout) :: this

      call this%FireFactInit( fire_method = "li2016crufrc")

    end subroutine li2016_works

    !-----------------------------------------------------------------------

    @Test
    subroutine li2021_works(this)
      class(TestCNFireFactory), intent(inout) :: this

      call this%FireFactInit( fire_method = "li2021gswpfrc")

    end subroutine li2021_works

    !-----------------------------------------------------------------------

    @Test
    subroutine li2024_works(this)
      class(TestCNFireFactory), intent(inout) :: this

      call this%FireFactInit( fire_method = "li2024gswpfrc")

    end subroutine li2024_works

    !-----------------------------------------------------------------------

    @Test
    subroutine li2024crujra_works(this)
      class(TestCNFireFactory), intent(inout) :: this

      call this%FireFactInit( fire_method = "li2024crujra")

    end subroutine li2024crujra_works

    !-----------------------------------------------------------------------

    !
    ! Test that default settings with ALL of the Li Fire options work when fire emissions
    ! are turned on. This test is done with a loop rather than one by one as above.
    ! This cuts down on the total test code, but also means that setUp and tearDown have
    ! to be explicitly called for example. Setup is always called before a test, and tearDown
    ! after each test)
    !

    @Test
    subroutine all_li_options_with_fire_emis_works(this)
      class(TestCNFireFactory), intent(inout) :: this
      integer, parameter :: noptions = 5
      integer :: i
      character(len=*), parameter :: fire_method_options(noptions) = (/ 'li2014qianfrc', 'li2016crufrc ', 'li2021gswpfrc', 'li2024gswpfrc', 'li2024crujra '/)

      do i = 1, noptions
         call this%setUp()       ! This is needed because of the loop over all options
         call this%turn_fire_emis_on()
         call this%FireFactInit( fire_method = fire_method_options(i) )
         call this%tearDown()    ! This is needed because of the loop over all options
      end do

    end subroutine all_li_options_with_fire_emis_works

    !-----------------------------------------------------------------------

end module test_CNFireFactory
