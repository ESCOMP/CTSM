module test_ComputeSeedAmounts

  ! Tests of CNVegComputeSeedMod: ComputeSeedAmounts

  use funit
  use CNVegComputeSeedMod
  use shr_kind_mod , only : r8 => shr_kind_r8
  use unittestSubgridMod
  use unittestSimpleSubgridSetupsMod
  use unittestFilterBuilderMod
  use pftconMod
  use CNSpeciesMod
  use PatchType
  use clm_varcon, only : c3_r2, c4_r2, c14ratio

  implicit none

  @TestCase
  type, extends(TestCase) :: TestComputeSeed
     ! filter
     integer :: numf
     integer, allocatable :: filter(:)
   contains
     procedure :: setUp
     procedure :: tearDown
     procedure :: do_ComputeSeedAmounts
  end type TestComputeSeed

  real(r8), parameter :: tol = 1.e-13_r8

  ! patch of interest
  integer, parameter :: POI = begp + 1

  ! PFT type in the patch of interest
  integer, parameter :: POI_TYPE = 7

  real(r8), parameter :: LEAFC_SEED = 12._r8
  real(r8), parameter :: DEADSTEMC_SEED = 13._r8

  ! leaf contents in the patch of interest
  real(r8), parameter :: LEAF_POI = 1._r8
  real(r8), parameter :: LEAF_STORAGE_POI = 2._r8
  real(r8), parameter :: LEAF_XFER_POI = 3._r8
  real(r8), parameter :: LEAF_TOTAL_POI = LEAF_POI + LEAF_STORAGE_POI + LEAF_XFER_POI

contains

  subroutine setUp(this)
    class(TestComputeSeed), intent(inout) :: this
    integer :: pft_types(begp:begp+2)

    ! Tests use a grid with a single gridcell containing 3 vegetated patches, with a
    ! filter active over all patches
    pft_types(:) = 1
    pft_types(POI) = POI_TYPE
    call setup_n_veg_patches(pwtcol = [0.25_r8, 0.5_r8, 0.25_r8], pft_types = pft_types)
    call filter_from_range(bounds%begp, bounds%endp, this%numf, this%filter)

    ! Set relevant pftcon values to defaults; these should be overridden by individual
    ! tests where they matter
    call pftcon%InitForTesting()
    pftcon%evergreen(:) = 0
    pftcon%woody(:) = 1
    pftcon%c3psn(:) = 1
    pftcon%leafcn(:) = 1._r8
    pftcon%deadwdcn(:) = 1._r8

  end subroutine setUp

  subroutine tearDown(this)
    class(TestComputeSeed), intent(inout) :: this

    call unittest_subgrid_teardown()
    call pftcon%Clean()
  end subroutine tearDown

  subroutine do_ComputeSeedAmounts(this, species, &
       ignore_current_state, &
       seed_leaf, seed_leaf_storage, seed_leaf_xfer, seed_deadstem)
    ! Wraps the call to ComputeSeedAmounts
    !
    ! Returns values for patch POI
    class(TestComputeSeed), intent(inout) :: this
    integer, intent(in) :: species

    ! if not provided, ignore_current_state is assumed to be false
    logical, intent(in), optional :: ignore_current_state

    ! The following outputs are all for patch POI
    real(r8), intent(out), optional :: seed_leaf
    real(r8), intent(out), optional :: seed_leaf_storage
    real(r8), intent(out), optional :: seed_leaf_xfer
    real(r8), intent(out), optional :: seed_deadstem

    real(r8) :: leaf_patch(bounds%begp:bounds%endp)
    real(r8) :: leaf_storage_patch(bounds%begp:bounds%endp)
    real(r8) :: leaf_xfer_patch(bounds%begp:bounds%endp)
    logical  :: compute_here_patch(bounds%begp:bounds%endp)
    logical  :: ignore_current_state_patch(bounds%begp:bounds%endp)
    real(r8) :: seed_leaf_patch(bounds%begp:bounds%endp)
    real(r8) :: seed_leaf_storage_patch(bounds%begp:bounds%endp)
    real(r8) :: seed_leaf_xfer_patch(bounds%begp:bounds%endp)
    real(r8) :: seed_deadstem_patch(bounds%begp:bounds%endp)

    leaf_patch(:) = 0._r8
    leaf_patch(POI) = LEAF_POI
    leaf_storage_patch(:) = 0._r8
    leaf_storage_patch(POI) = LEAF_STORAGE_POI
    leaf_xfer_patch(:) = 0._r8
    leaf_xfer_patch(POI) = LEAF_XFER_POI

    compute_here_patch(:) = .true.
    ignore_current_state_patch(:) = .false.
    if (present(ignore_current_state)) then
       ignore_current_state_patch(POI) = ignore_current_state
    end if

    call ComputeSeedAmounts(bounds, &
         this%numf, this%filter, &
         species = species, &
         leafc_seed = LEAFC_SEED, &
         deadstemc_seed = DEADSTEMC_SEED, &
         leaf_patch = leaf_patch, &
         leaf_storage_patch = leaf_storage_patch, &
         leaf_xfer_patch = leaf_xfer_patch, &
         compute_here_patch = compute_here_patch, &
         ignore_current_state_patch = ignore_current_state_patch, &
         seed_leaf_patch = seed_leaf_patch, &
         seed_leaf_storage_patch = seed_leaf_storage_patch, &
         seed_leaf_xfer_patch = seed_leaf_xfer_patch, &
         seed_deadstem_patch = seed_deadstem_patch)

    if (present(seed_leaf)) then
       seed_leaf = seed_leaf_patch(POI)
    end if
    if (present(seed_leaf_storage)) then
       seed_leaf_storage = seed_leaf_storage_patch(POI)
    end if
    if (present(seed_leaf_xfer)) then
       seed_leaf_xfer = seed_leaf_xfer_patch(POI)
    end if
    if (present(seed_deadstem)) then
       seed_deadstem = seed_deadstem_patch(POI)
    end if

  end subroutine do_ComputeSeedAmounts

  @Test
  subroutine c12_leaf(this)
    class(TestComputeSeed), intent(inout) :: this
    real(r8) :: seed_leaf
    real(r8) :: expected

    call this%do_ComputeSeedAmounts( &
         species = CN_SPECIES_C12, &
         seed_leaf = seed_leaf)

    expected = LEAFC_SEED * LEAF_POI / LEAF_TOTAL_POI
    @assertEqual(expected, seed_leaf, tolerance=tol)
  end subroutine c12_leaf

  @Test
  subroutine c12_leaf_storage(this)
    class(TestComputeSeed), intent(inout) :: this
    real(r8) :: seed_leaf_storage
    real(r8) :: expected

    call this%do_ComputeSeedAmounts( &
         species = CN_SPECIES_C12, &
         seed_leaf_storage = seed_leaf_storage)

    expected = LEAFC_SEED * LEAF_STORAGE_POI / LEAF_TOTAL_POI
    @assertEqual(expected, seed_leaf_storage, tolerance=tol)
  end subroutine c12_leaf_storage

  @Test
  subroutine c12_leaf_xfer(this)
    class(TestComputeSeed), intent(inout) :: this
    real(r8) :: seed_leaf_xfer
    real(r8) :: expected

    call this%do_ComputeSeedAmounts( &
         species = CN_SPECIES_C12, &
         seed_leaf_xfer = seed_leaf_xfer)

    expected = LEAFC_SEED * LEAF_XFER_POI / LEAF_TOTAL_POI
    @assertEqual(expected, seed_leaf_xfer, tolerance=tol)
  end subroutine c12_leaf_xfer

  @Test
  subroutine c12_deadstem_woody(this)
    class(TestComputeSeed), intent(inout) :: this
    real(r8) :: seed_deadstem
    real(r8) :: expected

    pftcon%woody(POI_TYPE) = 1

    call this%do_ComputeSeedAmounts( &
         species = CN_SPECIES_C12, &
         seed_deadstem = seed_deadstem)

    expected = DEADSTEMC_SEED
    @assertEqual(expected, seed_deadstem, tolerance=tol)
  end subroutine c12_deadstem_woody

  @Test
  subroutine c12_deadstem_nonwoody(this)
    class(TestComputeSeed), intent(inout) :: this
    real(r8) :: seed_deadstem

    pftcon%woody(POI_TYPE) = 0

    call this%do_ComputeSeedAmounts( &
         species = CN_SPECIES_C12, &
         seed_deadstem = seed_deadstem)

    @assertEqual(0._r8, seed_deadstem, tolerance=tol)
  end subroutine c12_deadstem_nonwoody

  @Test
  subroutine c12_leaf_ignoreCurrentState_evergreen(this)
    ! When ignoring the current state, for evergreen, all leaf seed amount should be put
    ! in the leaf itself
    class(TestComputeSeed), intent(inout) :: this
    real(r8) :: seed_leaf
    real(r8) :: expected

    pftcon%evergreen(POI_TYPE) = 1

    call this%do_ComputeSeedAmounts( &
         species = CN_SPECIES_C12, &
         ignore_current_state = .true., &
         seed_leaf = seed_leaf)

    expected = LEAFC_SEED
    @assertEqual(expected, seed_leaf, tolerance=tol)
  end subroutine c12_leaf_ignoreCurrentState_evergreen

  @Test
  subroutine c12_leaf_storage_ignoreCurrentState_nonEvergreen(this)
    ! When ignoring the current state, for evergreen, all leaf seed amount should be put
    ! in leaf storage
    class(TestComputeSeed), intent(inout) :: this
    real(r8) :: seed_leaf_storage
    real(r8) :: expected

    pftcon%evergreen(POI_TYPE) = 0

    call this%do_ComputeSeedAmounts( &
         species = CN_SPECIES_C12, &
         ignore_current_state = .true., &
         seed_leaf_storage = seed_leaf_storage)

    expected = LEAFC_SEED
    @assertEqual(expected, seed_leaf_storage, tolerance=tol)
  end subroutine c12_leaf_storage_ignoreCurrentState_nonEvergreen

  @Test
  subroutine c13_deadstem_woody_c3(this)
    class(TestComputeSeed), intent(inout) :: this
    real(r8) :: seed_deadstem
    real(r8) :: expected

    pftcon%woody(POI_TYPE) = 1
    pftcon%c3psn(POI_TYPE) = 1

    call this%do_ComputeSeedAmounts( &
         species = CN_SPECIES_C13, &
         seed_deadstem = seed_deadstem)

    expected = DEADSTEMC_SEED * c3_r2
    @assertEqual(expected, seed_deadstem, tolerance=tol)
  end subroutine c13_deadstem_woody_c3

  @Test
  subroutine c13_deadstem_woody_c4(this)
    class(TestComputeSeed), intent(inout) :: this
    real(r8) :: seed_deadstem
    real(r8) :: expected

    pftcon%woody(POI_TYPE) = 1
    pftcon%c3psn(POI_TYPE) = 0

    call this%do_ComputeSeedAmounts( &
         species = CN_SPECIES_C13, &
         seed_deadstem = seed_deadstem)

    expected = DEADSTEMC_SEED * c4_r2
    @assertEqual(expected, seed_deadstem, tolerance=tol)
  end subroutine c13_deadstem_woody_c4

  @Test
  subroutine c14_deadstem_woody(this)
    class(TestComputeSeed), intent(inout) :: this
    real(r8) :: seed_deadstem
    real(r8) :: expected

    pftcon%woody(POI_TYPE) = 1

    call this%do_ComputeSeedAmounts( &
         species = CN_SPECIES_C14, &
         seed_deadstem = seed_deadstem)

    expected = DEADSTEMC_SEED * c14ratio
    @assertEqual(expected, seed_deadstem, tolerance=tol)
  end subroutine c14_deadstem_woody

  @Test
  subroutine n_leaf(this)
    class(TestComputeSeed), intent(inout) :: this
    real(r8), parameter :: leafcn = 10._r8
    real(r8) :: seed_leaf
    real(r8) :: expected

    pftcon%leafcn(POI_TYPE) = leafcn

    call this%do_ComputeSeedAmounts( &
         species = CN_SPECIES_N, &
         seed_leaf = seed_leaf)

    expected = (LEAFC_SEED / leafcn) * (LEAF_POI / LEAF_TOTAL_POI)
    @assertEqual(expected, seed_leaf, tolerance=tol)
  end subroutine n_leaf

  @Test
  subroutine n_deadstem_woody(this)
    class(TestComputeSeed), intent(inout) :: this
    real(r8), parameter :: deadwdcn = 10._r8
    real(r8) :: seed_deadstem
    real(r8) :: expected

    pftcon%deadwdcn(POI_TYPE) = deadwdcn

    call this%do_ComputeSeedAmounts( &
         species = CN_SPECIES_N, &
         seed_deadstem = seed_deadstem)

    expected = DEADSTEMC_SEED / deadwdcn
    @assertEqual(expected, seed_deadstem, tolerance=tol)
  end subroutine n_deadstem_woody

  @Test
  subroutine nonveg(this)
    class(TestComputeSeed), intent(inout) :: this
    real(r8) :: seed_leaf, seed_leaf_storage, seed_leaf_xfer, seed_deadstem

    patch%itype(POI) = noveg

    call this%do_ComputeSeedAmounts( &
         species = CN_SPECIES_C12, &
         seed_leaf = seed_leaf, seed_leaf_storage = seed_leaf_storage, &
         seed_leaf_xfer = seed_leaf_xfer, seed_deadstem = seed_deadstem)

    @assertEqual(0._r8, seed_leaf)
    @assertEqual(0._r8, seed_leaf_storage)
    @assertEqual(0._r8, seed_leaf_xfer)
    @assertEqual(0._r8, seed_deadstem)
  end subroutine nonveg

end module test_ComputeSeedAmounts

