module test_shr_dust_emis

  ! Tests of shr_dust_emis_mod.F90 from CMEPS nuopc_cap_share

  use funit
  use shr_dust_emis_mod
  use unittestUtils    , only : endrun_msg

  implicit none

  @TestCase
  type, extends(TestCase) :: TestDustEmis
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestDustEmis

contains

  ! ========================================================================
  ! Helper routines
  ! ========================================================================

  subroutine setUp(this)
    class(TestDustEmis), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestDustEmis), intent(inout) :: this

  end subroutine tearDown



  ! ========================================================================
  ! Begin tests
  ! ========================================================================

   @Test
  subroutine check_if_initialized_aborts(this)
    ! Test that the check_if_initialized check aborts when called initially
    class(TestDustEmis), intent(inout) :: this
    logical :: not_init

    not_init = is_NOT_initialized()
    @assertExceptionRaised(endrun_msg('ERROR: dust emission namelist has NOT been read in yet, shr_dust_emis_mod is NOT initialized') )
    @assertTrue(not_init)

  end subroutine check_if_initialized_aborts

   @Test
  subroutine check_when_initialized_runs(this)
    ! Test that the initializiation check runs when it is initialized
    class(TestDustEmis), intent(inout) :: this
    logical :: not_init

    call dust_emis_set_options( 'Zender_2003', 'lnd')
    not_init = is_NOT_initialized()
    @assertFalse(not_init)

  end subroutine check_when_initialized_runs

   @Test
  subroutine check_dust_emis(this)
    ! Test that the dust_emis logical functions work as expected
    class(TestDustEmis), intent(inout) :: this
    logical :: not_init

    call dust_emis_set_options( 'Zender_2003', 'lnd')
    @assertTrue( is_dust_emis_zender() )
    @assertFalse( is_dust_emis_leung() )
    call dust_emis_set_options( 'Leung_2023', 'none')
    @assertFalse( is_dust_emis_zender() )
    @assertTrue( is_dust_emis_leung() )

  end subroutine check_dust_emis

  @Test
  subroutine check_zender_soil(this)
    ! Test that the dust_emis_Zender logical functions work as expected
    class(TestDustEmis), intent(inout) :: this
    logical :: not_init

    call dust_emis_set_options( 'Zender_2003', 'lnd')
    @assertTrue( is_zender_soil_erod_from_land() )
    @assertFalse( is_zender_soil_erod_from_atm() )
    call dust_emis_set_options( 'Zender_2003', 'atm')
    @assertFalse( is_zender_soil_erod_from_land() )
    @assertTrue( is_zender_soil_erod_from_atm() )

  end subroutine check_zender_soil

  @Test
  subroutine check_options(this)
    ! Test that the check_options subroutine catches errors that should die
    class(TestDustEmis), intent(inout) :: this
    logical :: not_init

    call dust_emis_set_options( 'zztop', 'zztop')
    @assertExceptionRaised(endrun_msg('(check_options_finish_init) ERROR: dust_emis_method namelist item is not valid'))
    call dust_emis_set_options( 'Leung_2023', 'lnd')
    @assertExceptionRaised(endrun_msg('(check_options_finish_init) ERROR: zender_soil_erod_source should NOT be set, when dust_emis_method=Leung_2023'))
    call dust_emis_set_options( 'Leung_2023', 'atm')
    @assertExceptionRaised(endrun_msg('(check_options_finish_init) ERROR: zender_soil_erod_source should NOT be set, when dust_emis_method=Leung_2023'))
    call dust_emis_set_options( 'Zender_2003', 'none')
    @assertExceptionRaised(endrun_msg('(check_options_finish_init) ERROR: zender_soil_erod_source can only be lnd or atm'))
    call dust_emis_set_options( 'Zender_2003', 'zztop')
    @assertExceptionRaised(endrun_msg('(check_options_finish_init) ERROR: zender_soil_erod_source can only be lnd or atm'))

  end subroutine check_options

end module test_shr_dust_emis
