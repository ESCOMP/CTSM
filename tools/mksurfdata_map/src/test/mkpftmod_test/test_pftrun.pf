module test_pftrun
  
  ! Tests of mkpftMod: pft_override functions

  use pfunit_mod

  use shr_kind_mod, only : r8 => shr_kind_r8
  use mkpftMod
  use mkvarctl, only: numpft
  use mkvarpar, only: numstdpft
  use mkpftConstantsMod, only: maxpft, c3cropindex, c3irrcropindex
  use mkpctPftTypeMod    , only : pct_pft_type
  use mkdomainMod        , only : domain_type, for_test_create_domain, domain_clean

  implicit none
  save

  @TestCase
  type, extends(TestCase) :: TestMkPFTRun
    character(len=12) :: mapfname
    character(len=12) :: fpft
    type(domain_type) :: ldomain
    integer :: ndiag
    real(r8), allocatable  :: expected(:)
    real(r8) :: expected_cft(2)
    real(r8) :: expected_pft(0:14)
    type(pct_pft_type), allocatable :: pctnatpft(:)     ! % of grid cell that is nat veg, and breakdown into PFTs
    real(r8), allocatable  :: pctlnd_pft(:)             ! PFT data: % of gridcell for PFTs
    type(pct_pft_type), allocatable :: pctcft(:)        ! % of grid cell that is crop, and breakdown into CFTs
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestMkPFTRun

contains

  subroutine setUp(this)
    class(TestMkPFTRun), intent(inout) :: this
    integer :: ns_o

    numpft = numstdpft
    pft_idx(0:maxpft) = -1
    pft_frc(0:maxpft) = 0.0_r8
    this%ndiag = 6
    this%mapfname = "none"
    this%fpft     = "none"
    call for_test_create_domain( this%ldomain )
    ns_o = this%ldomain%ns
    allocate(  this%pctnatpft(ns_o) )
    allocate(  this%pctlnd_pft(ns_o) )
    allocate(  this%pctcft(ns_o) )
    allocate(  this%expected(ns_o) )
    this%expected = 0.0_r8
    this%expected_cft = 0.0_r8
    this%expected_pft = 0.0_r8
  end subroutine setUp

  subroutine tearDown(this)
    class(TestMkPFTRun), intent(inout) :: this

    deallocate(  this%pctnatpft )
    deallocate(  this%pctlnd_pft )
    deallocate(  this%pctcft )
    deallocate(  this%expected )
    call domain_clean( this%ldomain )

  end subroutine tearDown

  @Test
  subroutine test_runmkpftZero(this)
    class(TestMkPFTRun), intent(inout) :: this
    logical :: zero_out, all_veg_l
    integer :: n

    zero_out = .true.
    all_veg_l = .false.
    call mkpftInit( zero_out, all_veg_l )
    @assertTrue(  use_input_pft )
    @assertTrue(  presc_cover )
    call mkpft(this%ldomain, this%mapfname, this%fpft, this%ndiag, &
     pctlnd_o=this%pctlnd_pft, pctnatpft_o=this%pctnatpft, pctcft_o=this%pctcft)
    this%expected = 100.0_r8
    @assertEqual( this%expected, this%pctlnd_pft )
    do n = 1, this%ldomain%ns
       @assertEqual( this%pctnatpft(n)%get_pct_l2g(), 0.0_r8 )
       @assertEqual( this%pctcft(n)%get_pct_l2g(), 0.0_r8 )
       this%expected_pft = 0.0_r8
       this%expected_pft(0) = 100.0_r8
       this%expected_cft = 0.0_r8
       this%expected_cft(1) = 100.0_r8
       @assertEqual( this%pctnatpft(n)%get_pct_p2l(), this%expected_pft )
       @assertEqual( this%pctcft(n)%get_pct_p2l(), this%expected_cft )
    end do

  end subroutine test_runmkpftZero

  @Test
  subroutine test_runmkpftPftORide(this)
    class(TestMkPFTRun), intent(inout) :: this
    logical :: zero_out, all_veg_l
    integer :: n
    integer, parameter :: pftidx = 1

    zero_out = .false.
    all_veg_l = .true.
    pft_idx(0) = pftidx
    pft_frc(0) = 100._r8
    call mkpftInit( zero_out, all_veg_l )
    @assertTrue(  use_input_pft )
    @assertTrue(  presc_cover )
    call mkpft(this%ldomain, this%mapfname, this%fpft, this%ndiag, &
     pctlnd_o=this%pctlnd_pft, pctnatpft_o=this%pctnatpft, pctcft_o=this%pctcft)
    this%expected = 100.0_r8
    @assertEqual( this%expected, this%pctlnd_pft )
    do n = 1, this%ldomain%ns
       @assertEqual( this%pctnatpft(n)%get_pct_l2g(), 100.0_r8 )
       @assertEqual( this%pctcft(n)%get_pct_l2g(), 0.0_r8 )
       this%expected_pft = 0.0_r8
       this%expected_pft(pftidx) = 100.0_r8
       this%expected_cft = 0.0_r8
       this%expected_cft(1) = 100.0_r8
       @assertEqual( this%pctnatpft(n)%get_pct_p2l(), this%expected_pft )
       @assertEqual( this%pctcft(n)%get_pct_p2l(), this%expected_cft )
    end do

  end subroutine test_runmkpftPftORide


  @Test
  subroutine test_runmkpftPftORideWCrop(this)
    use mkvarpar, only: numstdpft, numstdcft
    class(TestMkPFTRun), intent(inout) :: this
    logical :: zero_out, all_veg_l
    integer :: n
    integer :: cftidx
    integer, parameter :: pftidx = 1

    cftidx = c3cropindex
    zero_out = .false.
    all_veg_l = .true.
    @assertLessThan( pftidx, numstdpft-numstdcft+1 )
    @assertGreaterThan( cftidx, numstdpft-numstdcft )
    pft_idx(0:1) = (/ pftidx, cftidx /)
    pft_frc(0:1) = (/ 50.0_r8, 50.0_r8 /)
    call mkpftInit( zero_out, all_veg_l )
    @assertTrue(  use_input_pft )
    @assertTrue(  presc_cover )
    call mkpft(this%ldomain, this%mapfname, this%fpft, this%ndiag, &
     pctlnd_o=this%pctlnd_pft, pctnatpft_o=this%pctnatpft, pctcft_o=this%pctcft)
    this%expected = 100.0_r8
    @assertEqual( this%expected, this%pctlnd_pft )
    do n = 1, this%ldomain%ns
       @assertEqual( this%pctnatpft(n)%get_pct_l2g(), 50.0_r8 )
       @assertEqual( this%pctcft(n)%get_pct_l2g(), 50.0_r8 )
       this%expected_pft = 0.0_r8
       this%expected_pft(pftidx) = 100.0_r8
       this%expected_cft = 0.0_r8
       this%expected_cft(numstdpft-cftidx) = 100.0_r8
       @assertEqual( this%pctnatpft(n)%get_pct_p2l(), this%expected_pft )
       @assertEqual( this%pctcft(n)%get_pct_p2l(), this%expected_cft )
    end do

  end subroutine test_runmkpftPftORideWCrop

  @Test
  subroutine test_runmkpft4PftORideWCrop(this)
    use mkvarpar, only: numstdpft, numstdcft
    class(TestMkPFTRun), intent(inout) :: this
    logical :: zero_out, all_veg_l
    integer :: n
    integer :: cftidx, cftidx2
    integer, parameter :: pftidx = 1, pftidx2 = 2

    cftidx = c3cropindex
    cftidx2 = c3irrcropindex
    zero_out = .false.
    all_veg_l = .true.
    @assertLessThan( pftidx, numstdpft-numstdcft+1 )
    @assertLessThan( pftidx2, numstdpft-numstdcft+1 )
    @assertGreaterThan( cftidx, numstdpft-numstdcft )
    @assertGreaterThan( cftidx2, numstdpft-numstdcft )
    pft_idx(0:3) = (/ pftidx, pftidx2, cftidx, cftidx2  /)
    pft_frc(0:3) = (/ 25.0_r8, 25.0_r8, 25.0_r8, 25.0_r8 /)
    call mkpftInit( zero_out, all_veg_l )
    @assertTrue(  use_input_pft )
    @assertTrue(  presc_cover )
    call mkpft(this%ldomain, this%mapfname, this%fpft, this%ndiag, &
     pctlnd_o=this%pctlnd_pft, pctnatpft_o=this%pctnatpft, pctcft_o=this%pctcft)
    this%expected = 100.0_r8
    @assertEqual( this%expected, this%pctlnd_pft )
    do n = 1, this%ldomain%ns
       @assertEqual( this%pctnatpft(n)%get_pct_l2g(), 50.0_r8 )
       @assertEqual( this%pctcft(n)%get_pct_l2g(), 50.0_r8 )
       this%expected_pft = 0.0_r8
       this%expected_pft(pftidx) =  50.0_r8
       this%expected_pft(pftidx2) =  50.0_r8
       this%expected_cft = 50.0_r8
       @assertEqual( this%pctnatpft(n)%get_pct_p2l(), this%expected_pft )
       @assertEqual( this%pctcft(n)%get_pct_p2l(), this%expected_cft )
    end do

  end subroutine test_runmkpft4PftORideWCrop

end module test_pftrun
