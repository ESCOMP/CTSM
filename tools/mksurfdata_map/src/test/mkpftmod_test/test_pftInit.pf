module test_pftInit
  
  ! Tests of mkpftMod: pft_override functions

  use pfunit_mod

  use shr_kind_mod, only : r8 => shr_kind_r8
  use mkpftMod
  use mkvarctl, only: numpft
  use mkvarpar, only: numstdpft, noveg
  use mkpftConstantsMod, only: maxpft, c3cropindex

  implicit none
  save

  @TestCase
  type, extends(TestCase) :: TestMkPFT
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestMkPFT

contains

  subroutine setUp(this)
    class(TestMkPFT), intent(inout) :: this
    numpft = numstdpft
    pft_idx(0:maxpft) = -1
    pft_frc(0:maxpft) = 0.0_r8
  end subroutine setUp

  subroutine tearDown(this)
    class(TestMkPFT), intent(inout) :: this

  end subroutine tearDown

  @Test
  subroutine test_runmkpftInit(this)
    class(TestMkPFT), intent(inout) :: this
    logical :: zero_out_l, all_veg_l

    zero_out_l = .false.
    all_veg_l = .false.
    call mkpftInit( zero_out_l, all_veg_l )
    @assertFalse(  use_input_pft )
    @assertFalse(  presc_cover )

  end subroutine test_runmkpftInit

  @Test
  subroutine test_runmkpftInitZero(this)
    class(TestMkPFT), intent(inout) :: this
    logical :: zero_out_l, all_veg_l

    zero_out_l = .true.
    all_veg_l = .false.
    call mkpftInit( zero_out_l, all_veg_l )
    @assertTrue(  use_input_pft )
    @assertTrue(  presc_cover )
    @assertEqual(  pft_idx(0), noveg )
    @assertEqual(  pft_frc(0), 0.0_r8 )

  end subroutine test_runmkpftInitZero

  @Test
  subroutine test_runmkpftInitPftORide(this)
    class(TestMkPFT), intent(inout) :: this
    logical :: zero_out_l, all_veg_l

    zero_out_l = .false.
    pft_idx(0) = 1
    pft_frc(0) = 100._r8
    all_veg_l = .true.
    call mkpftInit( zero_out_l, all_veg_l )
    @assertTrue(  use_input_pft )
    @assertTrue(  presc_cover )

  end subroutine test_runmkpftInitPftORide


  @Test
  subroutine test_runmkpftInitPftORideButNOTAllVeg(this)
    class(TestMkPFT), intent(inout) :: this
    logical :: zero_out_l, all_veg_l

    zero_out_l = .false.
    pft_idx(0:1) = (/ 1, c3cropindex /)
    pft_frc(0:1) = (/ 50._r8, 50.0_r8 /)
    all_veg_l = .true.
    call mkpftInit( zero_out_l, all_veg_l )
    @assertTrue(  use_input_pft )
    @assertTrue(  presc_cover )

  end subroutine test_runmkpftInitPftORideButNOTAllVeg


  @Test
  subroutine test_runmkpftInitPftORideCrop(this)
    class(TestMkPFT), intent(inout) :: this
    logical :: zero_out_l, all_veg_l

    zero_out_l = .false.
    numpft = maxpft
    pft_idx(0) = 17
    pft_frc(0) = 100._r8
    all_veg_l = .true.
    call mkpftInit( zero_out_l, all_veg_l )
    @assertTrue(  use_input_pft )
    @assertTrue(  presc_cover )

  end subroutine test_runmkpftInitPftORideCrop


  @Test
  subroutine test_runmkpftInitPftORideAll(this)
    class(TestMkPFT), intent(inout) :: this
    logical :: zero_out_l, all_veg_l
    integer :: i

    zero_out_l = .false.
    numpft = numstdpft
    do i = 0, numpft
       pft_idx(i) = i
       pft_frc(i) = 1.0_r8
    end do
    pft_frc(numpft) = 100._r8 - sum(pft_frc(0:numpft-1))
    @assertEqual( 100.0_r8, sum(pft_frc) )
    all_veg_l = .true.
    call mkpftInit( zero_out_l, all_veg_l )
    @assertTrue(  use_input_pft )
    @assertTrue(  presc_cover )

  end subroutine test_runmkpftInitPftORideAll

  @Test
  subroutine test_runmkpftInitPFTOrideWarnNoCrop(this)
    class(TestMkPFT), intent(inout) :: this
    logical :: zero_out_l, all_veg_l

    zero_out_l = .false.
    numpft = maxpft
    pft_idx(0) = 1
    pft_frc(0) = 100._r8
    all_veg_l = .true.
    call mkpftInit( zero_out_l, all_veg_l )
    @assertTrue(  use_input_pft )
    @assertTrue(  presc_cover )

  end subroutine test_runmkpftInitPFTOrideWarnNoCrop

  @Test
  subroutine test_runmkpftInitPFTOrideWarnNoNatVeg(this)
    class(TestMkPFT), intent(inout) :: this
    logical :: zero_out_l, all_veg_l

    zero_out_l = .false.
    numpft = maxpft
    pft_idx(0) = c3cropindex
    pft_frc(0) = 100._r8
    all_veg_l = .true.
    call mkpftInit( zero_out_l, all_veg_l )
    @assertTrue(  use_input_pft )
    @assertTrue(  presc_cover )

  end subroutine test_runmkpftInitPFTOrideWarnNoNatVeg

  @Test
  subroutine test_runmkpftInitBadZeroNInput(this)
    class(TestMkPFT), intent(inout) :: this
    logical :: zero_out_l, all_veg_l

    zero_out_l = .true.
    numpft = maxpft
    pft_idx(0) = numstdpft+1
    pft_frc(0) = 100._r8
    all_veg_l = .true.
    call mkpftInit( zero_out_l, all_veg_l )
    @assertExceptionRaised( "ABORTED:" )

  end subroutine test_runmkpftInitBadZeroNInput

  @Test
  subroutine test_runmkpftInitBadAllVeg(this)
    class(TestMkPFT), intent(inout) :: this
    logical :: zero_out_l, all_veg_l

    zero_out_l = .false.
    all_veg_l = .true.
    call mkpftInit( zero_out_l, all_veg_l )
    @assertExceptionRaised( "ABORTED:" )

  end subroutine test_runmkpftInitBadAllVeg

  @Test
  subroutine test_runmkpftInitBadNotSum(this)
    class(TestMkPFT), intent(inout) :: this
    logical :: zero_out_l, all_veg_l

    zero_out_l = .false.
    all_veg_l = .true.
    numpft = maxpft
    pft_idx(0) = numstdpft+1
    pft_frc(0) = 99._r8
    call mkpftInit( zero_out_l, all_veg_l )
    @assertExceptionRaised( "ABORTED:" )

  end subroutine test_runmkpftInitBadNotSum

  @Test
  subroutine test_runmkpftInitBadPFTOutRange(this)
    class(TestMkPFT), intent(inout) :: this
    logical :: zero_out_l, all_veg_l

    zero_out_l = .false.
    all_veg_l = .true.
    numpft = numstdpft
    pft_idx(0) = numstdpft+1
    pft_frc(0) = 100._r8
    call mkpftInit( zero_out_l, all_veg_l )
    @assertExceptionRaised( "ABORTED:" )

  end subroutine test_runmkpftInitBadPFTOutRange

  @Test
  subroutine test_runmkpftInitBadPFTBadVals(this)
    class(TestMkPFT), intent(inout) :: this
    logical :: zero_out_l, all_veg_l

    zero_out_l = .false.
    all_veg_l = .true.
    numpft = maxpft
    pft_idx(0:1) = (/ numstdpft+1, numstdpft+2 /)
    pft_frc(0:1) = (/ 101._r8, -1._r8 /)
    call mkpftInit( zero_out_l, all_veg_l )
    @assertExceptionRaised( "ABORTED:" )

  end subroutine test_runmkpftInitBadPFTBadVals

  @Test
  subroutine test_runmkpftInitBadnumpft(this)
    class(TestMkPFT), intent(inout) :: this
    logical :: zero_out_l, all_veg_l

    zero_out_l = .false.
    all_veg_l = .true.
    numpft = 79
    call mkpftInit( zero_out_l, all_veg_l )
    @assertExceptionRaised( "ABORTED:" )

  end subroutine test_runmkpftInitBadnumpft

  @Test
  subroutine test_runmkpftInitBadFrcNotIdx(this)
    class(TestMkPFT), intent(inout) :: this
    logical :: zero_out_l, all_veg_l

    zero_out_l = .false.
    all_veg_l = .true.
    numpft = maxpft
    pft_idx(0)   = numstdpft+1
    pft_frc(0:1) =  (/ 99._r8, 1._r8 /)
    call mkpftInit( zero_out_l, all_veg_l )
    @assertExceptionRaised( "ABORTED:" )

  end subroutine test_runmkpftInitBadFrcNotIdx

  @Test
  subroutine test_runmkpftInitBadIdxTwice(this)
    class(TestMkPFT), intent(inout) :: this
    logical :: zero_out_l, all_veg_l

    zero_out_l = .false.
    all_veg_l = .true.
    numpft = maxpft
    pft_idx(0:1) = (/ 17, 17 /)
    pft_frc(0:1) =  (/ 99._r8, 1._r8 /)
    call mkpftInit( zero_out_l, all_veg_l )
    @assertExceptionRaised( "ABORTED:" )

  end subroutine test_runmkpftInitBadIdxTwice

  @Test
  subroutine test_runmkpftInitBadFrcAfterZero(this)
    class(TestMkPFT), intent(inout) :: this
    logical :: zero_out_l, all_veg_l

    zero_out_l = .false.
    numpft = maxpft
    all_veg_l = .true.
    pft_idx(0:2) = (/ 17, -1, 18 /)
    pft_frc(0:2) =  (/ 99._r8, 0.0_r8, 1._r8 /)
    call mkpftInit( zero_out_l, all_veg_l )
    @assertExceptionRaised( "ABORTED:" )
  end subroutine test_runmkpftInitBadFrcAfterZero


end module test_pftInit
