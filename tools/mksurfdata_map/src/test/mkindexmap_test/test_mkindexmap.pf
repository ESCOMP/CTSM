module test_mkindexmap

  ! Tests of mkindexmapMod

  use pfunit_mod
  use mkindexmapMod
  use mkgridmapMod, only : gridmap_type, for_test_create_gridmap, gridmap_clean
  use shr_kind_mod , only : r8 => shr_kind_r8

  implicit none

  @TestCase
  type, extends(TestCase) :: TestMkIndexMap
     type(gridmap_type) :: gridmap
   contains
     procedure :: setUp
     procedure :: tearDown
     procedure :: createGridmap
     procedure :: createGridmap3src1dst
  end type TestMkIndexMap

  real(r8), parameter :: tol = 1.e-13_r8

  integer, parameter :: NODATA_VAL = -999

contains

  ! ------------------------------------------------------------------------
  ! Helper routines
  ! ------------------------------------------------------------------------


  subroutine setUp(this)
    class(TestMkIndexMap), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestMkIndexMap), intent(inout) :: this
    call gridmap_clean(this%gridmap)
  end subroutine tearDown

  !-----------------------------------------------------------------------
  subroutine createGridmap(this, src_indx, dst_indx, wovr, &
       na_in, nb_in)
    !
    ! !DESCRIPTION:
    ! Create this%gridmap
    !
    ! !ARGUMENTS:
    class(TestMkIndexMap), intent(inout) :: this

    ! The following arrays should all be the same size:
    integer, intent(in) :: src_indx(:)
    integer, intent(in) :: dst_indx(:)
    real(r8), intent(in) :: wovr(:)    ! overlap weights

    ! If not present, na is set to max(src_indx) and nb to max(dst_indx)
    integer, intent(in), optional :: na_in
    integer, intent(in), optional :: nb_in

    !
    ! !LOCAL VARIABLES:
    integer :: na
    integer :: nb
    integer :: ns

    character(len=*), parameter :: subname = 'createGridmap'
    !-----------------------------------------------------------------------

    ns = size(wovr)
    @assertEqual(ns, size(src_indx))
    @assertEqual(ns, size(dst_indx))

    if (present(na_in)) then
       na = na_in
    else
       na = maxval(src_indx)
    end if

    if (present(nb_in)) then
       nb = nb_in
    else
       nb = maxval(dst_indx)
    end if

    call for_test_create_gridmap(this%gridmap, na=na, nb=nb, ns=ns, &
         src_indx=src_indx, dst_indx=dst_indx, wovr=wovr)

  end subroutine createGridmap

  !-----------------------------------------------------------------------
  subroutine createGridmap3src1dst(this)
    !
    ! !DESCRIPTION:
    ! Creates a gridmap with 3 src points and 1 dst point.
    !
    ! Overlap weights are 0.25, 0.5, 0.25
    !
    ! !ARGUMENTS:
    class(TestMkIndexMap), intent(inout) :: this
    !
    ! !LOCAL VARIABLES:

    character(len=*), parameter :: subname = 'createGridmap3src1dst'
    !-----------------------------------------------------------------------

    call this%createGridmap( &
         src_indx = [1,       2,      3], &
         dst_indx = [1,       1,      1], &
         wovr     = [0.25_r8, 0.5_r8, 0.25_r8])
  end subroutine createGridmap3src1dst


  ! ------------------------------------------------------------------------
  ! Tests of get_max_indices
  ! ------------------------------------------------------------------------

  @Test
  subroutine getMaxIndices_maxFirst(this)
    class(TestMkIndexMap), intent(inout) :: this
    integer :: dst_array(1)

    call this%createGridmap3src1dst()

    call get_max_indices(&
         gridmap = this%gridmap, &
         src_array = [13, 12, 11], &
         dst_array = dst_array, &
         nodata = NODATA_VAL)

    @assertEqual([13], dst_array)
  end subroutine getMaxIndices_maxFirst

  @Test
  subroutine getMaxIndices_maxMiddle(this)
    class(TestMkIndexMap), intent(inout) :: this
    integer :: dst_array(1)

    call this%createGridmap3src1dst()

    call get_max_indices(&
         gridmap = this%gridmap, &
         src_array = [12, 13, 11], &
         dst_array = dst_array, &
         nodata = NODATA_VAL)

    @assertEqual([13], dst_array)
  end subroutine getMaxIndices_maxMiddle

  @Test
  subroutine getMaxIndices_maxLast(this)
    class(TestMkIndexMap), intent(inout) :: this
    integer :: dst_array(1)

    call this%createGridmap3src1dst()

    call get_max_indices(&
         gridmap = this%gridmap, &
         src_array = [11, 12, 13], &
         dst_array = dst_array, &
         nodata = NODATA_VAL)

    @assertEqual([13], dst_array)
  end subroutine getMaxIndices_maxLast

  @Test
  subroutine getMaxIndices_noData(this)
    class(TestMkIndexMap), intent(inout) :: this
    integer :: dst_array(2)

    ! 2 destination points, but all source points map to dest #1 (nothing maps to dest #2)
    call this%createGridmap( &
         src_indx = [1,2,3], &
         dst_indx = [1,1,1], &
         wovr = [0.25_r8, 0.5_r8, 0.25_r8], &
         nb_in = 2)

    call get_max_indices(&
         gridmap = this%gridmap, &
         src_array = [11, 12, 13], &
         dst_array = dst_array, &
         nodata = NODATA_VAL)

    @assertEqual([13, NODATA_VAL], dst_array)
  end subroutine getMaxIndices_noData

  @Test
  subroutine getMaxIndices_noOverlap(this)
    class(TestMkIndexMap), intent(inout) :: this
    integer :: dst_array(2)

    ! 2 destination points, and the matrix has an overlap with dest #2, but the overlap
    ! weight is 0. (I'm not sure this can happen in practice, but I'm also not sure that
    ! it can't happen.)
    call this%createGridmap( &
         src_indx = [1,2,3,3], &
         dst_indx = [1,1,1,2], &
         wovr = [0.25_r8, 0.5_r8, 0.25_r8, 0._r8])

    call get_max_indices(&
         gridmap = this%gridmap, &
         src_array = [11, 12, 13], &
         dst_array = dst_array, &
         nodata = NODATA_VAL)

    @assertEqual([13, NODATA_VAL], dst_array)
  end subroutine getMaxIndices_noOverlap

  @Test
  subroutine getMaxIndices_bigValNoOverlap(this)
    class(TestMkIndexMap), intent(inout) :: this
    integer :: dst_array(1)

    ! Overlap weight is 0 for a point with a big value. (I'm not sure this can happen in
    ! practice, but I'm also not sure that it can't happen.)
    call this%createGridmap( &
         src_indx = [1,2,3], &
         dst_indx = [1,1,1], &
         wovr = [0.5_r8, 0.5_r8, 0._r8])

    call get_max_indices(&
         gridmap = this%gridmap, &
         src_array = [11, 12, 13], &
         dst_array = dst_array, &
         nodata = NODATA_VAL)

    @assertEqual([12], dst_array)
  end subroutine getMaxIndices_bigValNoOverlap

  @Test
  subroutine getMaxIndices_multipleDests(this)
    ! Make sure that the source/dest indexing is working right by having multiple source
    ! & dest points
    class(TestMkIndexMap), intent(inout) :: this
    integer :: dst_array(2)

    call this%createGridmap( &
         src_indx = [1,2,3,4], &
         dst_indx = [1,1,2,2], &
         wovr = [0.5_r8, 0.5_r8, 0.5_r8, 0.5_r8])

    call get_max_indices(&
         gridmap = this%gridmap, &
         src_array = [11,12,22,21], &
         dst_array = dst_array, &
         nodata = NODATA_VAL)

    @assertEqual([12,22], dst_array)
  end subroutine getMaxIndices_multipleDests

end module test_mkindexmap
