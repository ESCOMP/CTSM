module test_convert_from_p2g

  ! Tests of mkpftUtilsMod: convert_from_p2g
  
  use pfunit_mod

  use shr_kind_mod, only : r8 => shr_kind_r8
  use mkpctPftTypeMod, only : pct_pft_type
  use mkpftUtilsMod, only : convert_from_p2g
  use mkpftConstantsMod, only : natpft_lb, natpft_ub, num_cft, cft_lb, cft_ub, c3cropindex

  implicit none
  save

  real(r8), parameter :: tol = 1.e-12_r8

contains

  subroutine setup()
    ! Perform setup for most tests

    natpft_lb = 0
    natpft_ub = 2
    cft_lb = 3
    cft_ub = 4
    num_cft = 2

    c3cropindex = 3

  end subroutine setup


  ! ------------------------------------------------------------------------
  ! Tests of convert_from_p2g_default
  ! ------------------------------------------------------------------------

  @Test
  subroutine test_standard()
    ! Standard case: some nat pft, some crop
    type(pct_pft_type) :: pctnatpft, pctcft
    
    call setup

    call convert_from_p2g([1._r8, 2._r8, 3._r8, 4._r8, 5._r8], pctnatpft, pctcft)
    
    @assertEqual(6._r8, pctnatpft%get_pct_l2g(), tolerance=tol)
    @assertEqual([1._r8, 2._r8, 3._r8]/6._r8 * 100._r8, pctnatpft%get_pct_p2l(), tolerance=tol)
    @assertEqual(9._r8, pctcft%get_pct_l2g(), tolerance=tol)
    @assertEqual([4._r8, 5._r8]/9._r8 * 100._r8, pctcft%get_pct_p2l(), tolerance=tol)
  end subroutine test_standard
    
  @Test
  subroutine test_natpft0()
    ! natpft all 0 (percents should be at their default)
    type(pct_pft_type) :: pctnatpft, pctcft

    call setup

    call convert_from_p2g([0._r8, 0._r8, 0._r8, 4._r8, 5._r8], pctnatpft, pctcft)

    @assertEqual(0._r8, pctnatpft%get_pct_l2g())
    @assertEqual([100._r8, 0._r8, 0._r8], pctnatpft%get_pct_p2l())
    @assertEqual(9._r8, pctcft%get_pct_l2g(), tolerance=tol)
    @assertEqual([4._r8, 5._r8]/9._r8 * 100._r8, pctcft%get_pct_p2l(), tolerance=tol)
  end subroutine test_natpft0

  @Test
  subroutine test_cft0()
    ! cft landunit present, but all 0 (percents should be at their default)
    type(pct_pft_type) :: pctnatpft, pctcft

    call setup

    call convert_from_p2g([1._r8, 2._r8, 3._r8, 0._r8, 0._r8], pctnatpft, pctcft)
    @assertEqual(6._r8, pctnatpft%get_pct_l2g(), tolerance=tol)
    @assertEqual([1._r8, 2._r8, 3._r8]/6._r8 * 100._r8, pctnatpft%get_pct_p2l(), tolerance=tol)
    @assertEqual(0._r8, pctcft%get_pct_l2g(), tolerance=tol)
    @assertEqual([100._r8, 0._r8], pctcft%get_pct_p2l(), tolerance=tol)
  end subroutine test_cft0

  @Test
  subroutine test_no_cft_landunit()
    ! no cft landunit
    type(pct_pft_type) :: pctnatpft, pctcft

    call setup

    cft_lb = 3
    cft_ub = 2
    num_cft = 0

    call convert_from_p2g([1._r8, 2._r8, 3._r8], pctnatpft, pctcft)
    @assertEqual(6._r8, pctnatpft%get_pct_l2g(), tolerance=tol)
    @assertEqual([1._r8, 2._r8, 3._r8]/6._r8 * 100._r8, pctnatpft%get_pct_p2l(), tolerance=tol)
    @assertEqual(0._r8, pctcft%get_pct_l2g(), tolerance=tol)

  end subroutine test_no_cft_landunit

  ! ------------------------------------------------------------------------
  ! Tests of convert_from_p2g_missing_crops
  ! ------------------------------------------------------------------------

  @Test
  subroutine test_missing_crops()
    type(pct_pft_type) :: pctnatpft, pctcft_saved, pctcft

    call setup
    ! add an extra cft to make sure it's okay for the pct_p2g input to not contain the
    ! same number of elements as the cft landunit
    cft_ub = 5
    num_cft = 3
    pctcft_saved = pct_pft_type([10._r8, 15._r8, 20._r8], cft_lb, [100._r8, 0._r8, 0._r8])
  
    call convert_from_p2g([1._r8, 2._r8, 3._r8, 4._r8, 0._r8], pctcft_saved, pctnatpft, pctcft)
    @assertEqual(6._r8, pctnatpft%get_pct_l2g(), tolerance=tol)
    @assertEqual([1._r8, 2._r8, 3._r8]/6._r8 * 100._r8, pctnatpft%get_pct_p2l(), tolerance=tol)
    @assertEqual(4._r8, pctcft%get_pct_l2g(), tolerance=tol)
    @assertEqual([10._r8, 15._r8, 20._r8]/45._r8 * 100._r8, pctcft%get_pct_p2l(), tolerance=tol)

  end subroutine test_missing_crops

  @Test
  subroutine test_missing_crops_natpft0()
    ! Make sure the setting of the natpft default works correctly for the missing_crops
    ! version of the subroutine
    type(pct_pft_type) :: pctnatpft, pctcft_saved, pctcft

    call setup
    pctcft_saved = pct_pft_type([10._r8, 15._r8], cft_lb, [100._r8, 0._r8])
    
    call convert_from_p2g([0._r8, 0._r8, 0._r8, 4._r8, 0._r8], pctcft_saved, pctnatpft, pctcft)
    @assertEqual(0._r8, pctnatpft%get_pct_l2g())
    @assertEqual([100._r8, 0._r8, 0._r8], pctnatpft%get_pct_p2l())
    @assertEqual(4._r8, pctcft%get_pct_l2g(), tolerance=tol)
    @assertEqual([10._r8, 15._r8]/25._r8 * 100._r8, pctcft%get_pct_p2l(), tolerance=tol)
  end subroutine test_missing_crops_natpft0

  @Test
  subroutine test_missing_crops_cft0()
    ! Make sure the cft cover is as expected when the cft landunit area goes to 0
    type(pct_pft_type) :: pctnatpft, pctcft_saved, pctcft

    call setup
    pctcft_saved = pct_pft_type([10._r8, 15._r8], cft_lb, [100._r8, 0._r8])
    
    call convert_from_p2g([1._r8, 2._r8, 3._r8, 0._r8, 0._r8], pctcft_saved, pctnatpft, pctcft)
    @assertEqual(0._r8, pctcft%get_pct_l2g(), tolerance=tol)
    @assertEqual([10._r8, 15._r8]/25._r8 * 100._r8, pctcft%get_pct_p2l(), tolerance=tol)
  end subroutine test_missing_crops_cft0

end module test_convert_from_p2g
