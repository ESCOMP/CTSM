module test_adjust_total_veg_area
  
  ! Tests of mkpftUtilsMod: adjust_total_veg_area

  use pfunit_mod

  use shr_kind_mod, only : r8 => shr_kind_r8
  use mkpctPftTypeMod, only : pct_pft_type
  use mkpftUtilsMod, only : adjust_total_veg_area

  implicit none
  save

  real(r8), parameter :: tol = 1.e-12_r8

contains

  @Test
  subroutine test_standard_case()
    type(pct_pft_type) :: pctnatpft, pctcft

    pctnatpft = pct_pft_type([5._r8, 10._r8], 1, [100._r8, 0._r8])
    pctcft = pct_pft_type([10._r8, 20._r8], 3, [100._r8, 0._r8])

    call adjust_total_veg_area(90._r8, pctnatpft, pctcft)

    @assertEqual(30._r8, pctnatpft%get_pct_l2g())
    @assertEqual(60._r8, pctcft%get_pct_l2g())
  end subroutine test_standard_case

  @Test
  subroutine test_initial_total_zero()
    ! When the old areas are 0, all area should go into natural veg
    type(pct_pft_type) :: pctnatpft, pctcft

    pctnatpft = pct_pft_type([0._r8, 0._r8], 1, [100._r8, 0._r8])
    pctcft = pct_pft_type([0._r8, 0._r8], 3, [100._r8, 0._r8])

    call adjust_total_veg_area(90._r8, pctnatpft, pctcft)

    @assertEqual(90._r8, pctnatpft%get_pct_l2g())
    @assertEqual(0._r8, pctcft%get_pct_l2g())
  end subroutine test_initial_total_zero

  @Test
  subroutine test_initial_one_zero()
    ! Test a case where this is initially a 0 - make sure it stays 0
    type(pct_pft_type) :: pctnatpft, pctcft

    pctnatpft = pct_pft_type([0._r8, 0._r8], 1, [100._r8, 0._r8])
    pctcft = pct_pft_type([10._r8, 20._r8], 3, [100._r8, 0._r8])

    call adjust_total_veg_area(90._r8, pctnatpft, pctcft)
    
    @assertEqual(0._r8, pctnatpft%get_pct_l2g())
    @assertEqual(90._r8, pctcft%get_pct_l2g())
  end subroutine test_initial_one_zero

end module test_adjust_total_veg_area
