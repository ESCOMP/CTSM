module test_mkgridmap

  ! Tests of mkgridmapMod

  use pfunit_mod
  use mkgridmapMod
  use shr_kind_mod , only : r8 => shr_kind_r8

  implicit none

  @TestCase
  type, extends(TestCase) :: TestMkGridmap
     type(gridmap_type) :: gridmap
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestMkGridmap

  real(r8), parameter :: tol = 1.e-13_r8

contains

  subroutine setUp(this)
    class(TestMkGridmap), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestMkGridmap), intent(inout) :: this

    call gridmap_clean(this%gridmap)
  end subroutine tearDown

  ! ------------------------------------------------------------------------
  ! Tests of for_test_create_gridmap
  ! ------------------------------------------------------------------------

  @Test
  subroutine forTestCreateGridmap_defaultArgs(this)
    class(TestMkGridmap), intent(inout) :: this
    call for_test_create_gridmap(this%gridmap, na=2, nb=3, ns=4, &
         src_indx = [11,11,12,12], &
         dst_indx = [21,22,22,23], &
         wovr = [1._r8, 0.5_r8, 0.5_r8, 1._r8])

    @assertEqual(2, this%gridmap%na)
    @assertEqual(3, this%gridmap%nb)
    @assertEqual(4, this%gridmap%ns)
    @assertEqual([11,11,12,12], this%gridmap%src_indx)
    @assertEqual([21,22,22,23], this%gridmap%dst_indx)
    @assertEqual([1._r8, 0.5_r8, 0.5_r8, 1._r8], this%gridmap%wovr)
    @assertEqual([1,1], this%gridmap%mask_src)
    @assertEqual([1,1,1], this%gridmap%mask_dst)
    @assertEqual([1._r8, 1._r8], this%gridmap%frac_src)
    @assertEqual([1._r8, 1._r8, 1._r8], this%gridmap%frac_dst)

    ! Don't bother asserting area, xc, yc, because the default values of those shouldn't
    ! matter too much.
  end subroutine forTestCreateGridmap_defaultArgs

  @Test
  subroutine forTestCreateGridmap_explicitArgs(this)
    class(TestMkGridmap), intent(inout) :: this
    integer, parameter :: na = 2
    integer, parameter :: nb = 3
    integer, parameter :: ns = 4
    integer, parameter :: src_indx(ns) = [11,11,12,12]
    integer, parameter :: dst_indx(ns) = [21,22,22,23]
    real(r8), parameter :: wovr(ns) = [1._r8, 0.5_r8, 0.5_r8, 1._r8]
    integer, parameter :: mask_src(na) = [1, 0]
    integer, parameter :: mask_dst(nb) = [0, 1, 1]
    real(r8), parameter :: frac_src(na) = [0.1_r8, 0.0_r8]
    real(r8), parameter :: frac_dst(nb) = [0.0_r8, 0.1_r8, 0.1_r8]
    real(r8), parameter :: area_src(na) = [0.11_r8, 0.12_r8]
    real(r8), parameter :: area_dst(nb) = [0.13_r8, 0.14_r8, 0.15_r8]
    real(r8), parameter :: xc_src(na) = [1.1_r8, 1.2_r8]
    real(r8), parameter :: xc_dst(nb) = [2.1_r8, 2.2_r8, 2.3_r8]
    real(r8), parameter :: yc_src(na) = [3.1_r8, 3.2_r8]
    real(r8), parameter :: yc_dst(nb) = [4.1_r8, 4.2_r8, 4.3_r8]

    call for_test_create_gridmap(this%gridmap, na=na, nb=nb, ns=ns, &
         src_indx = src_indx, &
         dst_indx = dst_indx, &
         wovr = wovr, &
         mask_src = mask_src, &
         mask_dst = mask_dst, &
         frac_src = frac_src, &
         frac_dst = frac_dst, &
         area_src = area_src, &
         area_dst = area_dst, &
         xc_src = xc_src, &
         xc_dst = xc_dst, &
         yc_src = yc_src, &
         yc_dst = yc_dst)

    @assertEqual(na, this%gridmap%na)
    @assertEqual(nb, this%gridmap%nb)
    @assertEqual(ns, this%gridmap%ns)
    @assertEqual(src_indx, this%gridmap%src_indx)
    @assertEqual(dst_indx, this%gridmap%dst_indx)
    @assertEqual(wovr, this%gridmap%wovr)
    @assertEqual(mask_src, this%gridmap%mask_src)
    @assertEqual(mask_dst, this%gridmap%mask_dst)
    @assertEqual(frac_src, this%gridmap%frac_src)
    @assertEqual(frac_dst, this%gridmap%frac_dst)
    @assertEqual(yc_src, this%gridmap%yc_src)
    @assertEqual(yc_dst, this%gridmap%yc_dst)
    @assertEqual(xc_src, this%gridmap%xc_src)
    @assertEqual(xc_dst, this%gridmap%xc_dst)
    @assertEqual(area_src, this%gridmap%area_src)
    @assertEqual(area_dst, this%gridmap%area_dst)

  end subroutine forTestCreateGridmap_explicitArgs

end module test_mkgridmap
