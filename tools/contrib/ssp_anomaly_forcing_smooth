#! /usr/bin/env python3
"""

ssp_anomaly_forcing_smooth

Create anomaly forcing datasets for SSP scenarios that can be used by CESM datm model

load proper modules first, i.e.

../../py_env_create
conda activate ctsm_pylib

"""
import sys
import os
import subprocess
import datetime
import argparse
from getpass import getuser
import numpy as np
import netCDF4 as netcdf4
import re


parser = argparse.ArgumentParser(description="Create anomaly forcing")
period_options = "hist, (hist-)ssp126, (hist-)ssp245, (hist-)ssp370, (hist-)ssp585"
parser.add_argument(
    "period",
    help="Period to process and output. " + period_options,
    type=str,
)
parser.add_argument(
    "--climo-year",
    help="year to use to generate climatology",
    type=int,
    default=2015,
)
parser.add_argument(
    "--output-dir",
    help="Top-level output directory (default: ./anomaly_forcing/). Sub-directory will be created for the selected scenario.",
    type=str,
    default=os.path.join(".", "anomaly_forcing"),
)
parser.add_argument(
    "--write_climo",
    help="write out climatology files and exit",
    action="store_true",
    default=False,
)
parser.add_argument(
    "--print_ssps",
    help="Just print out directory names and exit",
    action="store_true",
    default=False,
)

args = parser.parse_args()

# Check provided period
periodtag = args.period.lower()
for ignore_punct in [".", "-", "_"]:
    periodtag = periodtag.replace(ignore_punct, "")
valid_ssps = ["ssp126", "ssp245", "ssp370", "ssp585"]
if periodtag not in ["hist"] + valid_ssps + ["hist" + ssp for ssp in valid_ssps]:
    raise ValueError(f"{args.period} is not a valid period. Choices: {period_options}")

# Get this to use in filenames
pattern = re.compile("ssp\d{3}")
result = pattern.findall(periodtag)
if result:
    if len(result) > 1:
        raise ValueError(f"Period not recognized: {args.period}")
    s = result[0].replace("ssp", "")
    ssptag = f"SSP{s[0]}-{s[1]}.{s[2]}"
    if "hist" in periodtag:
        periodtag_filenames = "hist-" + ssptag
    else:
        periodtag_filenames = ssptag
else:
    periodtag_filenames = "hist"

climo_year = args.climo_year
if climo_year != 2015:
    climo_text = ".climo" + str(climo_year)
else:
    climo_text = ""
# ten years on either side (21 years total)
climo_base_nyrs = 21
climo_radius = (climo_base_nyrs - 1)/2
if climo_radius != round(climo_radius):
    raise RuntimeError("climo_base_nyrs must be an integer")
if args.climo_year < 1850:
    raise ValueError("Minimum --climo-year is 1850")
elif args.climo_year > 2100:
    raise ValueError("Maximum --climo-year is 2100")
elif periodtag == "hist" and args.climo_year > 2014:
    raise ValueError("Maximum hist --climo-year is 2014")

# -------------------------------------------------------

# Output file format
format = "NETCDF4_CLASSIC"

print("Create anomaly forcing data that can be used by CTSM in CESM")
# Input and output directories make sure they exist
datapath = "/glade/campaign/collections/cmip/CMIP6/timeseries-cmip6/"  # Path on casper

"""
The corrected SSP simulations:

    b.e21.BSSP126cmip6.f09_g17.CMIP6-SSP1-2.6.101
    b.e21.BSSP126cmip6.f09_g17.CMIP6-SSP1-2.6.102 (MOAR)
    b.e21.BSSP126cmip6.f09_g17.CMIP6-SSP1-2.6.103

    b.e21.BSSP245cmip6.f09_g17.CMIP6-SSP2-4.5.101
    b.e21.BSSP245cmip6.f09_g17.CMIP6-SSP2-4.5.102 (MOAR)
    b.e21.BSSP245cmip6.f09_g17.CMIP6-SSP2-4.5.103

    b.e21.BSSP370cmip6.f09_g17.CMIP6-SSP3-7.0.101
    b.e21.BSSP370cmip6.f09_g17.CMIP6-SSP3-7.0.102 (MOAR)
    b.e21.BSSP370cmip6.f09_g17.CMIP6-SSP3-7.0.103

    b.e21.BSSP585cmip6.f09_g17.CMIP6-SSP5-8.5.101
    b.e21.BSSP585cmip6.f09_g17.CMIP6-SSP5-8.5.102 (MOAR)
    b.e21.BSSP585cmip6.f09_g17.CMIP6-SSP5-8.5.103

historical runs used to initialize SSPs:
b.e21.BSSP126cmip6.f09_g17.CMIP6-SSP1-2.6.001/CaseDocs/lnd_in: finidat = \
              'b.e21.BHIST.f09_g17.CMIP6-historical.010_v2.clm2.r.2015-01-01-00000.nc'
b.e21.BSSP126cmip6.f09_g17.CMIP6-SSP1-2.6.002/CaseDocs/lnd_in: finidat = \
              'b.e21.BHIST.f09_g17.CMIP6-historical.011.clm2.r.2015-01-01-00000.nc'
b.e21.BSSP126cmip6.f09_g17.CMIP6-SSP1-2.6.002-old/CaseDocs/lnd_in: finidat = \
              'b.e21.BHIST.f09_g17.CMIP6-historical.011.clm2.r.2015-01-01-00000.nc'
b.e21.BSSP245cmip6.f09_g17.CMIP6-SSP2-4.5.001/CaseDocs/lnd_in: finidat = \
              'b.e21.BHIST.f09_g17.CMIP6-historical.010_v2.clm2.r.2015-01-01-00000.nc'
b.e21.BSSP245cmip6.f09_g17.CMIP6-SSP2-4.5.002/CaseDocs/lnd_in: finidat = \
              'b.e21.BHIST.f09_g17.CMIP6-historical.011.clm2.r.2015-01-01-00000.nc'
b.e21.BSSP245cmip6.f09_g17.CMIP6-SSP2-4.5.003/CaseDocs/lnd_in: finidat = \
              'b.e21.BHIST.f09_g17.CMIP6-historical.004.clm2.r.2015-01-01-00000.nc'
b.e21.BSSP245cmip6.f09_g17.CMIP6-SSP2-4.5.003.oldTag/CaseDocs/lnd_in: finidat = \
              'b.e21.BHIST.f09_g17.CMIP6-historical.004.clm2.r.2015-01-01-00000.nc'
b.e21.BSSP245.f09_g17.CMIP6-SSP2-4.5.001.BAD/CaseDocs/lnd_in: finidat = \
              'b.e21.BHIST.f09_g17.CMIP6-historical.010_v2.clm2.r.2015-01-01-00000.nc'
b.e21.BSSP370cmip6.f09_g17.CMIP6-SSP3-7.0.001/CaseDocs/lnd_in: finidat = \
              'b.e21.BHIST.f09_g17.CMIP6-historical.010_v2.clm2.r.2015-01-01-00000.nc'
b.e21.BSSP370cmip6.f09_g17.CMIP6-SSP3-7.0.002/CaseDocs/lnd_in: finidat = \
              'b.e21.BHIST.f09_g17.CMIP6-historical.011.clm2.r.2015-01-01-00000.nc'
b.e21.BSSP370cmip6.f09_g17.CMIP6-SSP3-7.0.003/CaseDocs/lnd_in: finidat = \
              'b.e21.BHIST.f09_g17.CMIP6-historical.011.clm2.r.2015-01-01-00000.nc'
b.e21.BSSP370cmip6.f09_g17.CMIP6-SSP3-7.0.004/CaseDocs/lnd_in: finidat = \
              'b.e21.BHIST.f09_g17.CMIP6-historical.011.clm2.r.2015-01-01-00000.nc'
b.e21.BSSP370cmip6.f09_g17.CMIP6-SSP3-7.0.005/CaseDocs/lnd_in: finidat = \
              'b.e21.BHIST.f09_g17.CMIP6-historical.011.clm2.r.2015-01-01-00000.nc'
b.e21.BSSP370cmip6.f09_g17.CMIP6-SSP3-7.0.006/CaseDocs/lnd_in: finidat = \
              'b.e21.BHIST.f09_g17.CMIP6-historical.011.clm2.r.2015-01-01-00000.nc'
b.e21.BSSP585cmip6.f09_g17.CMIP6-SSP5-8.5.001/CaseDocs/lnd_in: finidat = \
              'b.e21.BHIST.f09_g17.CMIP6-historical.010.clm2.r.2015-01-01-00000.nc'
b.e21.BSSP585cmip6.f09_g17.CMIP6-SSP5-8.5.002/CaseDocs/lnd_in: finidat = \
              'b.e21.BHIST.f09_g17.CMIP6-historical.011.clm2.r.2015-01-01-00000.nc'

_v2 is just used for restart files that have been spatially interpolated

"""

spath = args.output_dir
if os.path.exists(datapath):
    print("Input data directory:" + datapath)
else:
    sys.exit("Could not find input directory: " + datapath)
if os.path.exists(spath):
    print("Output data directory:" + spath)
else:
    sys.exit("Could not find output directory: " + spath)

# Settings to run with
today = datetime.date.today()
creationdate = "_c" + today.strftime("%Y%m%d")
historydate = today.strftime("%a %b %d %Y")

sspdir_full = [
    "b.e21.BSSP126cmip6.f09_g17.CMIP6-SSP1-2.6.101/",
    "b.e21.BSSP126cmip6.f09_g17.CMIP6-SSP1-2.6.102/",
    "b.e21.BSSP126cmip6.f09_g17.CMIP6-SSP1-2.6.103/",
    "b.e21.BSSP245cmip6.f09_g17.CMIP6-SSP2-4.5.101/",
    "b.e21.BSSP245cmip6.f09_g17.CMIP6-SSP2-4.5.102/",
    "b.e21.BSSP245cmip6.f09_g17.CMIP6-SSP2-4.5.103/",
    "b.e21.BSSP370cmip6.f09_g17.CMIP6-SSP3-7.0.101/",
    "b.e21.BSSP370cmip6.f09_g17.CMIP6-SSP3-7.0.102/",
    "b.e21.BSSP370cmip6.f09_g17.CMIP6-SSP3-7.0.103/",
    "b.e21.BSSP585cmip6.f09_g17.CMIP6-SSP5-8.5.101/",
    "b.e21.BSSP585cmip6.f09_g17.CMIP6-SSP5-8.5.102/",
    "b.e21.BSSP585cmip6.f09_g17.CMIP6-SSP5-8.5.103/",
]

histdir = [
    "b.e21.BHIST.f09_g17.CMIP6-historical.010/",
    "b.e21.BHIST.f09_g17.CMIP6-historical.011/",
    "b.e21.BHIST.f09_g17.CMIP6-historical.004/",
]
num_ens = len(histdir)
histdir_full = histdir + histdir + histdir + histdir

sim_pairs = zip(sspdir_full, histdir_full)
# print simulation pairs and exit
if args.print_ssps:
    print(datapath, "\n")
    for sim in sim_pairs:
        print("SSP: ", sim[0])
        print("historical: ", sim[1], "\n")
    sys.exit()

# hist_case needed?
hist_case = "b.e21.BHIST.f09_g17.CMIP6-historical.010"

if "ssp" in periodtag:
    if ssptag == "SSP1-2.6":
        sspdir = sspdir_full[0:3]
    elif ssptag == "SSP2-4.5":
        sspdir = sspdir_full[3:6]
    elif ssptag == "SSP3-7.0":
        sspdir = sspdir_full[6:9]
    elif ssptag == "SSP5-8.5":
        sspdir = sspdir_full[9:12]
    else:
        raise RuntimeError(f"ssptag {ssptag} needs to be handled")
    if len(sspdir) != len(histdir):
        sys.exit(f"number of ensemble members not the same between historical {len(histdir)} and SSP {len(sspdir)} periods")

# Setup output directory
outdir = os.path.join(spath, "CMIP6-" + periodtag_filenames)
if not os.path.exists(outdir):
    os.makedirs(outdir)

print("Output specific data directory :" + outdir)

write_climo = args.write_climo

nmo = 12

print("\n\n\n")

# needed to use QBOT and U10, not using V and U(for sfcwind)
field_in = ["TBOT", "RAIN", "FSDS", "FLDS", "QBOT", "PBOT", "WIND"]
field_out = ["tas", "pr", "rsds", "rlds", "huss", "ps", "sfcWind"]
units = ["K", "mm/s", "W m!U-2!N", "W m!U-2!N", "kg/kg", "Pa", "m/s"]
units_disp = ["K", "mm/s", "W m!U-2!N", "W m!U-2!N", "kg/kg", "Pa", "m/s"]
anomsf = [
    "anomaly",
    "scale factor",
    "scale factor",
    "scale factor",
    "anomaly",
    "anomaly",
    "anomaly",
]

field_out_wind = ["uas", "vas"]

nfields = len(field_in)

# --  Loop over forcing fields  ------------------------------------
for f in range(nfields):

    # --  Loop over ensemble members  ------------------------------
    for nens in range(num_ens):
        print("Beginning ensemble number ", nens + 1)

        hist_case = histdir[nens]
        dpath = datapath
        dfile = "/lnd/proc/tseries/month_1/"
        hdir = dpath + hist_case + dfile
        if "ssp" in periodtag:
            fut_case = sspdir[nens]
            fdir = dpath + fut_case + dfile

        # Check that directories exist
        if not os.path.exists(hdir):
            sys.exit("Could not find directory: " + hdir)
        if "ssp" in periodtag and not os.path.exists(fdir):
            sys.exit("Could not find directory: " + fdir)

        # --  Get historical and SSP filenames  --------------------
        command = "ls " + hdir + "*." + field_in[f] + ".*.nc"
        x2 = subprocess.Popen(command, stdout=subprocess.PIPE, shell="True")
        x = x2.communicate()
        histfiles = x[0].decode("utf-8").split("\n")
        histfiles.remove("")

        if "ssp" in periodtag:
            command = "ls " + fdir + "*." + field_in[f] + ".*.nc"
            x2 = subprocess.Popen(command, stdout=subprocess.PIPE, shell="True")
            x = x2.communicate()
            sspfiles = x[0].decode("utf-8").split("\n")
            sspfiles.remove("")

        for hfile in histfiles:
            print(hfile.split("month_1/")[-1])
            if not os.path.exists(hfile):
                sys.exit(hfile + " does not exist")
        if "ssp" in periodtag:
            for sfile in sspfiles:
                print(sfile.split("month_1/")[-1])
                if not os.path.exists(sfile):
                    sys.exit(sfile + " does not exist")

        # --  Read in historical data  -----------
        f1 = netcdf4.MFDataset(histfiles, "r")
        if nens == 0:
            # read in coordinates
            lon = np.asfarray(f1.variables["lon"][:], np.float64)
            lat = np.asfarray(f1.variables["lat"][:], np.float64)
            hist_long_name = f1.variables[field_in[f]].long_name
            hist_time = np.asfarray(f1.variables["time"][:], np.float64)
            hist_time_units = f1.variables["time"].units
            hist_time_longname = f1.variables["time"].long_name

            # read landfrac, landmask, and area
            landfrac = np.asfarray(f1.variables["landfrac"][:, :], np.float64)
            landmask = np.asfarray(f1.variables["landmask"][:, :], np.float64)
            area = np.asfarray(f1.variables["area"][:, :], np.float64)
            ind = np.where(landfrac > 1.0e10)
            landfrac[ind] = 0

            x = hist_time_units.split()[2]
            ref_year = float(x.split("-")[0])
            hist_yrstart = np.min(hist_time / 365.0 + ref_year).astype(int)
            if "hist" not in periodtag:
                # overwrite hist_yrstart to select just 20 years prior to climo_year
                hist_yrstart = climo_year - (climo_base_nyrs - 1)
            hist_yrend = (np.max(hist_time / 365.0 + ref_year) - 1).astype(int)
            hist_nyrs = hist_yrend - hist_yrstart + 1
            if f == 0:
                print("hist years: ", hist_yrstart, hist_yrend, hist_nyrs)

            hist_ind = np.where(
                np.logical_and(
                    hist_time / 365.0 + ref_year > hist_yrstart,
                    hist_time / 365.0 + ref_year <= (hist_yrend + 1),
                )
            )[0]
            hist_time = hist_time[hist_ind]

            nlat = lat.size
            nlon = lon.size
            ntime = hist_time.size
            hist_fld = np.zeros((ntime, nlat, nlon))

        hist_fld += np.asfarray(f1.variables[field_in[f]][hist_ind, :, :], np.float64)
        f1.close()

        # add SNOW to RAIN
        if field_in[f] == "RAIN":
            histfiles2 = [file.replace("RAIN", "SNOW") for file in histfiles]
            f1 = netcdf4.MFDataset(histfiles2, "r")
            hist_fld += np.asfarray(f1.variables["SNOW"][hist_ind, :, :], np.float64)
            f1.close()

        if f == 0:
            print(
                "hist_time: ",
                hist_time[0] / 365.0 + ref_year,
                hist_time[-1] / 365.0 + ref_year,
            )

        # read in ssp data  ---------------------
        if "ssp" in periodtag:
            f1 = netcdf4.MFDataset(sspfiles, "r")
            if nens == 0:
                ssp_time = np.asfarray(f1.variables["time"][:], np.float64)
                ssp_time_units = f1.variables["time"].units
                ssp_time_longname = f1.variables["time"].long_name
                x = ssp_time_units.split()[2]
                ssp_ref_year = float(x.split("-")[0])

                # adjust ssp_time to reference time of hist_time
                # ssp_time += 365*(ssp_ref_year - ref_year)
                # ssp_ref_year = ref_year
                # adjust hist_time to reference time of ssp_time
                hist_time += 365 * (ref_year - ssp_ref_year)
                ref_year = ssp_ref_year

                # ssp_ind could be modified to subset data if needed...
                ssp_ind = np.arange(ssp_time.size, dtype=int)

                ssp_time = ssp_time[ssp_ind]
                ssp_long_name = f1.variables[field_in[f]].long_name
                ntime_ssp = ssp_time.size
                ssp_fld = np.zeros((ntime_ssp, nlat, nlon))

                ssp_yrstart = np.min(ssp_time / 365.0 + ref_year).astype(int)
                ssp_yrend = (np.max(ssp_time / 365.0 + ref_year) - 1).astype(int)
                ssp_nyrs = ssp_yrend - ssp_yrstart + 1

            ssp_fld += np.asfarray(f1.variables[field_in[f]][ssp_ind, :, :], np.float64)
            f1.close()

            # add SNOW to RAIN
            if field_in[f] == "RAIN":
                sspfiles2 = [file.replace("RAIN", "SNOW") for file in sspfiles]
                f1 = netcdf4.MFDataset(sspfiles2, "r")
                ssp_fld += np.asfarray(f1.variables["SNOW"][ssp_ind, :, :], np.float64)
                f1.close()

            if f == 0:
                print(
                    "ssp_time: ",
                    ssp_time[0] / 365.0 + ssp_ref_year,
                    ssp_time[-1] / 365.0 + ssp_ref_year,
                    ssp_time.size,
                )
        # end read in ssp data  -----------------

        if nens == 0:
            if "hist" in periodtag:
                thisperiod_yrstart = hist_yrstart
                long_name = hist_long_name
                if "ssp" not in periodtag:
                    thisperiod_yrend = hist_yrend
                else:
                    thisperiod_yrend = ssp_yrend
            else:
                thisperiod_yrstart = ssp_yrstart
                thisperiod_yrend = ssp_yrend
                long_name = ssp_long_name
            thisperiod_nyrs = thisperiod_yrend - thisperiod_yrstart + 1

            if f == 0:
                print(
                    f"{args.period} years: ",
                    thisperiod_yrstart,
                    thisperiod_yrend,
                    thisperiod_nyrs,
                )
            outfile_suffix = (
                ".CESM."
                + periodtag_filenames
                + climo_text
                + "."
                + str(thisperiod_yrstart)
                + "-"
                + str(thisperiod_yrend)
                + creationdate
                + ".nc4"
            )

    # --  end Loop over ensemble members  ------------------------------

    # normalize summed fields by number of ensemble members
    hist_fld = hist_fld / float(num_ens)
    if "ssp" in periodtag:
        ssp_fld = ssp_fld / float(num_ens)
        # concatenate arrays to form contiguous time series
        temp_fld = np.concatenate((hist_fld, ssp_fld), axis=0)
        full_time = np.concatenate((hist_time, ssp_time), axis=0)
    else:
        temp_fld = hist_fld
        full_time = hist_time
    tm = full_time.size

    # smooth data by applying boxcar averaging to sequence of months
    stemp_fld = np.copy(temp_fld)
    for n in range(tm):
        # 21 years of jan, feb, etc. centered on each month in data
        ind = nmo * (np.arange(climo_base_nyrs) - climo_radius) + n
        # account for edges
        m = np.where(np.logical_and(ind >= 0, ind < tm))[0]
        ind2 = ind[m].astype(int)

        stemp_fld[n, :, :] = np.sum(temp_fld[ind2, :, :], axis=0) / float(ind2.size)

    if f == 0:
        print(
            "full time: ",
            full_time[0] / 365.0 + ref_year,
            full_time[-1] / 365.0 + ref_year,
            full_time.size,
        )

    # create climatology of smoothed data
    climo = np.zeros((nmo, nlat, nlon))
    t_climo_year = np.argmin(np.abs((full_time / 365.0 + ref_year) - climo_year))
    # shift to january of climo_year
    t_climo_year += 1
    if "ssp" in periodtag:
        climo_base_arange = np.arange(climo_base_nyrs)
    else:
        climo_base_arange = np.arange(climo_radius + 1)
    if f == 0:
        print((full_time[t_climo_year] / 365.0 + ref_year))
    for n in range(nmo):
        ind = (
            nmo * (climo_base_arange - climo_radius) + t_climo_year + n
        ).astype(int)
        climo[n, :, :] = np.sum(stemp_fld[ind, :, :], axis=0) / float(ind.size)

    if f == 0:
        print("climo calculated")

    # extract smoothed data for period of interest
    def get_year_from_time(time, t, ref_year):
        return time[t] / 365.0 + ref_year

    if periodtag == "hist":
        # Historical period (1850-2014) only
        t_hist_end = len(full_time) - 1
        if f == 0:
            print(
                f"{get_year_from_time(full_time, 0, ref_year)}-{get_year_from_time(full_time, t_hist_end, ref_year)}"
            )
        fld_smoothed = stemp_fld
        nyrs = hist_nyrs
        thisperiod_time = hist_time
        thisperiod_time_units = hist_time_units
        thisperiod_time_longname = hist_time_longname
        thisperiod_yrstart = hist_yrstart
        thisperiod_yrend = hist_yrend
    elif "hist" not in periodtag:
        # SSP period (2015-2100) only
        t_ssp_start = (ssp_yrstart - hist_yrstart) * nmo
        if f == 0:
            print(
                f"{get_year_from_time(full_time, t_ssp_start, ref_year)}-{get_year_from_time(full_time, len(full_time)-1, ref_year)}"
            )
        fld_smoothed = stemp_fld[t_ssp_start:, :, :]
        nyrs = ssp_nyrs
        thisperiod_time = ssp_time
        thisperiod_time_units = ssp_time_units
        thisperiod_time_longname = ssp_time_longname
        thisperiod_yrstart = ssp_yrstart
        thisperiod_yrend = ssp_yrend
    else:
        # Entire period (1850-2100)
        if f == 0:
            print(
                f"{get_year_from_time(full_time, 0, ref_year)}-{get_year_from_time(full_time, len(full_time)-1, ref_year)}"
            )
        fld_smoothed = stemp_fld
        nyrs = hist_nyrs + ssp_nyrs
        thisperiod_time = full_time
        thisperiod_time_units = hist_time_units
        thisperiod_time_longname = hist_time_longname
        thisperiod_yrstart = hist_yrstart
        thisperiod_yrend = ssp_yrend

    # calculate anomaly relative to climatology
    anom_fld = np.zeros((fld_smoothed.shape))
    for y in range(nyrs):
        ind = (np.arange(nmo) + y * nmo).astype(int)
        try:
            if anomsf[f] == "anomaly":
                anom_fld[ind, :, :] = fld_smoothed[ind, :, :] - climo
            if anomsf[f] == "scale factor":
                tmp = fld_smoothed[ind, :, :]
                ind2 = np.where(climo != 0.0)
                # initialize scalar anomaly to 1
                tmp2 = np.ones(tmp.shape)
                # calculate scalar anomaly
                tmp2[ind2] = tmp[ind2] / climo[ind2]

                # place upper limit on scalar anomalies
                max_scale_factor = 5.0
                if field_in[f] == "FSDS":
                    max_scale_factor = 2.0
                ind2 = np.where(tmp2 > max_scale_factor)
                tmp2[ind2] = max_scale_factor
                anom_fld[ind, :, :] = tmp2
        except IndexError as e:
            raise IndexError("Try using a different climo_year.") from e
        except:
            raise
    # ----- end of year loop -------

    # write out climo to check field  -------------------------
    if write_climo:
        # Use NetCDF4 format, because using older NetCDF formats are too slow
        w = netcdf4.Dataset(
            os.path.join(outdir, field_out[f] + "_climo" + str(climo_year) + creationdate + ".nc"), "w", format=format
        )
        w.createDimension("lat", int(nlat))
        w.createDimension("lon", int(nlon))
        w.createDimension("time", int(nmo))

        wtime = w.createVariable("time", np.float64, ("time",))
        wlat = w.createVariable("lat", np.float64, ("lat",))
        wlon = w.createVariable("lon", np.float64, ("lon",))
        wvar = w.createVariable(
            field_out[f],
            np.float64,
            ("time", "lat", "lon"),
            fill_value=np.float64(1.0e36),
        )
        wtime[
            :,
        ] = full_time[0:12]
        wlon[
            :,
        ] = lon
        wlat[
            :,
        ] = lat
        wvar[:, :, :] = climo
        w.close()

        # Use NetCDF4 format, because using older NetCDF formats are too slow
        w_filename = outdir + field_out[f] + climo_text + "_smooth" + creationdate + ".nc4"
        w = netcdf4.Dataset(w_filename, "w", format=format)
        w.createDimension("lat", int(nlat))
        w.createDimension("lon", int(nlon))
        w.createDimension("time", int(tm))

        wtime = w.createVariable("time", np.float64, ("time",))
        wlat = w.createVariable("lat", np.float64, ("lat",))
        wlon = w.createVariable("lon", np.float64, ("lon",))
        wvar = w.createVariable(
            field_out[f],
            np.float64,
            ("time", "lat", "lon"),
            fill_value=np.float64(1.0e36),
        )
        wvar2 = w.createVariable(
            "smooth_" + field_out[f],
            np.float64,
            ("time", "lat", "lon"),
            fill_value=np.float64(1.0e36),
        )

        wtime[:] = full_time
        wlon[
            :,
        ] = lon
        wlat[
            :,
        ] = lat
        wvar[:, :, :] = temp_fld
        wvar2[:, :, :] = stemp_fld
        w.close()
        w_filename_cdf5 = w_filename.replace(".nc4", ".nc")
        subprocess.Popen(
            f"module load nco && nccopy -k 'cdf5' {w_filename} {w_filename_cdf5} && rm {w_filename}",
            stdout=subprocess.PIPE,
            shell="True",
        )
        print("Exit early after writing out climatology\n\n")
        sys.exit()

    # create netcdf file  ---------------------------------

    if f == 0:
        # Use NetCDF4 format, because using older NetCDF formats are too slow
        # Will need to convert to CDF5 format at the end, as we can't seem to
        # output in CDF5 format using netCDF4 python interfaces
        outfilename = outdir + "/" + "af.allvars" + outfile_suffix
        print("Creating: " + outfilename)
        outfile = netcdf4.Dataset(outfilename, "w", format=format)

        # creation date on the file
        command = 'date "+%Y/%m/%d"'
        x2 = subprocess.Popen(command, stdout=subprocess.PIPE, shell="True")
        x = x2.communicate()
        timetag = x[0].decode("utf-8").strip()

        outfile.Created_on = timetag

        outfile.title = "anomaly forcing data"
        if periodtag == "hist":
            note1_year2 = climo_year
        else:
            note1_year2 = climo_year + climo_radius
        outfile.note1 = (
            "Anomaly/scale factors calculated relative to "
            + str(climo_year - climo_radius)
            + "-"
            + str(note1_year2)
        )
        outfile.history = historydate + ": created by " + sys.argv[0]
        stdout = os.popen("git describe")
        outfile.gitdescribe = stdout.read().rstrip()
        outfile.Source = "CMIP6 CESM simulations"
        outfile.Conventions = "CF-1.0"
        outfile.comment = (
            "Monthly scale factors for given SSP scenario compared to a climatology based on"
            + " data centered on "
            + str(climo_year)
            + " over the range given in note1"
        )
        outfile.number_of_ensemble_members = str(num_ens)
        outfile.Created_by = getuser()

        for nens in range(num_ens):
            hdir = dpath + histdir[nens] + dfile
            if nens == 0:
                outfile.Created_from_historical_dirs = hdir
            else:
                outfile.Created_from_historical_dirs += ", " + hdir
            if "ssp" in periodtag:
                fdir = dpath + sspdir[nens] + dfile
                if nens == 0:
                    outfile.Created_from_scenario_dirs = fdir
                else:
                    outfile.Created_from_scenario_dirs += ", " + fdir

        outfile.History_years = str(hist_yrstart) + "," + str(hist_yrend)
        if "ssp" in periodtag:
            outfile.Scenario_years = str(ssp_yrstart) + "," + str(ssp_yrend)
        outfile.institution = "National Center for Atmospheric Research"

        outfile.createDimension("lat", size=int(nlat))
        outfile.createDimension("lon", size=int(nlon))
        outfile.createDimension("time", None)

        wtime = outfile.createVariable("time", np.float64, ("time",))
        wlat = outfile.createVariable("lat", np.float64, ("lat",))
        wlon = outfile.createVariable("lon", np.float64, ("lon",))
        wmask = outfile.createVariable("landmask", np.int32, ("lat", "lon"))
        warea = outfile.createVariable("area", np.float64, ("lat", "lon"))
        wfrac = outfile.createVariable("landfrac", np.float64, ("lat", "lon"))
        wtime.units = thisperiod_time_units
        wlon.units = "degrees_east"
        wlat.units = "degrees_north"
        warea.units = "km2"
        wfrac.units = "unitless"
        wmask.units = "unitless"

        # wtime.long_name = 'Months since January '+str(fut_yrstart)
        wtime.long_name = thisperiod_time_longname
        wlon.long_name = "Longitude"
        wlat.long_name = "Latitude"
        warea.long_name = "Grid cell area"
        wfrac.long_name = "Grid cell land fraction"
        wmask.long_name = "Grid cell land mask"
        wlon.mode = "time-invariant"
        wlat.mode = "time-invariant"
        warea.mode = "time-invariant"
        wfrac.mode = "time-invariant"
        wmask.mode = "time-invariant"

        wtime.calendar = "noleap"

        # write to file  --------------------------------------------
        # wtime_offset = 0
        # adjust time to middle of month
        # wtime_offset = -15
        wtime_offset = 15 - thisperiod_time[0]
        wtime[:] = thisperiod_time + wtime_offset
        wtime.calendar = "noleap"
        wlon[:] = lon
        wlat[:] = lat
        wmask[:, :] = landmask
        wfrac[:, :] = landfrac
        warea[:, :] = area
    # -- End if on open file

    if field_out[f] == "sfcWind":
        wvar = outfile.createVariable(
            field_out_wind[0],
            np.float64,
            ("time", "lat", "lon"),
            fill_value=np.float64(1.0e36),
        )
    else:
        wvar = outfile.createVariable(
            field_out[f],
            np.float64,
            ("time", "lat", "lon"),
            fill_value=np.float64(1.0e36),
        )
    wvar.units = units[f]
    wvar.mode = "time-dependent"

    # write to file  --------------------------------------------
    if field_out[f] == "sfcWind":
        wvar.long_name = str(long_name) + " U component " + anomsf[f]
    else:
        wvar.long_name = str(long_name) + " " + anomsf[f]

    if field_out[f] == "sfcWind":
        wvar[:, :, :] = anom_fld / np.sqrt(2)
    else:
        wvar[:, :, :] = anom_fld

    # List of source files
    wvar.historical_source_files = "".join(histfiles).replace(hdir, "")
    if "ssp" in periodtag:
        wvar.scenario_source_files = "".join(sspfiles).replace(fdir, "")

    # create second wind field for V component
    if field_out[f] == "sfcWind":
        command = 'date "+%y%m%d"'
        x2 = subprocess.Popen(command, stdout=subprocess.PIPE, shell="True")
        x = x2.communicate()
        timetag = x[0].decode("utf-8").strip()

        wvar = outfile.createVariable(
            field_out_wind[1],
            np.float64,
            ("time", "lat", "lon"),
            fill_value=np.float64(1.0e36),
        )
        wvar.units = units[f]
        wvar.cell_methods = "time: mean"
        wvar.long_name = str(long_name) + " V component " + anomsf[f]

        # write to file  --------------------------------------------
        wvar[:, :, :] = anom_fld / np.sqrt(2)

        # List of source files
        wvar.historical_source_files = "".join(histfiles).replace(hdir, "")
        if "ssp" in periodtag:
            wvar.scenario_source_files = "".join(sspfiles).replace(fdir, "")

    # -- end if statement for write for V field --------

# --  End Loop over forcing fields  ------------------------------------
outfile.close()

# Convert to CDF5
outfilename_cdf5 = outfilename.replace(".nc4", ".nc")
subprocess.Popen(
    f"module load nco && nccopy -k 'cdf5' {outfilename} {outfilename_cdf5} && rm {outfilename}",
    stdout=subprocess.PIPE,
    shell="True",
)

print("\n\nSuccessfully made anomaly forcing datasets\n")
