# -*- coding: utf-8 -*-
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
import sphinx_rtd_theme

# Assumes you have substitutions.py on your path
# pylint: disable=wrong-import-position
dir2add = os.path.join(os.path.dirname(__file__))
print(dir2add)
sys.path.insert(0, dir2add)
import substitutions as subs  # pylint: disable=import-error
from version_list import VERSION_LIST


# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx.ext.intersphinx',
    'sphinx.ext.autodoc',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.githubpages',
    'sphinx_mdinclude',
    ]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = ['.rst', '.md']
# source_suffix = '.rst'

# The master toctree document.
source_start_file = 'index'

# Save standard Sphinx substitution vars separately
project = subs.project
copyright = subs.copyright  # pylint: disable=redefined-builtin
author = subs.author
version = subs.version
release = subs.release

# version_label is not a standard sphinx variable, so we need some custom rst to allow
# pages to use it. We need a separate replacement for the bolded version because it
# doesn't work to have variable replacements within formatting.
rst_epilog = """
.. |version_label| replace:: {version_label}
.. |version_label_bold| replace:: **{version_label}**
""".format(version_label=subs.version_label)

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']


# -- Options for HTMLHelp output ------------------------------------------

if getattr(subs, "htmlhelp", False):
    htmlhelp_basename = subs.htmlhelp["basename"]


# -- Options for LaTeX output ---------------------------------------------
if getattr(subs, "latex", False):

    latex_elements = {
        # The paper size ('letterpaper' or 'a4paper').
        #
        # 'papersize': 'letterpaper',

        # The font size ('10pt', '11pt' or '12pt').
        #
        # 'pointsize': '10pt',

        # Additional stuff for the LaTeX preamble.
        #
        'preamble': '\\usepackage{hyperref}',

        'fncychap': '\\usepackage[Conny]{fncychap}',

        # Latex figure (float) alignment
        #
        # 'figure_align': 'htbp',
    }

    # Grouping the document tree into LaTeX files. List of tuples
    # (source start file, target name, title,
    #  author, documentclass [howto, manual, or own class]).
    latex_documents = [(
        source_start_file,
        subs.latex["target_name"],
        subs.latex["title"],
        author,
        subs.latex["category"],
    )]


# Options for manual page and Texinfo output
if getattr(subs, "mantex", False):

    # One entry per manual page. List of tuples
    # (source start file, name, title, authors, manual section).
    man_pages = [
        (source_start_file, subs.mantex["name"], subs.mantex["title"], [author], 1),
    ]

    if getattr(subs, "tex", False):
        # Grouping the document tree into Texinfo files. List of tuples
        # (source start file, target name, title, author,
        #  dir menu entry, description, category)
        texinfo_documents = [(
            source_start_file,
            subs.mantex["name"],
            subs.mantex["title"],
            author,
            subs.tex["dirmenu_entry"],
            subs.tex["description"],
            subs.tex["category"]),
        ]

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'python': ('https://docs.python.org/', None)}

numfig = True
numfig_format = {'figure': 'Figure %s',
                 'table': 'Table %s',
                 'code-block': 'Code %s',
                 'section': '%s',
                }
numfig_secnum_depth = 2

def setup(app):
    app.add_css_file('css/custom.css')

try:
    html_context
except NameError:
    html_context = dict()

html_context["display_lower_left"] = True

# Whether to show the version dropdown. If not set as environment variable, or environment variable
# is Python-falsey, do not show it.
version_dropdown = os.environ.get("version_dropdown")

if version_dropdown:
    html_context["current_version"] = os.environ["version_display_name"]

    html_context["versions"] = []
    pages_root = os.environ["pages_root"]
    for this_version in VERSION_LIST:
        html_context["versions"].append([
            this_version.display_name,
            os.path.join(pages_root, this_version.subdir()),
        ])
